ARM GAS  /tmp/ccIATWzB.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"system_stm32f1xx.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.SystemInit,"ax",%progbits
  19              		.align	2
  20              		.global	SystemInit
  21              		.thumb
  22              		.thumb_func
  24              	SystemInit:
  25              	.LFB63:
  26              		.file 1 "Core/Src/system_stm32f1xx.c"
   1:Core/Src/system_stm32f1xx.c **** /**
   2:Core/Src/system_stm32f1xx.c ****   ******************************************************************************
   3:Core/Src/system_stm32f1xx.c ****   * @file    system_stm32f1xx.c
   4:Core/Src/system_stm32f1xx.c ****   * @author  MCD Application Team
   5:Core/Src/system_stm32f1xx.c ****   * @version V4.2.0
   6:Core/Src/system_stm32f1xx.c ****   * @date    31-March-2017
   7:Core/Src/system_stm32f1xx.c ****   * @brief   CMSIS Cortex-M3 Device Peripheral Access Layer System Source File.
   8:Core/Src/system_stm32f1xx.c ****   * 
   9:Core/Src/system_stm32f1xx.c ****   * 1.  This file provides two functions and one global variable to be called from 
  10:Core/Src/system_stm32f1xx.c ****   *     user application:
  11:Core/Src/system_stm32f1xx.c ****   *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
  12:Core/Src/system_stm32f1xx.c ****   *                      factors, AHB/APBx prescalers and Flash settings). 
  13:Core/Src/system_stm32f1xx.c ****   *                      This function is called at startup just after reset and 
  14:Core/Src/system_stm32f1xx.c ****   *                      before branch to main program. This call is made inside
  15:Core/Src/system_stm32f1xx.c ****   *                      the "startup_stm32f1xx_xx.s" file.
  16:Core/Src/system_stm32f1xx.c ****   *
  17:Core/Src/system_stm32f1xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  18:Core/Src/system_stm32f1xx.c ****   *                                  by the user application to setup the SysTick 
  19:Core/Src/system_stm32f1xx.c ****   *                                  timer or configure other parameters.
  20:Core/Src/system_stm32f1xx.c ****   *                                     
  21:Core/Src/system_stm32f1xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  22:Core/Src/system_stm32f1xx.c ****   *                                 be called whenever the core clock is changed
  23:Core/Src/system_stm32f1xx.c ****   *                                 during program execution.
  24:Core/Src/system_stm32f1xx.c ****   *
  25:Core/Src/system_stm32f1xx.c ****   * 2. After each device reset the HSI (8 MHz) is used as system clock source.
  26:Core/Src/system_stm32f1xx.c ****   *    Then SystemInit() function is called, in "startup_stm32f1xx_xx.s" file, to
  27:Core/Src/system_stm32f1xx.c ****   *    configure the system clock before to branch to main program.
  28:Core/Src/system_stm32f1xx.c ****   *
  29:Core/Src/system_stm32f1xx.c ****   * 4. The default value of HSE crystal is set to 8 MHz (or 25 MHz, depending on
  30:Core/Src/system_stm32f1xx.c ****   *    the product used), refer to "HSE_VALUE". 
  31:Core/Src/system_stm32f1xx.c ****   *    When HSE is used as system clock source, directly or through PLL, and you
  32:Core/Src/system_stm32f1xx.c ****   *    are using different crystal you have to adapt the HSE value to your own
ARM GAS  /tmp/ccIATWzB.s 			page 2


  33:Core/Src/system_stm32f1xx.c ****   *    configuration.
  34:Core/Src/system_stm32f1xx.c ****   *        
  35:Core/Src/system_stm32f1xx.c ****   ******************************************************************************
  36:Core/Src/system_stm32f1xx.c ****   * @attention
  37:Core/Src/system_stm32f1xx.c ****   *
  38:Core/Src/system_stm32f1xx.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  39:Core/Src/system_stm32f1xx.c ****   *
  40:Core/Src/system_stm32f1xx.c ****   * Redistribution and use in source and binary forms, with or without modification,
  41:Core/Src/system_stm32f1xx.c ****   * are permitted provided that the following conditions are met:
  42:Core/Src/system_stm32f1xx.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  43:Core/Src/system_stm32f1xx.c ****   *      this list of conditions and the following disclaimer.
  44:Core/Src/system_stm32f1xx.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  45:Core/Src/system_stm32f1xx.c ****   *      this list of conditions and the following disclaimer in the documentation
  46:Core/Src/system_stm32f1xx.c ****   *      and/or other materials provided with the distribution.
  47:Core/Src/system_stm32f1xx.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  48:Core/Src/system_stm32f1xx.c ****   *      may be used to endorse or promote products derived from this software
  49:Core/Src/system_stm32f1xx.c ****   *      without specific prior written permission.
  50:Core/Src/system_stm32f1xx.c ****   *
  51:Core/Src/system_stm32f1xx.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  52:Core/Src/system_stm32f1xx.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  53:Core/Src/system_stm32f1xx.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  54:Core/Src/system_stm32f1xx.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  55:Core/Src/system_stm32f1xx.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  56:Core/Src/system_stm32f1xx.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  57:Core/Src/system_stm32f1xx.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  58:Core/Src/system_stm32f1xx.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  59:Core/Src/system_stm32f1xx.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  60:Core/Src/system_stm32f1xx.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  61:Core/Src/system_stm32f1xx.c ****   *
  62:Core/Src/system_stm32f1xx.c ****   ******************************************************************************
  63:Core/Src/system_stm32f1xx.c ****   */
  64:Core/Src/system_stm32f1xx.c **** 
  65:Core/Src/system_stm32f1xx.c **** /** @addtogroup CMSIS
  66:Core/Src/system_stm32f1xx.c ****   * @{
  67:Core/Src/system_stm32f1xx.c ****   */
  68:Core/Src/system_stm32f1xx.c **** 
  69:Core/Src/system_stm32f1xx.c **** /** @addtogroup stm32f1xx_system
  70:Core/Src/system_stm32f1xx.c ****   * @{
  71:Core/Src/system_stm32f1xx.c ****   */  
  72:Core/Src/system_stm32f1xx.c ****   
  73:Core/Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Includes
  74:Core/Src/system_stm32f1xx.c ****   * @{
  75:Core/Src/system_stm32f1xx.c ****   */
  76:Core/Src/system_stm32f1xx.c **** 
  77:Core/Src/system_stm32f1xx.c **** #include "stm32f1xx.h"
  78:Core/Src/system_stm32f1xx.c **** 
  79:Core/Src/system_stm32f1xx.c **** /**
  80:Core/Src/system_stm32f1xx.c ****   * @}
  81:Core/Src/system_stm32f1xx.c ****   */
  82:Core/Src/system_stm32f1xx.c **** 
  83:Core/Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_TypesDefinitions
  84:Core/Src/system_stm32f1xx.c ****   * @{
  85:Core/Src/system_stm32f1xx.c ****   */
  86:Core/Src/system_stm32f1xx.c **** 
  87:Core/Src/system_stm32f1xx.c **** /**
  88:Core/Src/system_stm32f1xx.c ****   * @}
  89:Core/Src/system_stm32f1xx.c ****   */
ARM GAS  /tmp/ccIATWzB.s 			page 3


  90:Core/Src/system_stm32f1xx.c **** 
  91:Core/Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Defines
  92:Core/Src/system_stm32f1xx.c ****   * @{
  93:Core/Src/system_stm32f1xx.c ****   */
  94:Core/Src/system_stm32f1xx.c **** 
  95:Core/Src/system_stm32f1xx.c **** #if !defined  (HSE_VALUE) 
  96:Core/Src/system_stm32f1xx.c ****   #define HSE_VALUE               8000000U /*!< Default value of the External oscillator in Hz.
  97:Core/Src/system_stm32f1xx.c ****                                                 This value can be provided and adapted by the user 
  98:Core/Src/system_stm32f1xx.c **** #endif /* HSE_VALUE */
  99:Core/Src/system_stm32f1xx.c **** 
 100:Core/Src/system_stm32f1xx.c **** #if !defined  (HSI_VALUE)
 101:Core/Src/system_stm32f1xx.c ****   #define HSI_VALUE               8000000U /*!< Default value of the Internal oscillator in Hz.
 102:Core/Src/system_stm32f1xx.c ****                                                 This value can be provided and adapted by the user 
 103:Core/Src/system_stm32f1xx.c **** #endif /* HSI_VALUE */
 104:Core/Src/system_stm32f1xx.c **** 
 105:Core/Src/system_stm32f1xx.c **** /*!< Uncomment the following line if you need to use external SRAM  */ 
 106:Core/Src/system_stm32f1xx.c **** #if defined(STM32F100xE) || defined(STM32F101xE) || defined(STM32F101xG) || defined(STM32F103xE) ||
 107:Core/Src/system_stm32f1xx.c **** /* #define DATA_IN_ExtSRAM */
 108:Core/Src/system_stm32f1xx.c **** #endif /* STM32F100xE || STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG */
 109:Core/Src/system_stm32f1xx.c **** 
 110:Core/Src/system_stm32f1xx.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
 111:Core/Src/system_stm32f1xx.c ****      Internal SRAM. */ 
 112:Core/Src/system_stm32f1xx.c **** /* #define VECT_TAB_SRAM */
 113:Core/Src/system_stm32f1xx.c **** #define VECT_TAB_OFFSET  0x00005000U /*!< Vector Table base offset field. 
 114:Core/Src/system_stm32f1xx.c ****                                   This value must be a multiple of 0x200. */
 115:Core/Src/system_stm32f1xx.c **** 
 116:Core/Src/system_stm32f1xx.c **** 
 117:Core/Src/system_stm32f1xx.c **** /**
 118:Core/Src/system_stm32f1xx.c ****   * @}
 119:Core/Src/system_stm32f1xx.c ****   */
 120:Core/Src/system_stm32f1xx.c **** 
 121:Core/Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Macros
 122:Core/Src/system_stm32f1xx.c ****   * @{
 123:Core/Src/system_stm32f1xx.c ****   */
 124:Core/Src/system_stm32f1xx.c **** 
 125:Core/Src/system_stm32f1xx.c **** /**
 126:Core/Src/system_stm32f1xx.c ****   * @}
 127:Core/Src/system_stm32f1xx.c ****   */
 128:Core/Src/system_stm32f1xx.c **** 
 129:Core/Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Variables
 130:Core/Src/system_stm32f1xx.c ****   * @{
 131:Core/Src/system_stm32f1xx.c ****   */
 132:Core/Src/system_stm32f1xx.c **** 
 133:Core/Src/system_stm32f1xx.c **** /*******************************************************************************
 134:Core/Src/system_stm32f1xx.c **** *  Clock Definitions
 135:Core/Src/system_stm32f1xx.c **** *******************************************************************************/
 136:Core/Src/system_stm32f1xx.c **** #if defined(STM32F100xB) ||defined(STM32F100xE)
 137:Core/Src/system_stm32f1xx.c ****   uint32_t SystemCoreClock         = 24000000U;        /*!< System Clock Frequency (Core Clock) */
 138:Core/Src/system_stm32f1xx.c **** #else /*!< HSI Selected as System Clock source */
 139:Core/Src/system_stm32f1xx.c ****   uint32_t SystemCoreClock         = 72000000U;        /*!< System Clock Frequency (Core Clock) */
 140:Core/Src/system_stm32f1xx.c **** #endif
 141:Core/Src/system_stm32f1xx.c **** 
 142:Core/Src/system_stm32f1xx.c **** const uint8_t AHBPrescTable[16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 143:Core/Src/system_stm32f1xx.c **** const uint8_t APBPrescTable[8U] =  {0, 0, 0, 0, 1, 2, 3, 4};
 144:Core/Src/system_stm32f1xx.c **** 
 145:Core/Src/system_stm32f1xx.c **** /**
 146:Core/Src/system_stm32f1xx.c ****   * @}
ARM GAS  /tmp/ccIATWzB.s 			page 4


 147:Core/Src/system_stm32f1xx.c ****   */
 148:Core/Src/system_stm32f1xx.c **** 
 149:Core/Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_FunctionPrototypes
 150:Core/Src/system_stm32f1xx.c ****   * @{
 151:Core/Src/system_stm32f1xx.c ****   */
 152:Core/Src/system_stm32f1xx.c **** 
 153:Core/Src/system_stm32f1xx.c **** #if defined(STM32F100xE) || defined(STM32F101xE) || defined(STM32F101xG) || defined(STM32F103xE) ||
 154:Core/Src/system_stm32f1xx.c **** #ifdef DATA_IN_ExtSRAM
 155:Core/Src/system_stm32f1xx.c ****   static void SystemInit_ExtMemCtl(void); 
 156:Core/Src/system_stm32f1xx.c **** #endif /* DATA_IN_ExtSRAM */
 157:Core/Src/system_stm32f1xx.c **** #endif /* STM32F100xE || STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG */
 158:Core/Src/system_stm32f1xx.c **** 
 159:Core/Src/system_stm32f1xx.c **** /**
 160:Core/Src/system_stm32f1xx.c ****   * @}
 161:Core/Src/system_stm32f1xx.c ****   */
 162:Core/Src/system_stm32f1xx.c **** 
 163:Core/Src/system_stm32f1xx.c **** /** @addtogroup STM32F1xx_System_Private_Functions
 164:Core/Src/system_stm32f1xx.c ****   * @{
 165:Core/Src/system_stm32f1xx.c ****   */
 166:Core/Src/system_stm32f1xx.c **** 
 167:Core/Src/system_stm32f1xx.c **** /**
 168:Core/Src/system_stm32f1xx.c ****   * @brief  Setup the microcontroller system
 169:Core/Src/system_stm32f1xx.c ****   *         Initialize the Embedded Flash Interface, the PLL and update the 
 170:Core/Src/system_stm32f1xx.c ****   *         SystemCoreClock variable.
 171:Core/Src/system_stm32f1xx.c ****   * @note   This function should be used only after reset.
 172:Core/Src/system_stm32f1xx.c ****   * @param  None
 173:Core/Src/system_stm32f1xx.c ****   * @retval None
 174:Core/Src/system_stm32f1xx.c ****   */
 175:Core/Src/system_stm32f1xx.c **** void SystemInit (void)
 176:Core/Src/system_stm32f1xx.c **** {
  27              		.loc 1 176 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 177:Core/Src/system_stm32f1xx.c ****   /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
 178:Core/Src/system_stm32f1xx.c ****   /* Set HSION bit */
 179:Core/Src/system_stm32f1xx.c ****   RCC->CR |= 0x00000001U;
  32              		.loc 1 179 0
  33 0000 0E4B     		ldr	r3, .L2
  34 0002 1A68     		ldr	r2, [r3]
  35 0004 42F00102 		orr	r2, r2, #1
  36 0008 1A60     		str	r2, [r3]
 180:Core/Src/system_stm32f1xx.c **** 
 181:Core/Src/system_stm32f1xx.c ****   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 182:Core/Src/system_stm32f1xx.c **** #if !defined(STM32F105xC) && !defined(STM32F107xC)
 183:Core/Src/system_stm32f1xx.c ****   RCC->CFGR &= 0xF8FF0000U;
  37              		.loc 1 183 0
  38 000a 5968     		ldr	r1, [r3, #4]
  39 000c 0C4A     		ldr	r2, .L2+4
  40 000e 0A40     		ands	r2, r2, r1
  41 0010 5A60     		str	r2, [r3, #4]
 184:Core/Src/system_stm32f1xx.c **** #else
 185:Core/Src/system_stm32f1xx.c ****   RCC->CFGR &= 0xF0FF0000U;
 186:Core/Src/system_stm32f1xx.c **** #endif /* STM32F105xC */   
 187:Core/Src/system_stm32f1xx.c ****   
 188:Core/Src/system_stm32f1xx.c ****   /* Reset HSEON, CSSON and PLLON bits */
ARM GAS  /tmp/ccIATWzB.s 			page 5


 189:Core/Src/system_stm32f1xx.c ****   RCC->CR &= 0xFEF6FFFFU;
  42              		.loc 1 189 0
  43 0012 1A68     		ldr	r2, [r3]
  44 0014 22F08472 		bic	r2, r2, #17301504
  45 0018 22F48032 		bic	r2, r2, #65536
  46 001c 1A60     		str	r2, [r3]
 190:Core/Src/system_stm32f1xx.c **** 
 191:Core/Src/system_stm32f1xx.c ****   /* Reset HSEBYP bit */
 192:Core/Src/system_stm32f1xx.c ****   RCC->CR &= 0xFFFBFFFFU;
  47              		.loc 1 192 0
  48 001e 1A68     		ldr	r2, [r3]
  49 0020 22F48022 		bic	r2, r2, #262144
  50 0024 1A60     		str	r2, [r3]
 193:Core/Src/system_stm32f1xx.c **** 
 194:Core/Src/system_stm32f1xx.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 195:Core/Src/system_stm32f1xx.c ****   RCC->CFGR &= 0xFF80FFFFU;
  51              		.loc 1 195 0
  52 0026 5A68     		ldr	r2, [r3, #4]
  53 0028 22F4FE02 		bic	r2, r2, #8323072
  54 002c 5A60     		str	r2, [r3, #4]
 196:Core/Src/system_stm32f1xx.c **** 
 197:Core/Src/system_stm32f1xx.c **** #if defined(STM32F105xC) || defined(STM32F107xC)
 198:Core/Src/system_stm32f1xx.c ****   /* Reset PLL2ON and PLL3ON bits */
 199:Core/Src/system_stm32f1xx.c ****   RCC->CR &= 0xEBFFFFFFU;
 200:Core/Src/system_stm32f1xx.c **** 
 201:Core/Src/system_stm32f1xx.c ****   /* Disable all interrupts and clear pending bits  */
 202:Core/Src/system_stm32f1xx.c ****   RCC->CIR = 0x00FF0000U;
 203:Core/Src/system_stm32f1xx.c **** 
 204:Core/Src/system_stm32f1xx.c ****   /* Reset CFGR2 register */
 205:Core/Src/system_stm32f1xx.c ****   RCC->CFGR2 = 0x00000000U;
 206:Core/Src/system_stm32f1xx.c **** #elif defined(STM32F100xB) || defined(STM32F100xE)
 207:Core/Src/system_stm32f1xx.c ****   /* Disable all interrupts and clear pending bits  */
 208:Core/Src/system_stm32f1xx.c ****   RCC->CIR = 0x009F0000U;
 209:Core/Src/system_stm32f1xx.c **** 
 210:Core/Src/system_stm32f1xx.c ****   /* Reset CFGR2 register */
 211:Core/Src/system_stm32f1xx.c ****   RCC->CFGR2 = 0x00000000U;      
 212:Core/Src/system_stm32f1xx.c **** #else
 213:Core/Src/system_stm32f1xx.c ****   /* Disable all interrupts and clear pending bits  */
 214:Core/Src/system_stm32f1xx.c ****   RCC->CIR = 0x009F0000U;
  55              		.loc 1 214 0
  56 002e 4FF41F02 		mov	r2, #10420224
  57 0032 9A60     		str	r2, [r3, #8]
 215:Core/Src/system_stm32f1xx.c **** #endif /* STM32F105xC */
 216:Core/Src/system_stm32f1xx.c ****     
 217:Core/Src/system_stm32f1xx.c **** #if defined(STM32F100xE) || defined(STM32F101xE) || defined(STM32F101xG) || defined(STM32F103xE) ||
 218:Core/Src/system_stm32f1xx.c ****   #ifdef DATA_IN_ExtSRAM
 219:Core/Src/system_stm32f1xx.c ****     SystemInit_ExtMemCtl(); 
 220:Core/Src/system_stm32f1xx.c ****   #endif /* DATA_IN_ExtSRAM */
 221:Core/Src/system_stm32f1xx.c **** #endif 
 222:Core/Src/system_stm32f1xx.c **** 
 223:Core/Src/system_stm32f1xx.c **** #ifdef VECT_TAB_SRAM
 224:Core/Src/system_stm32f1xx.c ****   SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 225:Core/Src/system_stm32f1xx.c **** #else
 226:Core/Src/system_stm32f1xx.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
  58              		.loc 1 226 0
  59 0034 034A     		ldr	r2, .L2+8
  60 0036 044B     		ldr	r3, .L2+12
ARM GAS  /tmp/ccIATWzB.s 			page 6


  61 0038 9A60     		str	r2, [r3, #8]
  62 003a 7047     		bx	lr
  63              	.L3:
  64              		.align	2
  65              	.L2:
  66 003c 00100240 		.word	1073876992
  67 0040 0000FFF8 		.word	-117506048
  68 0044 00500008 		.word	134238208
  69 0048 00ED00E0 		.word	-536810240
  70              		.cfi_endproc
  71              	.LFE63:
  73              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
  74              		.align	2
  75              		.global	SystemCoreClockUpdate
  76              		.thumb
  77              		.thumb_func
  79              	SystemCoreClockUpdate:
  80              	.LFB64:
 227:Core/Src/system_stm32f1xx.c **** #endif 
 228:Core/Src/system_stm32f1xx.c **** }
 229:Core/Src/system_stm32f1xx.c **** 
 230:Core/Src/system_stm32f1xx.c **** /**
 231:Core/Src/system_stm32f1xx.c ****   * @brief  Update SystemCoreClock variable according to Clock Register Values.
 232:Core/Src/system_stm32f1xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 233:Core/Src/system_stm32f1xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 234:Core/Src/system_stm32f1xx.c ****   *         other parameters.
 235:Core/Src/system_stm32f1xx.c ****   *           
 236:Core/Src/system_stm32f1xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 237:Core/Src/system_stm32f1xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 238:Core/Src/system_stm32f1xx.c ****   *         based on this variable will be incorrect.         
 239:Core/Src/system_stm32f1xx.c ****   *     
 240:Core/Src/system_stm32f1xx.c ****   * @note   - The system frequency computed by this function is not the real 
 241:Core/Src/system_stm32f1xx.c ****   *           frequency in the chip. It is calculated based on the predefined 
 242:Core/Src/system_stm32f1xx.c ****   *           constant and the selected clock source:
 243:Core/Src/system_stm32f1xx.c ****   *             
 244:Core/Src/system_stm32f1xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 245:Core/Src/system_stm32f1xx.c ****   *                                              
 246:Core/Src/system_stm32f1xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 247:Core/Src/system_stm32f1xx.c ****   *                          
 248:Core/Src/system_stm32f1xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
 249:Core/Src/system_stm32f1xx.c ****   *             or HSI_VALUE(*) multiplied by the PLL factors.
 250:Core/Src/system_stm32f1xx.c ****   *         
 251:Core/Src/system_stm32f1xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f1xx.h file (default value
 252:Core/Src/system_stm32f1xx.c ****   *             8 MHz) but the real value may vary depending on the variations
 253:Core/Src/system_stm32f1xx.c ****   *             in voltage and temperature.   
 254:Core/Src/system_stm32f1xx.c ****   *    
 255:Core/Src/system_stm32f1xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f1xx.h file (default value
 256:Core/Src/system_stm32f1xx.c ****   *              8 MHz or 25 MHz, depending on the product used), user has to ensure
 257:Core/Src/system_stm32f1xx.c ****   *              that HSE_VALUE is same as the real frequency of the crystal used.
 258:Core/Src/system_stm32f1xx.c ****   *              Otherwise, this function may have wrong result.
 259:Core/Src/system_stm32f1xx.c ****   *                
 260:Core/Src/system_stm32f1xx.c ****   *         - The result of this function could be not correct when using fractional
 261:Core/Src/system_stm32f1xx.c ****   *           value for HSE crystal.
 262:Core/Src/system_stm32f1xx.c ****   * @param  None
 263:Core/Src/system_stm32f1xx.c ****   * @retval None
 264:Core/Src/system_stm32f1xx.c ****   */
 265:Core/Src/system_stm32f1xx.c **** void SystemCoreClockUpdate (void)
ARM GAS  /tmp/ccIATWzB.s 			page 7


 266:Core/Src/system_stm32f1xx.c **** {
  81              		.loc 1 266 0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              		@ link register save eliminated.
  86              	.LVL0:
 267:Core/Src/system_stm32f1xx.c ****   uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 268:Core/Src/system_stm32f1xx.c **** 
 269:Core/Src/system_stm32f1xx.c **** #if defined(STM32F105xC) || defined(STM32F107xC)
 270:Core/Src/system_stm32f1xx.c ****   uint32_t prediv1source = 0U, prediv1factor = 0U, prediv2factor = 0U, pll2mull = 0U;
 271:Core/Src/system_stm32f1xx.c **** #endif /* STM32F105xC */
 272:Core/Src/system_stm32f1xx.c **** 
 273:Core/Src/system_stm32f1xx.c **** #if defined(STM32F100xB) || defined(STM32F100xE)
 274:Core/Src/system_stm32f1xx.c ****   uint32_t prediv1factor = 0U;
 275:Core/Src/system_stm32f1xx.c **** #endif /* STM32F100xB or STM32F100xE */
 276:Core/Src/system_stm32f1xx.c ****     
 277:Core/Src/system_stm32f1xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 278:Core/Src/system_stm32f1xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
  87              		.loc 1 278 0
  88 0000 1F4B     		ldr	r3, .L13
  89 0002 5B68     		ldr	r3, [r3, #4]
  90 0004 03F00C03 		and	r3, r3, #12
  91              	.LVL1:
 279:Core/Src/system_stm32f1xx.c ****   
 280:Core/Src/system_stm32f1xx.c ****   switch (tmp)
  92              		.loc 1 280 0
  93 0008 042B     		cmp	r3, #4
  94 000a 06D0     		beq	.L6
  95 000c 082B     		cmp	r3, #8
  96 000e 08D0     		beq	.L7
  97 0010 3BBB     		cbnz	r3, .L12
 281:Core/Src/system_stm32f1xx.c ****   {
 282:Core/Src/system_stm32f1xx.c ****     case 0x00U:  /* HSI used as system clock */
 283:Core/Src/system_stm32f1xx.c ****       SystemCoreClock = HSI_VALUE;
  98              		.loc 1 283 0
  99 0012 1C4A     		ldr	r2, .L13+4
 100 0014 1C4B     		ldr	r3, .L13+8
 101              	.LVL2:
 102 0016 1A60     		str	r2, [r3]
 284:Core/Src/system_stm32f1xx.c ****       break;
 103              		.loc 1 284 0
 104 0018 26E0     		b	.L9
 105              	.LVL3:
 106              	.L6:
 285:Core/Src/system_stm32f1xx.c ****     case 0x04U:  /* HSE used as system clock */
 286:Core/Src/system_stm32f1xx.c ****       SystemCoreClock = HSE_VALUE;
 107              		.loc 1 286 0
 108 001a 1A4A     		ldr	r2, .L13+4
 109 001c 1A4B     		ldr	r3, .L13+8
 110              	.LVL4:
 111 001e 1A60     		str	r2, [r3]
 287:Core/Src/system_stm32f1xx.c ****       break;
 112              		.loc 1 287 0
 113 0020 22E0     		b	.L9
 114              	.LVL5:
 115              	.L7:
ARM GAS  /tmp/ccIATWzB.s 			page 8


 288:Core/Src/system_stm32f1xx.c ****     case 0x08U:  /* PLL used as system clock */
 289:Core/Src/system_stm32f1xx.c **** 
 290:Core/Src/system_stm32f1xx.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 291:Core/Src/system_stm32f1xx.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 116              		.loc 1 291 0
 117 0022 174A     		ldr	r2, .L13
 118 0024 5368     		ldr	r3, [r2, #4]
 119              	.LVL6:
 292:Core/Src/system_stm32f1xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 120              		.loc 1 292 0
 121 0026 5268     		ldr	r2, [r2, #4]
 122              	.LVL7:
 293:Core/Src/system_stm32f1xx.c ****       
 294:Core/Src/system_stm32f1xx.c **** #if !defined(STM32F105xC) && !defined(STM32F107xC)      
 295:Core/Src/system_stm32f1xx.c ****       pllmull = ( pllmull >> 18U) + 2U;
 123              		.loc 1 295 0
 124 0028 C3F38343 		ubfx	r3, r3, #18, #4
 125              	.LVL8:
 126 002c 0233     		adds	r3, r3, #2
 127              	.LVL9:
 296:Core/Src/system_stm32f1xx.c ****       
 297:Core/Src/system_stm32f1xx.c ****       if (pllsource == 0x00U)
 128              		.loc 1 297 0
 129 002e 12F4803F 		tst	r2, #65536
 130 0032 05D1     		bne	.L10
 298:Core/Src/system_stm32f1xx.c ****       {
 299:Core/Src/system_stm32f1xx.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 300:Core/Src/system_stm32f1xx.c ****         SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 131              		.loc 1 300 0
 132 0034 154A     		ldr	r2, .L13+12
 133              	.LVL10:
 134 0036 02FB03F3 		mul	r3, r2, r3
 135              	.LVL11:
 136 003a 134A     		ldr	r2, .L13+8
 137 003c 1360     		str	r3, [r2]
 138 003e 13E0     		b	.L9
 139              	.LVL12:
 140              	.L10:
 301:Core/Src/system_stm32f1xx.c ****       }
 302:Core/Src/system_stm32f1xx.c ****       else
 303:Core/Src/system_stm32f1xx.c ****       {
 304:Core/Src/system_stm32f1xx.c ****  #if defined(STM32F100xB) || defined(STM32F100xE)
 305:Core/Src/system_stm32f1xx.c ****        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 306:Core/Src/system_stm32f1xx.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 307:Core/Src/system_stm32f1xx.c ****        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 308:Core/Src/system_stm32f1xx.c ****  #else
 309:Core/Src/system_stm32f1xx.c ****         /* HSE selected as PLL clock entry */
 310:Core/Src/system_stm32f1xx.c ****         if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 141              		.loc 1 310 0
 142 0040 0F4A     		ldr	r2, .L13
 143              	.LVL13:
 144 0042 5268     		ldr	r2, [r2, #4]
 145 0044 12F4003F 		tst	r2, #131072
 146 0048 05D0     		beq	.L11
 311:Core/Src/system_stm32f1xx.c ****         {/* HSE oscillator clock divided by 2 */
 312:Core/Src/system_stm32f1xx.c ****           SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 147              		.loc 1 312 0
ARM GAS  /tmp/ccIATWzB.s 			page 9


 148 004a 104A     		ldr	r2, .L13+12
 149 004c 02FB03F3 		mul	r3, r2, r3
 150              	.LVL14:
 151 0050 0D4A     		ldr	r2, .L13+8
 152 0052 1360     		str	r3, [r2]
 153 0054 08E0     		b	.L9
 154              	.LVL15:
 155              	.L11:
 313:Core/Src/system_stm32f1xx.c ****         }
 314:Core/Src/system_stm32f1xx.c ****         else
 315:Core/Src/system_stm32f1xx.c ****         {
 316:Core/Src/system_stm32f1xx.c ****           SystemCoreClock = HSE_VALUE * pllmull;
 156              		.loc 1 316 0
 157 0056 0B4A     		ldr	r2, .L13+4
 158 0058 02FB03F3 		mul	r3, r2, r3
 159              	.LVL16:
 160 005c 0A4A     		ldr	r2, .L13+8
 161 005e 1360     		str	r3, [r2]
 162 0060 02E0     		b	.L9
 163              	.LVL17:
 164              	.L12:
 317:Core/Src/system_stm32f1xx.c ****         }
 318:Core/Src/system_stm32f1xx.c ****  #endif
 319:Core/Src/system_stm32f1xx.c ****       }
 320:Core/Src/system_stm32f1xx.c **** #else
 321:Core/Src/system_stm32f1xx.c ****       pllmull = pllmull >> 18U;
 322:Core/Src/system_stm32f1xx.c ****       
 323:Core/Src/system_stm32f1xx.c ****       if (pllmull != 0x0DU)
 324:Core/Src/system_stm32f1xx.c ****       {
 325:Core/Src/system_stm32f1xx.c ****          pllmull += 2U;
 326:Core/Src/system_stm32f1xx.c ****       }
 327:Core/Src/system_stm32f1xx.c ****       else
 328:Core/Src/system_stm32f1xx.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 329:Core/Src/system_stm32f1xx.c ****         pllmull = 13U / 2U; 
 330:Core/Src/system_stm32f1xx.c ****       }
 331:Core/Src/system_stm32f1xx.c ****             
 332:Core/Src/system_stm32f1xx.c ****       if (pllsource == 0x00U)
 333:Core/Src/system_stm32f1xx.c ****       {
 334:Core/Src/system_stm32f1xx.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 335:Core/Src/system_stm32f1xx.c ****         SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 336:Core/Src/system_stm32f1xx.c ****       }
 337:Core/Src/system_stm32f1xx.c ****       else
 338:Core/Src/system_stm32f1xx.c ****       {/* PREDIV1 selected as PLL clock entry */
 339:Core/Src/system_stm32f1xx.c ****         
 340:Core/Src/system_stm32f1xx.c ****         /* Get PREDIV1 clock source and division factor */
 341:Core/Src/system_stm32f1xx.c ****         prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
 342:Core/Src/system_stm32f1xx.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 343:Core/Src/system_stm32f1xx.c ****         
 344:Core/Src/system_stm32f1xx.c ****         if (prediv1source == 0U)
 345:Core/Src/system_stm32f1xx.c ****         { 
 346:Core/Src/system_stm32f1xx.c ****           /* HSE oscillator clock selected as PREDIV1 clock entry */
 347:Core/Src/system_stm32f1xx.c ****           SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;          
 348:Core/Src/system_stm32f1xx.c ****         }
 349:Core/Src/system_stm32f1xx.c ****         else
 350:Core/Src/system_stm32f1xx.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 351:Core/Src/system_stm32f1xx.c ****           
 352:Core/Src/system_stm32f1xx.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
ARM GAS  /tmp/ccIATWzB.s 			page 10


 353:Core/Src/system_stm32f1xx.c ****           prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4U) + 1U;
 354:Core/Src/system_stm32f1xx.c ****           pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
 355:Core/Src/system_stm32f1xx.c ****           SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;  
 356:Core/Src/system_stm32f1xx.c ****         }
 357:Core/Src/system_stm32f1xx.c ****       }
 358:Core/Src/system_stm32f1xx.c **** #endif /* STM32F105xC */ 
 359:Core/Src/system_stm32f1xx.c ****       break;
 360:Core/Src/system_stm32f1xx.c **** 
 361:Core/Src/system_stm32f1xx.c ****     default:
 362:Core/Src/system_stm32f1xx.c ****       SystemCoreClock = HSI_VALUE;
 165              		.loc 1 362 0
 166 0062 084A     		ldr	r2, .L13+4
 167 0064 084B     		ldr	r3, .L13+8
 168              	.LVL18:
 169 0066 1A60     		str	r2, [r3]
 170              	.LVL19:
 171              	.L9:
 363:Core/Src/system_stm32f1xx.c ****       break;
 364:Core/Src/system_stm32f1xx.c ****   }
 365:Core/Src/system_stm32f1xx.c ****   
 366:Core/Src/system_stm32f1xx.c ****   /* Compute HCLK clock frequency ----------------*/
 367:Core/Src/system_stm32f1xx.c ****   /* Get HCLK prescaler */
 368:Core/Src/system_stm32f1xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 172              		.loc 1 368 0
 173 0068 054B     		ldr	r3, .L13
 174 006a 5B68     		ldr	r3, [r3, #4]
 175 006c C3F30313 		ubfx	r3, r3, #4, #4
 176 0070 074A     		ldr	r2, .L13+16
 177 0072 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 178              	.LVL20:
 369:Core/Src/system_stm32f1xx.c ****   /* HCLK clock frequency */
 370:Core/Src/system_stm32f1xx.c ****   SystemCoreClock >>= tmp;  
 179              		.loc 1 370 0
 180 0074 044A     		ldr	r2, .L13+8
 181 0076 1368     		ldr	r3, [r2]
 182 0078 CB40     		lsrs	r3, r3, r1
 183 007a 1360     		str	r3, [r2]
 184 007c 7047     		bx	lr
 185              	.L14:
 186 007e 00BF     		.align	2
 187              	.L13:
 188 0080 00100240 		.word	1073876992
 189 0084 00127A00 		.word	8000000
 190 0088 00000000 		.word	.LANCHOR0
 191 008c 00093D00 		.word	4000000
 192 0090 00000000 		.word	.LANCHOR1
 193              		.cfi_endproc
 194              	.LFE64:
 196              		.global	APBPrescTable
 197              		.global	AHBPrescTable
 198              		.global	SystemCoreClock
 199              		.section	.rodata.AHBPrescTable,"a",%progbits
 200              		.align	2
 201              		.set	.LANCHOR1,. + 0
 204              	AHBPrescTable:
 205 0000 00       		.byte	0
 206 0001 00       		.byte	0
ARM GAS  /tmp/ccIATWzB.s 			page 11


 207 0002 00       		.byte	0
 208 0003 00       		.byte	0
 209 0004 00       		.byte	0
 210 0005 00       		.byte	0
 211 0006 00       		.byte	0
 212 0007 00       		.byte	0
 213 0008 01       		.byte	1
 214 0009 02       		.byte	2
 215 000a 03       		.byte	3
 216 000b 04       		.byte	4
 217 000c 06       		.byte	6
 218 000d 07       		.byte	7
 219 000e 08       		.byte	8
 220 000f 09       		.byte	9
 221              		.section	.rodata.APBPrescTable,"a",%progbits
 222              		.align	2
 225              	APBPrescTable:
 226 0000 00       		.byte	0
 227 0001 00       		.byte	0
 228 0002 00       		.byte	0
 229 0003 00       		.byte	0
 230 0004 01       		.byte	1
 231 0005 02       		.byte	2
 232 0006 03       		.byte	3
 233 0007 04       		.byte	4
 234              		.section	.data.SystemCoreClock,"aw",%progbits
 235              		.align	2
 236              		.set	.LANCHOR0,. + 0
 239              	SystemCoreClock:
 240 0000 00A24A04 		.word	72000000
 241              		.text
 242              	.Letext0:
 243              		.file 2 "/opt/gcc-arm-none-eabi-4_9-2015q3/arm-none-eabi/include/machine/_default_types.h"
 244              		.file 3 "/opt/gcc-arm-none-eabi-4_9-2015q3/arm-none-eabi/include/sys/_stdint.h"
 245              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 246              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 247              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
ARM GAS  /tmp/ccIATWzB.s 			page 12


DEFINED SYMBOLS
                            *ABS*:00000000 system_stm32f1xx.c
     /tmp/ccIATWzB.s:19     .text.SystemInit:00000000 $t
     /tmp/ccIATWzB.s:24     .text.SystemInit:00000000 SystemInit
     /tmp/ccIATWzB.s:66     .text.SystemInit:0000003c $d
     /tmp/ccIATWzB.s:74     .text.SystemCoreClockUpdate:00000000 $t
     /tmp/ccIATWzB.s:79     .text.SystemCoreClockUpdate:00000000 SystemCoreClockUpdate
     /tmp/ccIATWzB.s:188    .text.SystemCoreClockUpdate:00000080 $d
     /tmp/ccIATWzB.s:225    .rodata.APBPrescTable:00000000 APBPrescTable
     /tmp/ccIATWzB.s:204    .rodata.AHBPrescTable:00000000 AHBPrescTable
     /tmp/ccIATWzB.s:239    .data.SystemCoreClock:00000000 SystemCoreClock
     /tmp/ccIATWzB.s:200    .rodata.AHBPrescTable:00000000 $d
     /tmp/ccIATWzB.s:222    .rodata.APBPrescTable:00000000 $d
     /tmp/ccIATWzB.s:235    .data.SystemCoreClock:00000000 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
