ARM GAS  /tmp/cc27mv2X.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"spi.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.SPI_Flash_SendByte,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  23              	SPI_Flash_SendByte:
  24              	.LFB76:
  25              		.file 1 "Core/Src/spi.c"
   1:Core/Src/spi.c **** /**
   2:Core/Src/spi.c ****   ******************************************************************************
   3:Core/Src/spi.c ****   * File Name          : SPI.c
   4:Core/Src/spi.c ****   * Description        : This file provides code for the configuration
   5:Core/Src/spi.c ****   *                      of the SPI instances.
   6:Core/Src/spi.c ****   ******************************************************************************
   7:Core/Src/spi.c ****   * This notice applies to any and all portions of this file
   8:Core/Src/spi.c ****   * that are not between comment pairs USER CODE BEGIN and
   9:Core/Src/spi.c ****   * USER CODE END. Other portions of this file, whether 
  10:Core/Src/spi.c ****   * inserted by the user or by software development tools
  11:Core/Src/spi.c ****   * are owned by their respective copyright owners.
  12:Core/Src/spi.c ****   *
  13:Core/Src/spi.c ****   * Copyright (c) 2018 STMicroelectronics International N.V. 
  14:Core/Src/spi.c ****   * All rights reserved.
  15:Core/Src/spi.c ****   *
  16:Core/Src/spi.c ****   * Redistribution and use in source and binary forms, with or without 
  17:Core/Src/spi.c ****   * modification, are permitted, provided that the following conditions are met:
  18:Core/Src/spi.c ****   *
  19:Core/Src/spi.c ****   * 1. Redistribution of source code must retain the above copyright notice, 
  20:Core/Src/spi.c ****   *    this list of conditions and the following disclaimer.
  21:Core/Src/spi.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Core/Src/spi.c ****   *    this list of conditions and the following disclaimer in the documentation
  23:Core/Src/spi.c ****   *    and/or other materials provided with the distribution.
  24:Core/Src/spi.c ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  25:Core/Src/spi.c ****   *    contributors to this software may be used to endorse or promote products 
  26:Core/Src/spi.c ****   *    derived from this software without specific written permission.
  27:Core/Src/spi.c ****   * 4. This software, including modifications and/or derivative works of this 
  28:Core/Src/spi.c ****   *    software, must execute solely and exclusively on microcontroller or
  29:Core/Src/spi.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Core/Src/spi.c ****   * 5. Redistribution and use of this software other than as permitted under 
  31:Core/Src/spi.c ****   *    this license is void and will automatically terminate your rights under 
  32:Core/Src/spi.c ****   *    this license. 
  33:Core/Src/spi.c ****   *
ARM GAS  /tmp/cc27mv2X.s 			page 2


  34:Core/Src/spi.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  35:Core/Src/spi.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  36:Core/Src/spi.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  37:Core/Src/spi.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Core/Src/spi.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  39:Core/Src/spi.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Core/Src/spi.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Core/Src/spi.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  42:Core/Src/spi.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  43:Core/Src/spi.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  44:Core/Src/spi.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Core/Src/spi.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Core/Src/spi.c ****   *
  47:Core/Src/spi.c ****   ******************************************************************************
  48:Core/Src/spi.c ****   */
  49:Core/Src/spi.c **** 
  50:Core/Src/spi.c **** /* Includes ------------------------------------------------------------------*/
  51:Core/Src/spi.c **** #include "spi.h"
  52:Core/Src/spi.c **** 
  53:Core/Src/spi.c **** /* USER CODE BEGIN 0 */
  54:Core/Src/spi.c **** #include <string.h>
  55:Core/Src/spi.c **** #include "usart.h"
  56:Core/Src/spi.c **** 
  57:Core/Src/spi.c **** static void wen(void);
  58:Core/Src/spi.c **** static void wdis(void);
  59:Core/Src/spi.c **** static void wsr(void);
  60:Core/Src/spi.c **** static void wip(void);
  61:Core/Src/spi.c **** static unsigned char rdsr(void);
  62:Core/Src/spi.c **** static void sect_clr(unsigned long a1);
  63:Core/Src/spi.c **** static uint8_t SPI_Flash_ReadByte(void);
  64:Core/Src/spi.c **** static uint8_t SPI_Flash_SendByte(uint8_t byte);
  65:Core/Src/spi.c **** static void sst_wr_block(uint32_t addr, uint8_t *readbuff, uint16_t BlockSize);
  66:Core/Src/spi.c **** static void sst_rd_block(unsigned long addr, unsigned char *readbuff, unsigned int BlockSize);
  67:Core/Src/spi.c **** 
  68:Core/Src/spi.c **** static uint8_t txBuf[20] = "SPI SST25 Demo";
  69:Core/Src/spi.c **** static uint8_t sstBuf[20] = {0};
  70:Core/Src/spi.c **** static uint8_t debugStr[40] = {0};
  71:Core/Src/spi.c **** /* USER CODE END 0 */
  72:Core/Src/spi.c **** 
  73:Core/Src/spi.c **** SPI_HandleTypeDef hspi1;
  74:Core/Src/spi.c **** 
  75:Core/Src/spi.c **** /* SPI1 init function */
  76:Core/Src/spi.c **** void MX_SPI1_Init(void)
  77:Core/Src/spi.c **** {
  78:Core/Src/spi.c **** 
  79:Core/Src/spi.c ****   hspi1.Instance = SPI1;
  80:Core/Src/spi.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
  81:Core/Src/spi.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  82:Core/Src/spi.c ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  83:Core/Src/spi.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
  84:Core/Src/spi.c ****   hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
  85:Core/Src/spi.c ****   hspi1.Init.NSS = SPI_NSS_SOFT;
  86:Core/Src/spi.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  87:Core/Src/spi.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  88:Core/Src/spi.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  89:Core/Src/spi.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  90:Core/Src/spi.c ****   hspi1.Init.CRCPolynomial = 7;
ARM GAS  /tmp/cc27mv2X.s 			page 3


  91:Core/Src/spi.c ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
  92:Core/Src/spi.c ****   {
  93:Core/Src/spi.c ****     Error_Handler();
  94:Core/Src/spi.c ****   }
  95:Core/Src/spi.c **** 
  96:Core/Src/spi.c **** }
  97:Core/Src/spi.c **** 
  98:Core/Src/spi.c **** void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
  99:Core/Src/spi.c **** {
 100:Core/Src/spi.c **** 
 101:Core/Src/spi.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 102:Core/Src/spi.c ****   if(spiHandle->Instance==SPI1)
 103:Core/Src/spi.c ****   {
 104:Core/Src/spi.c ****   /* USER CODE BEGIN SPI1_MspInit 0 */
 105:Core/Src/spi.c **** 
 106:Core/Src/spi.c ****   /* USER CODE END SPI1_MspInit 0 */
 107:Core/Src/spi.c ****     /* SPI1 clock enable */
 108:Core/Src/spi.c ****     __HAL_RCC_SPI1_CLK_ENABLE();
 109:Core/Src/spi.c ****   
 110:Core/Src/spi.c ****     __HAL_RCC_GPIOA_CLK_ENABLE();
 111:Core/Src/spi.c ****     /**SPI1 GPIO Configuration    
 112:Core/Src/spi.c ****     PA4     ------> SPI1_NSS
 113:Core/Src/spi.c ****     PA5     ------> SPI1_SCK
 114:Core/Src/spi.c ****     PA6     ------> SPI1_MISO
 115:Core/Src/spi.c ****     PA7     ------> SPI1_MOSI 
 116:Core/Src/spi.c ****     */
 117:Core/Src/spi.c ****     GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 118:Core/Src/spi.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 119:Core/Src/spi.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 120:Core/Src/spi.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 121:Core/Src/spi.c **** 
 122:Core/Src/spi.c ****     GPIO_InitStruct.Pin = GPIO_PIN_6;
 123:Core/Src/spi.c ****     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 124:Core/Src/spi.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 125:Core/Src/spi.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 126:Core/Src/spi.c **** 
 127:Core/Src/spi.c ****   /* USER CODE BEGIN SPI1_MspInit 1 */
 128:Core/Src/spi.c **** 
 129:Core/Src/spi.c ****   /* USER CODE END SPI1_MspInit 1 */
 130:Core/Src/spi.c ****   }
 131:Core/Src/spi.c **** }
 132:Core/Src/spi.c **** 
 133:Core/Src/spi.c **** void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
 134:Core/Src/spi.c **** {
 135:Core/Src/spi.c **** 
 136:Core/Src/spi.c ****   if(spiHandle->Instance==SPI1)
 137:Core/Src/spi.c ****   {
 138:Core/Src/spi.c ****   /* USER CODE BEGIN SPI1_MspDeInit 0 */
 139:Core/Src/spi.c **** 
 140:Core/Src/spi.c ****   /* USER CODE END SPI1_MspDeInit 0 */
 141:Core/Src/spi.c ****     /* Peripheral clock disable */
 142:Core/Src/spi.c ****     __HAL_RCC_SPI1_CLK_DISABLE();
 143:Core/Src/spi.c ****   
 144:Core/Src/spi.c ****     /**SPI1 GPIO Configuration    
 145:Core/Src/spi.c ****     PA4     ------> SPI1_NSS
 146:Core/Src/spi.c ****     PA5     ------> SPI1_SCK
 147:Core/Src/spi.c ****     PA6     ------> SPI1_MISO
ARM GAS  /tmp/cc27mv2X.s 			page 4


 148:Core/Src/spi.c ****     PA7     ------> SPI1_MOSI 
 149:Core/Src/spi.c ****     */
 150:Core/Src/spi.c ****     HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 151:Core/Src/spi.c **** 
 152:Core/Src/spi.c ****   /* USER CODE BEGIN SPI1_MspDeInit 1 */
 153:Core/Src/spi.c **** 
 154:Core/Src/spi.c ****   /* USER CODE END SPI1_MspDeInit 1 */
 155:Core/Src/spi.c ****   }
 156:Core/Src/spi.c **** } 
 157:Core/Src/spi.c **** 
 158:Core/Src/spi.c **** /* USER CODE BEGIN 1 */
 159:Core/Src/spi.c **** void EEPROM_Test(void)
 160:Core/Src/spi.c **** {
 161:Core/Src/spi.c ****   uint16_t i, len;
 162:Core/Src/spi.c ****   len = strlen((char *)txBuf);
 163:Core/Src/spi.c ****   for (i=0;i<len;i++)
 164:Core/Src/spi.c ****     sstBuf[i] = txBuf[i];
 165:Core/Src/spi.c ****   sstBuf[i] = '\0';
 166:Core/Src/spi.c ****   snprintf((char *)debugStr, 40, "txBuf is %s", txBuf);
 167:Core/Src/spi.c ****   tftprintf(debugStr);
 168:Core/Src/spi.c ****   memset((char *)debugStr, 0, 40);
 169:Core/Src/spi.c **** 
 170:Core/Src/spi.c ****   snprintf((char *)debugStr, 40, "sstBuf p is %s", sstBuf);
 171:Core/Src/spi.c ****   tftprintf(debugStr);
 172:Core/Src/spi.c ****   memset((char *)debugStr, 0, 40);
 173:Core/Src/spi.c ****   sst_wr_block(0, sstBuf, 20);
 174:Core/Src/spi.c ****   HAL_Delay(1000);
 175:Core/Src/spi.c ****   sst_rd_block(0, sstBuf, 20);
 176:Core/Src/spi.c **** 
 177:Core/Src/spi.c ****   snprintf((char *)debugStr, 40, "sstBuf a is %s", sstBuf);
 178:Core/Src/spi.c ****   tftprintf(debugStr);
 179:Core/Src/spi.c ****   uint16_t a=0;
 180:Core/Src/spi.c ****   for(i=0; i<len;i++){
 181:Core/Src/spi.c ****    if(sstBuf[i]==txBuf[i]) a=1;     //读出的数据和测试数据进行比较， 以判别是否
 182:Core/Src/spi.c ****    else {a=0; i=len;}
 183:Core/Src/spi.c ****   }
 184:Core/Src/spi.c ****   if(a==1) {
 185:Core/Src/spi.c ****     HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 186:Core/Src/spi.c ****     tftprintf(sstBuf);   //将读出的数据通过串口输出  
 187:Core/Src/spi.c ****   } else {
 188:Core/Src/spi.c ****     tftprintf((uint8_t *)"sst test failed");
 189:Core/Src/spi.c ****   }
 190:Core/Src/spi.c **** }
 191:Core/Src/spi.c **** 
 192:Core/Src/spi.c **** /****************************************************************************
 193:Core/Src/spi.c **** * 名    称：void wen(void)
 194:Core/Src/spi.c **** * 功    能：写使能
 195:Core/Src/spi.c **** * 入口参数：无
 196:Core/Src/spi.c **** * 出口参数：无
 197:Core/Src/spi.c **** * 说    明：
 198:Core/Src/spi.c **** * 调用方法：无 
 199:Core/Src/spi.c **** ****************************************************************************/ 
 200:Core/Src/spi.c **** static void wen(void){
 201:Core/Src/spi.c ****   Select_Flash();
 202:Core/Src/spi.c ****   SPI_Flash_SendByte(0x06);
 203:Core/Src/spi.c ****   NotSelect_Flash();
 204:Core/Src/spi.c **** }
ARM GAS  /tmp/cc27mv2X.s 			page 5


 205:Core/Src/spi.c **** 
 206:Core/Src/spi.c **** /****************************************************************************
 207:Core/Src/spi.c **** * 名    称：void wdis(void)
 208:Core/Src/spi.c **** * 功    能：写禁止
 209:Core/Src/spi.c **** * 入口参数：无
 210:Core/Src/spi.c **** * 出口参数：无
 211:Core/Src/spi.c **** * 说    明：
 212:Core/Src/spi.c **** * 调用方法：无 
 213:Core/Src/spi.c **** ****************************************************************************/ 
 214:Core/Src/spi.c **** static void wdis(void){
 215:Core/Src/spi.c **** 
 216:Core/Src/spi.c ****   Select_Flash();
 217:Core/Src/spi.c ****   SPI_Flash_SendByte(0x04); 
 218:Core/Src/spi.c ****   NotSelect_Flash();
 219:Core/Src/spi.c ****   wip();
 220:Core/Src/spi.c ****   
 221:Core/Src/spi.c **** } 
 222:Core/Src/spi.c **** /****************************************************************************
 223:Core/Src/spi.c **** * 名    称：void wsr(void)
 224:Core/Src/spi.c **** * 功    能：写状态
 225:Core/Src/spi.c **** * 入口参数：无
 226:Core/Src/spi.c **** * 出口参数：无
 227:Core/Src/spi.c **** * 说    明：
 228:Core/Src/spi.c **** * 调用方法：无 
 229:Core/Src/spi.c **** ****************************************************************************/ 
 230:Core/Src/spi.c **** static void wsr(void){ 
 231:Core/Src/spi.c ****   Select_Flash();
 232:Core/Src/spi.c ****   SPI_Flash_SendByte(0x50);
 233:Core/Src/spi.c ****   NotSelect_Flash(); 
 234:Core/Src/spi.c ****   Select_Flash();
 235:Core/Src/spi.c ****   SPI_Flash_SendByte(0x01);
 236:Core/Src/spi.c ****   SPI_Flash_SendByte(0x00); 
 237:Core/Src/spi.c ****   NotSelect_Flash();
 238:Core/Src/spi.c ****     wip();
 239:Core/Src/spi.c **** }
 240:Core/Src/spi.c **** 
 241:Core/Src/spi.c **** /****************************************************************************
 242:Core/Src/spi.c **** * 名    称：void wip(void)
 243:Core/Src/spi.c **** * 功    能：忙检测
 244:Core/Src/spi.c **** * 入口参数：无
 245:Core/Src/spi.c **** * 出口参数：无
 246:Core/Src/spi.c **** * 说    明：
 247:Core/Src/spi.c **** * 调用方法：无 
 248:Core/Src/spi.c **** ****************************************************************************/ 
 249:Core/Src/spi.c **** static void wip(void){
 250:Core/Src/spi.c ****   unsigned char a=1;
 251:Core/Src/spi.c ****   while((a&0x01)==1) a=rdsr();  
 252:Core/Src/spi.c **** 
 253:Core/Src/spi.c **** }
 254:Core/Src/spi.c **** /****************************************************************************
 255:Core/Src/spi.c **** * 名    称：unsigned char rdsr(void)
 256:Core/Src/spi.c **** * 功    能：读状态寄存器
 257:Core/Src/spi.c **** * 入口参数：无
 258:Core/Src/spi.c **** * 出口参数：无
 259:Core/Src/spi.c **** * 说    明：
 260:Core/Src/spi.c **** * 调用方法：无 
 261:Core/Src/spi.c **** ****************************************************************************/ 
ARM GAS  /tmp/cc27mv2X.s 			page 6


 262:Core/Src/spi.c **** static unsigned char rdsr(void){
 263:Core/Src/spi.c ****   unsigned char busy;
 264:Core/Src/spi.c ****   Select_Flash();
 265:Core/Src/spi.c ****   SPI_Flash_SendByte(0x05);
 266:Core/Src/spi.c ****   busy = SPI_Flash_ReadByte();
 267:Core/Src/spi.c ****   NotSelect_Flash();
 268:Core/Src/spi.c ****   return(busy);
 269:Core/Src/spi.c ****   
 270:Core/Src/spi.c **** }
 271:Core/Src/spi.c **** 
 272:Core/Src/spi.c **** /****************************************************************************
 273:Core/Src/spi.c **** * 名    称：void SST25_W_BLOCK(uint32_t addr, uint8_t *readbuff, uint16_t BlockSize)
 274:Core/Src/spi.c **** * 功    能：页写
 275:Core/Src/spi.c **** * 入口参数：uint32_t addr--页   uint8_t *readbuff--数组   uint16_t BlockSize--长度    
 276:Core/Src/spi.c **** * 出口参数：无
 277:Core/Src/spi.c **** * 说    明：
 278:Core/Src/spi.c **** * 调用方法：无 
 279:Core/Src/spi.c **** ****************************************************************************/  
 280:Core/Src/spi.c **** static void sst_wr_block(uint32_t addr, uint8_t *readbuff, uint16_t BlockSize){
 281:Core/Src/spi.c ****   unsigned int i=0,a2;
 282:Core/Src/spi.c ****   sect_clr(addr);                     //删除页     
 283:Core/Src/spi.c ****   wsr();
 284:Core/Src/spi.c ****     wen();  
 285:Core/Src/spi.c ****   Select_Flash();    
 286:Core/Src/spi.c ****   SPI_Flash_SendByte(0xad);
 287:Core/Src/spi.c ****   SPI_Flash_SendByte((addr&0xffffff)>>16);
 288:Core/Src/spi.c ****   SPI_Flash_SendByte((addr&0xffff)>>8);
 289:Core/Src/spi.c ****   SPI_Flash_SendByte(addr&0xff);
 290:Core/Src/spi.c ****   SPI_Flash_SendByte(readbuff[0]);
 291:Core/Src/spi.c ****   SPI_Flash_SendByte(readbuff[1]);
 292:Core/Src/spi.c ****   NotSelect_Flash();
 293:Core/Src/spi.c ****   i=2;
 294:Core/Src/spi.c ****   while(i<BlockSize){
 295:Core/Src/spi.c ****     a2=120;
 296:Core/Src/spi.c ****     while(a2>0) a2--;
 297:Core/Src/spi.c ****     Select_Flash();
 298:Core/Src/spi.c ****     SPI_Flash_SendByte(0xad);
 299:Core/Src/spi.c ****     SPI_Flash_SendByte(readbuff[i++]);
 300:Core/Src/spi.c ****     SPI_Flash_SendByte(readbuff[i++]);
 301:Core/Src/spi.c ****     NotSelect_Flash();
 302:Core/Src/spi.c ****   }
 303:Core/Src/spi.c ****   
 304:Core/Src/spi.c ****   a2=100;
 305:Core/Src/spi.c ****   while(a2>0) a2--;
 306:Core/Src/spi.c ****   wdis(); 
 307:Core/Src/spi.c ****   Select_Flash(); 
 308:Core/Src/spi.c ****   wip();
 309:Core/Src/spi.c **** }
 310:Core/Src/spi.c **** 
 311:Core/Src/spi.c **** /****************************************************************************
 312:Core/Src/spi.c **** * 名    称：void SST25_R_BLOCK(unsigned long addr, unsigned char *readbuff, unsigned int BlockSi
 313:Core/Src/spi.c **** * 功    能：页读
 314:Core/Src/spi.c **** * 入口参数：unsigned long addr--页   unsigned char *readbuff--数组   unsigned int BlockSize
 315:Core/Src/spi.c **** * 出口参数：无
 316:Core/Src/spi.c **** * 说    明：
 317:Core/Src/spi.c **** * 调用方法：无 
 318:Core/Src/spi.c **** ****************************************************************************/  
ARM GAS  /tmp/cc27mv2X.s 			page 7


 319:Core/Src/spi.c **** static void sst_rd_block(unsigned long addr, unsigned char *readbuff, unsigned int BlockSize){
 320:Core/Src/spi.c ****   unsigned int i=0;   
 321:Core/Src/spi.c ****   Select_Flash();
 322:Core/Src/spi.c ****   SPI_Flash_SendByte(0x0b);
 323:Core/Src/spi.c ****   SPI_Flash_SendByte((addr&0xffffff)>>16);
 324:Core/Src/spi.c ****   SPI_Flash_SendByte((addr&0xffff)>>8);
 325:Core/Src/spi.c ****   SPI_Flash_SendByte(addr&0xff);
 326:Core/Src/spi.c ****   SPI_Flash_SendByte(0);
 327:Core/Src/spi.c ****   while(i<BlockSize){ 
 328:Core/Src/spi.c ****     readbuff[i]=SPI_Flash_ReadByte();
 329:Core/Src/spi.c ****     
 330:Core/Src/spi.c ****     i++;
 331:Core/Src/spi.c ****   }
 332:Core/Src/spi.c ****   NotSelect_Flash();    
 333:Core/Src/spi.c **** }
 334:Core/Src/spi.c **** 
 335:Core/Src/spi.c **** /****************************************************************************
 336:Core/Src/spi.c **** * 名    称：void sect_clr(unsigned long a1)
 337:Core/Src/spi.c **** * 功    能：页擦除
 338:Core/Src/spi.c **** * 入口参数：unsigned long a1--页   
 339:Core/Src/spi.c **** * 出口参数：无
 340:Core/Src/spi.c **** * 说    明：
 341:Core/Src/spi.c **** * 调用方法：无 
 342:Core/Src/spi.c **** ****************************************************************************/ 
 343:Core/Src/spi.c **** static void sect_clr(unsigned long a1){
 344:Core/Src/spi.c ****   wsr();
 345:Core/Src/spi.c ****   wen();     
 346:Core/Src/spi.c ****   Select_Flash();   
 347:Core/Src/spi.c ****   SPI_Flash_SendByte(0x20);
 348:Core/Src/spi.c ****   SPI_Flash_SendByte((a1&0xffffff)>>16);          //addh
 349:Core/Src/spi.c ****   SPI_Flash_SendByte((a1&0xffff)>>8);          //addl 
 350:Core/Src/spi.c ****   SPI_Flash_SendByte(a1&0xff);                 //wtt
 351:Core/Src/spi.c ****   NotSelect_Flash();
 352:Core/Src/spi.c ****   wip();
 353:Core/Src/spi.c ****   
 354:Core/Src/spi.c **** }
 355:Core/Src/spi.c **** 
 356:Core/Src/spi.c **** /*******************************************************************************
 357:Core/Src/spi.c **** * Function Name  : SPI_FLASH_ReadByte
 358:Core/Src/spi.c **** * Description    : Reads a byte from the SPI Flash.
 359:Core/Src/spi.c **** *                  This function must be used only if the Start_Read_Sequence
 360:Core/Src/spi.c **** *                  function has been previously called.
 361:Core/Src/spi.c **** * Input          : None
 362:Core/Src/spi.c **** * Output         : None
 363:Core/Src/spi.c **** * Return         : Byte Read from the SPI Flash.
 364:Core/Src/spi.c **** *******************************************************************************/
 365:Core/Src/spi.c **** static uint8_t SPI_Flash_ReadByte(void)
 366:Core/Src/spi.c **** {
 367:Core/Src/spi.c ****   uint8_t ret;
 368:Core/Src/spi.c ****   while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {}
 369:Core/Src/spi.c ****   HAL_SPI_Receive(&hspi1, &ret, 1, 0xffff);
 370:Core/Src/spi.c **** 
 371:Core/Src/spi.c ****   return ret;
 372:Core/Src/spi.c **** }
 373:Core/Src/spi.c **** 
 374:Core/Src/spi.c **** /*******************************************************************************
 375:Core/Src/spi.c **** * Function Name  : SPI_FLASH_SendByte
ARM GAS  /tmp/cc27mv2X.s 			page 8


 376:Core/Src/spi.c **** * Description    : Sends a byte through the SPI interface and return the byte 
 377:Core/Src/spi.c **** *                  received from the SPI bus.
 378:Core/Src/spi.c **** * Input          : byte : byte to send.
 379:Core/Src/spi.c **** * Output         : None
 380:Core/Src/spi.c **** * Return         : The value of the received byte.
 381:Core/Src/spi.c **** *******************************************************************************/
 382:Core/Src/spi.c **** static uint8_t SPI_Flash_SendByte(uint8_t byte)
 383:Core/Src/spi.c **** {
  26              		.loc 1 383 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 00B5     		push	{lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 14, -4
  35 0002 83B0     		sub	sp, sp, #12
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 16
  38 0004 8DF80700 		strb	r0, [sp, #7]
  39              	.LVL1:
  40              	.L2:
 384:Core/Src/spi.c ****   while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {}
  41              		.loc 1 384 0 discriminator 1
  42 0008 0848     		ldr	r0, .L4
  43 000a FFF7FEFF 		bl	HAL_SPI_GetState
  44              	.LVL2:
  45 000e 0128     		cmp	r0, #1
  46 0010 FAD1     		bne	.L2
 385:Core/Src/spi.c ****   HAL_SPI_Transmit(&hspi1, &byte, 1, 0xffff);
  47              		.loc 1 385 0
  48 0012 0648     		ldr	r0, .L4
  49 0014 0DF10701 		add	r1, sp, #7
  50              	.LVL3:
  51 0018 0122     		movs	r2, #1
  52 001a 4FF6FF73 		movw	r3, #65535
  53 001e FFF7FEFF 		bl	HAL_SPI_Transmit
  54              	.LVL4:
 386:Core/Src/spi.c **** 
 387:Core/Src/spi.c ****   return 0;
 388:Core/Src/spi.c **** }/******************* (C) COPYRIGHT 2011 奋斗STM32 *****END OF FILE****/
  55              		.loc 1 388 0
  56 0022 0020     		movs	r0, #0
  57 0024 03B0     		add	sp, sp, #12
  58              	.LCFI2:
  59              		.cfi_def_cfa_offset 4
  60              		@ sp needed
  61 0026 5DF804FB 		ldr	pc, [sp], #4
  62              	.LVL5:
  63              	.L5:
  64 002a 00BF     		.align	2
  65              	.L4:
  66 002c 00000000 		.word	hspi1
  67              		.cfi_endproc
  68              	.LFE76:
  70              		.section	.text.wen,"ax",%progbits
ARM GAS  /tmp/cc27mv2X.s 			page 9


  71              		.align	2
  72              		.thumb
  73              		.thumb_func
  75              	wen:
  76              	.LFB67:
 200:Core/Src/spi.c ****   Select_Flash();
  77              		.loc 1 200 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81 0000 10B5     		push	{r4, lr}
  82              	.LCFI3:
  83              		.cfi_def_cfa_offset 8
  84              		.cfi_offset 4, -8
  85              		.cfi_offset 14, -4
 201:Core/Src/spi.c ****   SPI_Flash_SendByte(0x06);
  86              		.loc 1 201 0
  87 0002 074C     		ldr	r4, .L8
  88 0004 2046     		mov	r0, r4
  89 0006 1021     		movs	r1, #16
  90 0008 0022     		movs	r2, #0
  91 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  92              	.LVL6:
 202:Core/Src/spi.c ****   NotSelect_Flash();
  93              		.loc 1 202 0
  94 000e 0620     		movs	r0, #6
  95 0010 FFF7FEFF 		bl	SPI_Flash_SendByte
  96              	.LVL7:
 203:Core/Src/spi.c **** }
  97              		.loc 1 203 0
  98 0014 2046     		mov	r0, r4
  99 0016 1021     		movs	r1, #16
 100 0018 0122     		movs	r2, #1
 101 001a FFF7FEFF 		bl	HAL_GPIO_WritePin
 102              	.LVL8:
 103 001e 10BD     		pop	{r4, pc}
 104              	.L9:
 105              		.align	2
 106              	.L8:
 107 0020 00080140 		.word	1073809408
 108              		.cfi_endproc
 109              	.LFE67:
 111              		.section	.text.SPI_Flash_ReadByte,"ax",%progbits
 112              		.align	2
 113              		.thumb
 114              		.thumb_func
 116              	SPI_Flash_ReadByte:
 117              	.LFB75:
 366:Core/Src/spi.c ****   uint8_t ret;
 118              		.loc 1 366 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 8
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122 0000 00B5     		push	{lr}
 123              	.LCFI4:
 124              		.cfi_def_cfa_offset 4
 125              		.cfi_offset 14, -4
ARM GAS  /tmp/cc27mv2X.s 			page 10


 126 0002 83B0     		sub	sp, sp, #12
 127              	.LCFI5:
 128              		.cfi_def_cfa_offset 16
 129              	.L11:
 368:Core/Src/spi.c ****   HAL_SPI_Receive(&hspi1, &ret, 1, 0xffff);
 130              		.loc 1 368 0 discriminator 1
 131 0004 0848     		ldr	r0, .L13
 132 0006 FFF7FEFF 		bl	HAL_SPI_GetState
 133              	.LVL9:
 134 000a 0128     		cmp	r0, #1
 135 000c FAD1     		bne	.L11
 369:Core/Src/spi.c **** 
 136              		.loc 1 369 0
 137 000e 0648     		ldr	r0, .L13
 138 0010 0DF10701 		add	r1, sp, #7
 139 0014 0122     		movs	r2, #1
 140 0016 4FF6FF73 		movw	r3, #65535
 141 001a FFF7FEFF 		bl	HAL_SPI_Receive
 142              	.LVL10:
 372:Core/Src/spi.c **** 
 143              		.loc 1 372 0
 144 001e 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 145 0022 03B0     		add	sp, sp, #12
 146              	.LCFI6:
 147              		.cfi_def_cfa_offset 4
 148              		@ sp needed
 149 0024 5DF804FB 		ldr	pc, [sp], #4
 150              	.L14:
 151              		.align	2
 152              	.L13:
 153 0028 00000000 		.word	hspi1
 154              		.cfi_endproc
 155              	.LFE75:
 157              		.section	.text.rdsr,"ax",%progbits
 158              		.align	2
 159              		.thumb
 160              		.thumb_func
 162              	rdsr:
 163              	.LFB71:
 262:Core/Src/spi.c ****   unsigned char busy;
 164              		.loc 1 262 0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 0
 167              		@ frame_needed = 0, uses_anonymous_args = 0
 168 0000 38B5     		push	{r3, r4, r5, lr}
 169              	.LCFI7:
 170              		.cfi_def_cfa_offset 16
 171              		.cfi_offset 3, -16
 172              		.cfi_offset 4, -12
 173              		.cfi_offset 5, -8
 174              		.cfi_offset 14, -4
 264:Core/Src/spi.c ****   SPI_Flash_SendByte(0x05);
 175              		.loc 1 264 0
 176 0002 094C     		ldr	r4, .L17
 177 0004 2046     		mov	r0, r4
 178 0006 1021     		movs	r1, #16
 179 0008 0022     		movs	r2, #0
ARM GAS  /tmp/cc27mv2X.s 			page 11


 180 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 181              	.LVL11:
 265:Core/Src/spi.c ****   busy = SPI_Flash_ReadByte();
 182              		.loc 1 265 0
 183 000e 0520     		movs	r0, #5
 184 0010 FFF7FEFF 		bl	SPI_Flash_SendByte
 185              	.LVL12:
 266:Core/Src/spi.c ****   NotSelect_Flash();
 186              		.loc 1 266 0
 187 0014 FFF7FEFF 		bl	SPI_Flash_ReadByte
 188              	.LVL13:
 189 0018 0546     		mov	r5, r0
 190              	.LVL14:
 267:Core/Src/spi.c ****   return(busy);
 191              		.loc 1 267 0
 192 001a 2046     		mov	r0, r4
 193 001c 1021     		movs	r1, #16
 194 001e 0122     		movs	r2, #1
 195 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
 196              	.LVL15:
 270:Core/Src/spi.c **** 
 197              		.loc 1 270 0
 198 0024 2846     		mov	r0, r5
 199 0026 38BD     		pop	{r3, r4, r5, pc}
 200              	.LVL16:
 201              	.L18:
 202              		.align	2
 203              	.L17:
 204 0028 00080140 		.word	1073809408
 205              		.cfi_endproc
 206              	.LFE71:
 208              		.section	.text.wip,"ax",%progbits
 209              		.align	2
 210              		.thumb
 211              		.thumb_func
 213              	wip:
 214              	.LFB70:
 249:Core/Src/spi.c ****   unsigned char a=1;
 215              		.loc 1 249 0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 0, uses_anonymous_args = 0
 219 0000 08B5     		push	{r3, lr}
 220              	.LCFI8:
 221              		.cfi_def_cfa_offset 8
 222              		.cfi_offset 3, -8
 223              		.cfi_offset 14, -4
 224              	.LVL17:
 250:Core/Src/spi.c ****   while((a&0x01)==1) a=rdsr();  
 225              		.loc 1 250 0
 226 0002 0120     		movs	r0, #1
 251:Core/Src/spi.c **** 
 227              		.loc 1 251 0
 228 0004 01E0     		b	.L20
 229              	.LVL18:
 230              	.L21:
 251:Core/Src/spi.c **** 
ARM GAS  /tmp/cc27mv2X.s 			page 12


 231              		.loc 1 251 0 is_stmt 0 discriminator 2
 232 0006 FFF7FEFF 		bl	rdsr
 233              	.LVL19:
 234              	.L20:
 251:Core/Src/spi.c **** 
 235              		.loc 1 251 0 discriminator 1
 236 000a 10F0010F 		tst	r0, #1
 237 000e FAD1     		bne	.L21
 253:Core/Src/spi.c **** /****************************************************************************
 238              		.loc 1 253 0 is_stmt 1
 239 0010 08BD     		pop	{r3, pc}
 240              		.cfi_endproc
 241              	.LFE70:
 243 0012 00BF     		.section	.text.wsr,"ax",%progbits
 244              		.align	2
 245              		.thumb
 246              		.thumb_func
 248              	wsr:
 249              	.LFB69:
 230:Core/Src/spi.c ****   Select_Flash();
 250              		.loc 1 230 0
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 0
 253              		@ frame_needed = 0, uses_anonymous_args = 0
 254 0000 10B5     		push	{r4, lr}
 255              	.LCFI9:
 256              		.cfi_def_cfa_offset 8
 257              		.cfi_offset 4, -8
 258              		.cfi_offset 14, -4
 231:Core/Src/spi.c ****   SPI_Flash_SendByte(0x50);
 259              		.loc 1 231 0
 260 0002 104C     		ldr	r4, .L25
 261 0004 2046     		mov	r0, r4
 262 0006 1021     		movs	r1, #16
 263 0008 0022     		movs	r2, #0
 264 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 265              	.LVL20:
 232:Core/Src/spi.c ****   NotSelect_Flash(); 
 266              		.loc 1 232 0
 267 000e 5020     		movs	r0, #80
 268 0010 FFF7FEFF 		bl	SPI_Flash_SendByte
 269              	.LVL21:
 233:Core/Src/spi.c ****   Select_Flash();
 270              		.loc 1 233 0
 271 0014 2046     		mov	r0, r4
 272 0016 1021     		movs	r1, #16
 273 0018 0122     		movs	r2, #1
 274 001a FFF7FEFF 		bl	HAL_GPIO_WritePin
 275              	.LVL22:
 234:Core/Src/spi.c ****   SPI_Flash_SendByte(0x01);
 276              		.loc 1 234 0
 277 001e 2046     		mov	r0, r4
 278 0020 1021     		movs	r1, #16
 279 0022 0022     		movs	r2, #0
 280 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 281              	.LVL23:
 235:Core/Src/spi.c ****   SPI_Flash_SendByte(0x00); 
ARM GAS  /tmp/cc27mv2X.s 			page 13


 282              		.loc 1 235 0
 283 0028 0120     		movs	r0, #1
 284 002a FFF7FEFF 		bl	SPI_Flash_SendByte
 285              	.LVL24:
 236:Core/Src/spi.c ****   NotSelect_Flash();
 286              		.loc 1 236 0
 287 002e 0020     		movs	r0, #0
 288 0030 FFF7FEFF 		bl	SPI_Flash_SendByte
 289              	.LVL25:
 237:Core/Src/spi.c ****     wip();
 290              		.loc 1 237 0
 291 0034 2046     		mov	r0, r4
 292 0036 1021     		movs	r1, #16
 293 0038 0122     		movs	r2, #1
 294 003a FFF7FEFF 		bl	HAL_GPIO_WritePin
 295              	.LVL26:
 238:Core/Src/spi.c **** }
 296              		.loc 1 238 0
 297 003e FFF7FEFF 		bl	wip
 298              	.LVL27:
 299 0042 10BD     		pop	{r4, pc}
 300              	.L26:
 301              		.align	2
 302              	.L25:
 303 0044 00080140 		.word	1073809408
 304              		.cfi_endproc
 305              	.LFE69:
 307              		.section	.text.sect_clr,"ax",%progbits
 308              		.align	2
 309              		.thumb
 310              		.thumb_func
 312              	sect_clr:
 313              	.LFB74:
 343:Core/Src/spi.c ****   wsr();
 314              		.loc 1 343 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 0
 317              		@ frame_needed = 0, uses_anonymous_args = 0
 318              	.LVL28:
 319 0000 38B5     		push	{r3, r4, r5, lr}
 320              	.LCFI10:
 321              		.cfi_def_cfa_offset 16
 322              		.cfi_offset 3, -16
 323              		.cfi_offset 4, -12
 324              		.cfi_offset 5, -8
 325              		.cfi_offset 14, -4
 326 0002 0446     		mov	r4, r0
 344:Core/Src/spi.c ****   wen();     
 327              		.loc 1 344 0
 328 0004 FFF7FEFF 		bl	wsr
 329              	.LVL29:
 345:Core/Src/spi.c ****   Select_Flash();   
 330              		.loc 1 345 0
 331 0008 FFF7FEFF 		bl	wen
 332              	.LVL30:
 346:Core/Src/spi.c ****   SPI_Flash_SendByte(0x20);
 333              		.loc 1 346 0
ARM GAS  /tmp/cc27mv2X.s 			page 14


 334 000c 0D4D     		ldr	r5, .L29
 335 000e 2846     		mov	r0, r5
 336 0010 1021     		movs	r1, #16
 337 0012 0022     		movs	r2, #0
 338 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 339              	.LVL31:
 347:Core/Src/spi.c ****   SPI_Flash_SendByte((a1&0xffffff)>>16);          //addh
 340              		.loc 1 347 0
 341 0018 2020     		movs	r0, #32
 342 001a FFF7FEFF 		bl	SPI_Flash_SendByte
 343              	.LVL32:
 348:Core/Src/spi.c ****   SPI_Flash_SendByte((a1&0xffff)>>8);          //addl 
 344              		.loc 1 348 0
 345 001e C4F30740 		ubfx	r0, r4, #16, #8
 346 0022 FFF7FEFF 		bl	SPI_Flash_SendByte
 347              	.LVL33:
 349:Core/Src/spi.c ****   SPI_Flash_SendByte(a1&0xff);                 //wtt
 348              		.loc 1 349 0
 349 0026 C4F30720 		ubfx	r0, r4, #8, #8
 350 002a FFF7FEFF 		bl	SPI_Flash_SendByte
 351              	.LVL34:
 350:Core/Src/spi.c ****   NotSelect_Flash();
 352              		.loc 1 350 0
 353 002e E0B2     		uxtb	r0, r4
 354 0030 FFF7FEFF 		bl	SPI_Flash_SendByte
 355              	.LVL35:
 351:Core/Src/spi.c ****   wip();
 356              		.loc 1 351 0
 357 0034 2846     		mov	r0, r5
 358 0036 1021     		movs	r1, #16
 359 0038 0122     		movs	r2, #1
 360 003a FFF7FEFF 		bl	HAL_GPIO_WritePin
 361              	.LVL36:
 352:Core/Src/spi.c ****   
 362              		.loc 1 352 0
 363 003e FFF7FEFF 		bl	wip
 364              	.LVL37:
 365 0042 38BD     		pop	{r3, r4, r5, pc}
 366              	.LVL38:
 367              	.L30:
 368              		.align	2
 369              	.L29:
 370 0044 00080140 		.word	1073809408
 371              		.cfi_endproc
 372              	.LFE74:
 374              		.section	.text.wdis,"ax",%progbits
 375              		.align	2
 376              		.thumb
 377              		.thumb_func
 379              	wdis:
 380              	.LFB68:
 214:Core/Src/spi.c **** 
 381              		.loc 1 214 0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 0
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 385 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/cc27mv2X.s 			page 15


 386              	.LCFI11:
 387              		.cfi_def_cfa_offset 8
 388              		.cfi_offset 4, -8
 389              		.cfi_offset 14, -4
 216:Core/Src/spi.c ****   SPI_Flash_SendByte(0x04); 
 390              		.loc 1 216 0
 391 0002 084C     		ldr	r4, .L33
 392 0004 2046     		mov	r0, r4
 393 0006 1021     		movs	r1, #16
 394 0008 0022     		movs	r2, #0
 395 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 396              	.LVL39:
 217:Core/Src/spi.c ****   NotSelect_Flash();
 397              		.loc 1 217 0
 398 000e 0420     		movs	r0, #4
 399 0010 FFF7FEFF 		bl	SPI_Flash_SendByte
 400              	.LVL40:
 218:Core/Src/spi.c ****   wip();
 401              		.loc 1 218 0
 402 0014 2046     		mov	r0, r4
 403 0016 1021     		movs	r1, #16
 404 0018 0122     		movs	r2, #1
 405 001a FFF7FEFF 		bl	HAL_GPIO_WritePin
 406              	.LVL41:
 219:Core/Src/spi.c ****   
 407              		.loc 1 219 0
 408 001e FFF7FEFF 		bl	wip
 409              	.LVL42:
 410 0022 10BD     		pop	{r4, pc}
 411              	.L34:
 412              		.align	2
 413              	.L33:
 414 0024 00080140 		.word	1073809408
 415              		.cfi_endproc
 416              	.LFE68:
 418              		.section	.text.sst_wr_block,"ax",%progbits
 419              		.align	2
 420              		.thumb
 421              		.thumb_func
 423              	sst_wr_block:
 424              	.LFB72:
 280:Core/Src/spi.c ****   unsigned int i=0,a2;
 425              		.loc 1 280 0
 426              		.cfi_startproc
 427              		@ args = 0, pretend = 0, frame = 0
 428              		@ frame_needed = 0, uses_anonymous_args = 0
 429              	.LVL43:
 430 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 431              	.LCFI12:
 432              		.cfi_def_cfa_offset 24
 433              		.cfi_offset 4, -24
 434              		.cfi_offset 5, -20
 435              		.cfi_offset 6, -16
 436              		.cfi_offset 7, -12
 437              		.cfi_offset 8, -8
 438              		.cfi_offset 14, -4
 439 0004 0446     		mov	r4, r0
ARM GAS  /tmp/cc27mv2X.s 			page 16


 440 0006 0F46     		mov	r7, r1
 441 0008 9046     		mov	r8, r2
 442              	.LVL44:
 282:Core/Src/spi.c ****   wsr();
 443              		.loc 1 282 0
 444 000a FFF7FEFF 		bl	sect_clr
 445              	.LVL45:
 283:Core/Src/spi.c ****     wen();  
 446              		.loc 1 283 0
 447 000e FFF7FEFF 		bl	wsr
 448              	.LVL46:
 284:Core/Src/spi.c ****   Select_Flash();    
 449              		.loc 1 284 0
 450 0012 FFF7FEFF 		bl	wen
 451              	.LVL47:
 285:Core/Src/spi.c ****   SPI_Flash_SendByte(0xad);
 452              		.loc 1 285 0
 453 0016 274D     		ldr	r5, .L43
 454 0018 2846     		mov	r0, r5
 455 001a 1021     		movs	r1, #16
 456 001c 0022     		movs	r2, #0
 457 001e FFF7FEFF 		bl	HAL_GPIO_WritePin
 458              	.LVL48:
 286:Core/Src/spi.c ****   SPI_Flash_SendByte((addr&0xffffff)>>16);
 459              		.loc 1 286 0
 460 0022 AD20     		movs	r0, #173
 461 0024 FFF7FEFF 		bl	SPI_Flash_SendByte
 462              	.LVL49:
 287:Core/Src/spi.c ****   SPI_Flash_SendByte((addr&0xffff)>>8);
 463              		.loc 1 287 0
 464 0028 C4F30740 		ubfx	r0, r4, #16, #8
 465 002c FFF7FEFF 		bl	SPI_Flash_SendByte
 466              	.LVL50:
 288:Core/Src/spi.c ****   SPI_Flash_SendByte(addr&0xff);
 467              		.loc 1 288 0
 468 0030 C4F30720 		ubfx	r0, r4, #8, #8
 469 0034 FFF7FEFF 		bl	SPI_Flash_SendByte
 470              	.LVL51:
 289:Core/Src/spi.c ****   SPI_Flash_SendByte(readbuff[0]);
 471              		.loc 1 289 0
 472 0038 E0B2     		uxtb	r0, r4
 473 003a FFF7FEFF 		bl	SPI_Flash_SendByte
 474              	.LVL52:
 290:Core/Src/spi.c ****   SPI_Flash_SendByte(readbuff[1]);
 475              		.loc 1 290 0
 476 003e 3878     		ldrb	r0, [r7]	@ zero_extendqisi2
 477 0040 FFF7FEFF 		bl	SPI_Flash_SendByte
 478              	.LVL53:
 291:Core/Src/spi.c ****   NotSelect_Flash();
 479              		.loc 1 291 0
 480 0044 7878     		ldrb	r0, [r7, #1]	@ zero_extendqisi2
 481 0046 FFF7FEFF 		bl	SPI_Flash_SendByte
 482              	.LVL54:
 292:Core/Src/spi.c ****   i=2;
 483              		.loc 1 292 0
 484 004a 2846     		mov	r0, r5
 485 004c 1021     		movs	r1, #16
ARM GAS  /tmp/cc27mv2X.s 			page 17


 486 004e 0122     		movs	r2, #1
 487 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 488              	.LVL55:
 293:Core/Src/spi.c ****   while(i<BlockSize){
 489              		.loc 1 293 0
 490 0054 0224     		movs	r4, #2
 491              	.LVL56:
 294:Core/Src/spi.c ****     a2=120;
 492              		.loc 1 294 0
 493 0056 1AE0     		b	.L36
 494              	.LVL57:
 495              	.L37:
 296:Core/Src/spi.c ****     Select_Flash();
 496              		.loc 1 296 0 discriminator 2
 497 0058 013B     		subs	r3, r3, #1
 498              	.LVL58:
 499 005a 00E0     		b	.L38
 500              	.LVL59:
 501              	.L41:
 502 005c 7823     		movs	r3, #120
 503              	.L38:
 504              	.LVL60:
 296:Core/Src/spi.c ****     Select_Flash();
 505              		.loc 1 296 0 is_stmt 0 discriminator 1
 506 005e 002B     		cmp	r3, #0
 507 0060 FAD1     		bne	.L37
 297:Core/Src/spi.c ****     SPI_Flash_SendByte(0xad);
 508              		.loc 1 297 0 is_stmt 1
 509 0062 144D     		ldr	r5, .L43
 510 0064 2846     		mov	r0, r5
 511 0066 1021     		movs	r1, #16
 512 0068 0022     		movs	r2, #0
 513 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 514              	.LVL61:
 298:Core/Src/spi.c ****     SPI_Flash_SendByte(readbuff[i++]);
 515              		.loc 1 298 0
 516 006e AD20     		movs	r0, #173
 517 0070 FFF7FEFF 		bl	SPI_Flash_SendByte
 518              	.LVL62:
 299:Core/Src/spi.c ****     SPI_Flash_SendByte(readbuff[i++]);
 519              		.loc 1 299 0
 520 0074 661C     		adds	r6, r4, #1
 521              	.LVL63:
 522 0076 385D     		ldrb	r0, [r7, r4]	@ zero_extendqisi2
 523 0078 FFF7FEFF 		bl	SPI_Flash_SendByte
 524              	.LVL64:
 300:Core/Src/spi.c ****     NotSelect_Flash();
 525              		.loc 1 300 0
 526 007c 0234     		adds	r4, r4, #2
 527              	.LVL65:
 528 007e B85D     		ldrb	r0, [r7, r6]	@ zero_extendqisi2
 529 0080 FFF7FEFF 		bl	SPI_Flash_SendByte
 530              	.LVL66:
 301:Core/Src/spi.c ****   }
 531              		.loc 1 301 0
 532 0084 2846     		mov	r0, r5
 533 0086 1021     		movs	r1, #16
ARM GAS  /tmp/cc27mv2X.s 			page 18


 534 0088 0122     		movs	r2, #1
 535 008a FFF7FEFF 		bl	HAL_GPIO_WritePin
 536              	.LVL67:
 537              	.L36:
 294:Core/Src/spi.c ****     a2=120;
 538              		.loc 1 294 0
 539 008e A045     		cmp	r8, r4
 540 0090 E4D8     		bhi	.L41
 541 0092 6423     		movs	r3, #100
 542 0094 00E0     		b	.L39
 543              	.LVL68:
 544              	.L40:
 305:Core/Src/spi.c ****   wdis(); 
 545              		.loc 1 305 0 discriminator 2
 546 0096 013B     		subs	r3, r3, #1
 547              	.LVL69:
 548              	.L39:
 305:Core/Src/spi.c ****   wdis(); 
 549              		.loc 1 305 0 is_stmt 0 discriminator 1
 550 0098 002B     		cmp	r3, #0
 551 009a FCD1     		bne	.L40
 306:Core/Src/spi.c ****   Select_Flash(); 
 552              		.loc 1 306 0 is_stmt 1
 553 009c FFF7FEFF 		bl	wdis
 554              	.LVL70:
 307:Core/Src/spi.c ****   wip();
 555              		.loc 1 307 0
 556 00a0 0448     		ldr	r0, .L43
 557 00a2 1021     		movs	r1, #16
 558 00a4 0022     		movs	r2, #0
 559 00a6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 560              	.LVL71:
 308:Core/Src/spi.c **** }
 561              		.loc 1 308 0
 562 00aa FFF7FEFF 		bl	wip
 563              	.LVL72:
 564 00ae BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 565              	.LVL73:
 566              	.L44:
 567 00b2 00BF     		.align	2
 568              	.L43:
 569 00b4 00080140 		.word	1073809408
 570              		.cfi_endproc
 571              	.LFE72:
 573              		.section	.text.sst_rd_block,"ax",%progbits
 574              		.align	2
 575              		.thumb
 576              		.thumb_func
 578              	sst_rd_block:
 579              	.LFB73:
 319:Core/Src/spi.c ****   unsigned int i=0;   
 580              		.loc 1 319 0
 581              		.cfi_startproc
 582              		@ args = 0, pretend = 0, frame = 0
 583              		@ frame_needed = 0, uses_anonymous_args = 0
 584              	.LVL74:
 585 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  /tmp/cc27mv2X.s 			page 19


 586              	.LCFI13:
 587              		.cfi_def_cfa_offset 16
 588              		.cfi_offset 4, -16
 589              		.cfi_offset 5, -12
 590              		.cfi_offset 6, -8
 591              		.cfi_offset 14, -4
 592 0002 0446     		mov	r4, r0
 593 0004 0E46     		mov	r6, r1
 594 0006 1546     		mov	r5, r2
 595              	.LVL75:
 321:Core/Src/spi.c ****   SPI_Flash_SendByte(0x0b);
 596              		.loc 1 321 0
 597 0008 1148     		ldr	r0, .L49
 598              	.LVL76:
 599 000a 1021     		movs	r1, #16
 600              	.LVL77:
 601 000c 0022     		movs	r2, #0
 602              	.LVL78:
 603 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 604              	.LVL79:
 322:Core/Src/spi.c ****   SPI_Flash_SendByte((addr&0xffffff)>>16);
 605              		.loc 1 322 0
 606 0012 0B20     		movs	r0, #11
 607 0014 FFF7FEFF 		bl	SPI_Flash_SendByte
 608              	.LVL80:
 323:Core/Src/spi.c ****   SPI_Flash_SendByte((addr&0xffff)>>8);
 609              		.loc 1 323 0
 610 0018 C4F30740 		ubfx	r0, r4, #16, #8
 611 001c FFF7FEFF 		bl	SPI_Flash_SendByte
 612              	.LVL81:
 324:Core/Src/spi.c ****   SPI_Flash_SendByte(addr&0xff);
 613              		.loc 1 324 0
 614 0020 C4F30720 		ubfx	r0, r4, #8, #8
 615 0024 FFF7FEFF 		bl	SPI_Flash_SendByte
 616              	.LVL82:
 325:Core/Src/spi.c ****   SPI_Flash_SendByte(0);
 617              		.loc 1 325 0
 618 0028 E0B2     		uxtb	r0, r4
 619 002a FFF7FEFF 		bl	SPI_Flash_SendByte
 620              	.LVL83:
 326:Core/Src/spi.c ****   while(i<BlockSize){ 
 621              		.loc 1 326 0
 622 002e 0020     		movs	r0, #0
 623 0030 FFF7FEFF 		bl	SPI_Flash_SendByte
 624              	.LVL84:
 320:Core/Src/spi.c ****   Select_Flash();
 625              		.loc 1 320 0
 626 0034 0024     		movs	r4, #0
 627              	.LVL85:
 327:Core/Src/spi.c ****     readbuff[i]=SPI_Flash_ReadByte();
 628              		.loc 1 327 0
 629 0036 03E0     		b	.L46
 630              	.LVL86:
 631              	.L47:
 328:Core/Src/spi.c ****     
 632              		.loc 1 328 0
 633 0038 FFF7FEFF 		bl	SPI_Flash_ReadByte
ARM GAS  /tmp/cc27mv2X.s 			page 20


 634              	.LVL87:
 635 003c 3055     		strb	r0, [r6, r4]
 330:Core/Src/spi.c ****   }
 636              		.loc 1 330 0
 637 003e 0134     		adds	r4, r4, #1
 638              	.LVL88:
 639              	.L46:
 327:Core/Src/spi.c ****     readbuff[i]=SPI_Flash_ReadByte();
 640              		.loc 1 327 0
 641 0040 AC42     		cmp	r4, r5
 642 0042 F9D3     		bcc	.L47
 332:Core/Src/spi.c **** }
 643              		.loc 1 332 0
 644 0044 0248     		ldr	r0, .L49
 645 0046 1021     		movs	r1, #16
 646 0048 0122     		movs	r2, #1
 647 004a FFF7FEFF 		bl	HAL_GPIO_WritePin
 648              	.LVL89:
 649 004e 70BD     		pop	{r4, r5, r6, pc}
 650              	.LVL90:
 651              	.L50:
 652              		.align	2
 653              	.L49:
 654 0050 00080140 		.word	1073809408
 655              		.cfi_endproc
 656              	.LFE73:
 658              		.section	.text.MX_SPI1_Init,"ax",%progbits
 659              		.align	2
 660              		.global	MX_SPI1_Init
 661              		.thumb
 662              		.thumb_func
 664              	MX_SPI1_Init:
 665              	.LFB63:
  77:Core/Src/spi.c **** 
 666              		.loc 1 77 0
 667              		.cfi_startproc
 668              		@ args = 0, pretend = 0, frame = 0
 669              		@ frame_needed = 0, uses_anonymous_args = 0
 670 0000 08B5     		push	{r3, lr}
 671              	.LCFI14:
 672              		.cfi_def_cfa_offset 8
 673              		.cfi_offset 3, -8
 674              		.cfi_offset 14, -4
  79:Core/Src/spi.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 675              		.loc 1 79 0
 676 0002 0E48     		ldr	r0, .L54
 677 0004 0E4B     		ldr	r3, .L54+4
 678 0006 0360     		str	r3, [r0]
  80:Core/Src/spi.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 679              		.loc 1 80 0
 680 0008 4FF48273 		mov	r3, #260
 681 000c 4360     		str	r3, [r0, #4]
  81:Core/Src/spi.c ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 682              		.loc 1 81 0
 683 000e 0023     		movs	r3, #0
 684 0010 8360     		str	r3, [r0, #8]
  82:Core/Src/spi.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
ARM GAS  /tmp/cc27mv2X.s 			page 21


 685              		.loc 1 82 0
 686 0012 C360     		str	r3, [r0, #12]
  83:Core/Src/spi.c ****   hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 687              		.loc 1 83 0
 688 0014 0222     		movs	r2, #2
 689 0016 0261     		str	r2, [r0, #16]
  84:Core/Src/spi.c ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 690              		.loc 1 84 0
 691 0018 0122     		movs	r2, #1
 692 001a 4261     		str	r2, [r0, #20]
  85:Core/Src/spi.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 693              		.loc 1 85 0
 694 001c 4FF40072 		mov	r2, #512
 695 0020 8261     		str	r2, [r0, #24]
  86:Core/Src/spi.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 696              		.loc 1 86 0
 697 0022 1022     		movs	r2, #16
 698 0024 C261     		str	r2, [r0, #28]
  87:Core/Src/spi.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 699              		.loc 1 87 0
 700 0026 0362     		str	r3, [r0, #32]
  88:Core/Src/spi.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 701              		.loc 1 88 0
 702 0028 4362     		str	r3, [r0, #36]
  89:Core/Src/spi.c ****   hspi1.Init.CRCPolynomial = 7;
 703              		.loc 1 89 0
 704 002a 8362     		str	r3, [r0, #40]
  90:Core/Src/spi.c ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 705              		.loc 1 90 0
 706 002c 0723     		movs	r3, #7
 707 002e C362     		str	r3, [r0, #44]
  91:Core/Src/spi.c ****   {
 708              		.loc 1 91 0
 709 0030 FFF7FEFF 		bl	HAL_SPI_Init
 710              	.LVL91:
 711 0034 08B1     		cbz	r0, .L51
  93:Core/Src/spi.c ****   }
 712              		.loc 1 93 0
 713 0036 FFF7FEFF 		bl	Error_Handler
 714              	.LVL92:
 715              	.L51:
 716 003a 08BD     		pop	{r3, pc}
 717              	.L55:
 718              		.align	2
 719              	.L54:
 720 003c 00000000 		.word	hspi1
 721 0040 00300140 		.word	1073819648
 722              		.cfi_endproc
 723              	.LFE63:
 725              		.section	.text.HAL_SPI_MspInit,"ax",%progbits
 726              		.align	2
 727              		.global	HAL_SPI_MspInit
 728              		.thumb
 729              		.thumb_func
 731              	HAL_SPI_MspInit:
 732              	.LFB64:
  99:Core/Src/spi.c **** 
ARM GAS  /tmp/cc27mv2X.s 			page 22


 733              		.loc 1 99 0
 734              		.cfi_startproc
 735              		@ args = 0, pretend = 0, frame = 24
 736              		@ frame_needed = 0, uses_anonymous_args = 0
 737              	.LVL93:
 738 0000 10B5     		push	{r4, lr}
 739              	.LCFI15:
 740              		.cfi_def_cfa_offset 8
 741              		.cfi_offset 4, -8
 742              		.cfi_offset 14, -4
 743 0002 86B0     		sub	sp, sp, #24
 744              	.LCFI16:
 745              		.cfi_def_cfa_offset 32
 101:Core/Src/spi.c ****   if(spiHandle->Instance==SPI1)
 746              		.loc 1 101 0
 747 0004 0023     		movs	r3, #0
 748 0006 0293     		str	r3, [sp, #8]
 749 0008 0393     		str	r3, [sp, #12]
 750 000a 0493     		str	r3, [sp, #16]
 751 000c 0593     		str	r3, [sp, #20]
 102:Core/Src/spi.c ****   {
 752              		.loc 1 102 0
 753 000e 0268     		ldr	r2, [r0]
 754 0010 164B     		ldr	r3, .L59
 755 0012 9A42     		cmp	r2, r3
 756 0014 27D1     		bne	.L56
 757              	.LBB2:
 108:Core/Src/spi.c ****   
 758              		.loc 1 108 0
 759 0016 03F56043 		add	r3, r3, #57344
 760 001a 9A69     		ldr	r2, [r3, #24]
 761 001c 42F48052 		orr	r2, r2, #4096
 762 0020 9A61     		str	r2, [r3, #24]
 763 0022 9A69     		ldr	r2, [r3, #24]
 764 0024 02F48052 		and	r2, r2, #4096
 765 0028 0092     		str	r2, [sp]
 766 002a 009A     		ldr	r2, [sp]
 767              	.LBE2:
 768              	.LBB3:
 110:Core/Src/spi.c ****     /**SPI1 GPIO Configuration    
 769              		.loc 1 110 0
 770 002c 9A69     		ldr	r2, [r3, #24]
 771 002e 42F00402 		orr	r2, r2, #4
 772 0032 9A61     		str	r2, [r3, #24]
 773 0034 9B69     		ldr	r3, [r3, #24]
 774 0036 03F00403 		and	r3, r3, #4
 775 003a 0193     		str	r3, [sp, #4]
 776 003c 019B     		ldr	r3, [sp, #4]
 777              	.LBE3:
 117:Core/Src/spi.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 778              		.loc 1 117 0
 779 003e A023     		movs	r3, #160
 780 0040 0293     		str	r3, [sp, #8]
 118:Core/Src/spi.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 781              		.loc 1 118 0
 782 0042 0223     		movs	r3, #2
 783 0044 0393     		str	r3, [sp, #12]
ARM GAS  /tmp/cc27mv2X.s 			page 23


 119:Core/Src/spi.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 784              		.loc 1 119 0
 785 0046 0323     		movs	r3, #3
 786 0048 0593     		str	r3, [sp, #20]
 120:Core/Src/spi.c **** 
 787              		.loc 1 120 0
 788 004a 094C     		ldr	r4, .L59+4
 789 004c 2046     		mov	r0, r4
 790              	.LVL94:
 791 004e 02A9     		add	r1, sp, #8
 792 0050 FFF7FEFF 		bl	HAL_GPIO_Init
 793              	.LVL95:
 122:Core/Src/spi.c ****     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 794              		.loc 1 122 0
 795 0054 4023     		movs	r3, #64
 796 0056 0293     		str	r3, [sp, #8]
 123:Core/Src/spi.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 797              		.loc 1 123 0
 798 0058 0023     		movs	r3, #0
 799 005a 0393     		str	r3, [sp, #12]
 124:Core/Src/spi.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800              		.loc 1 124 0
 801 005c 0493     		str	r3, [sp, #16]
 125:Core/Src/spi.c **** 
 802              		.loc 1 125 0
 803 005e 2046     		mov	r0, r4
 804 0060 02A9     		add	r1, sp, #8
 805 0062 FFF7FEFF 		bl	HAL_GPIO_Init
 806              	.LVL96:
 807              	.L56:
 131:Core/Src/spi.c **** 
 808              		.loc 1 131 0
 809 0066 06B0     		add	sp, sp, #24
 810              	.LCFI17:
 811              		.cfi_def_cfa_offset 8
 812              		@ sp needed
 813 0068 10BD     		pop	{r4, pc}
 814              	.L60:
 815 006a 00BF     		.align	2
 816              	.L59:
 817 006c 00300140 		.word	1073819648
 818 0070 00080140 		.word	1073809408
 819              		.cfi_endproc
 820              	.LFE64:
 822              		.section	.text.HAL_SPI_MspDeInit,"ax",%progbits
 823              		.align	2
 824              		.global	HAL_SPI_MspDeInit
 825              		.thumb
 826              		.thumb_func
 828              	HAL_SPI_MspDeInit:
 829              	.LFB65:
 134:Core/Src/spi.c **** 
 830              		.loc 1 134 0
 831              		.cfi_startproc
 832              		@ args = 0, pretend = 0, frame = 0
 833              		@ frame_needed = 0, uses_anonymous_args = 0
 834              	.LVL97:
ARM GAS  /tmp/cc27mv2X.s 			page 24


 835 0000 08B5     		push	{r3, lr}
 836              	.LCFI18:
 837              		.cfi_def_cfa_offset 8
 838              		.cfi_offset 3, -8
 839              		.cfi_offset 14, -4
 136:Core/Src/spi.c ****   {
 840              		.loc 1 136 0
 841 0002 0268     		ldr	r2, [r0]
 842 0004 064B     		ldr	r3, .L64
 843 0006 9A42     		cmp	r2, r3
 844 0008 08D1     		bne	.L61
 142:Core/Src/spi.c ****   
 845              		.loc 1 142 0
 846 000a 064A     		ldr	r2, .L64+4
 847 000c 9369     		ldr	r3, [r2, #24]
 848 000e 23F48053 		bic	r3, r3, #4096
 849 0012 9361     		str	r3, [r2, #24]
 150:Core/Src/spi.c **** 
 850              		.loc 1 150 0
 851 0014 0448     		ldr	r0, .L64+8
 852              	.LVL98:
 853 0016 E021     		movs	r1, #224
 854 0018 FFF7FEFF 		bl	HAL_GPIO_DeInit
 855              	.LVL99:
 856              	.L61:
 857 001c 08BD     		pop	{r3, pc}
 858              	.L65:
 859 001e 00BF     		.align	2
 860              	.L64:
 861 0020 00300140 		.word	1073819648
 862 0024 00100240 		.word	1073876992
 863 0028 00080140 		.word	1073809408
 864              		.cfi_endproc
 865              	.LFE65:
 867              		.section	.text.EEPROM_Test,"ax",%progbits
 868              		.align	2
 869              		.global	EEPROM_Test
 870              		.thumb
 871              		.thumb_func
 873              	EEPROM_Test:
 874              	.LFB66:
 160:Core/Src/spi.c ****   uint16_t i, len;
 875              		.loc 1 160 0
 876              		.cfi_startproc
 877              		@ args = 0, pretend = 0, frame = 0
 878              		@ frame_needed = 0, uses_anonymous_args = 0
 879 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 880              	.LCFI19:
 881              		.cfi_def_cfa_offset 24
 882              		.cfi_offset 4, -24
 883              		.cfi_offset 5, -20
 884              		.cfi_offset 6, -16
 885              		.cfi_offset 7, -12
 886              		.cfi_offset 8, -8
 887              		.cfi_offset 14, -4
 162:Core/Src/spi.c ****   for (i=0;i<len;i++)
 888              		.loc 1 162 0
ARM GAS  /tmp/cc27mv2X.s 			page 25


 889 0004 4248     		ldr	r0, .L76
 890 0006 FFF7FEFF 		bl	strlen
 891              	.LVL100:
 892 000a 85B2     		uxth	r5, r0
 893              	.LVL101:
 163:Core/Src/spi.c ****     sstBuf[i] = txBuf[i];
 894              		.loc 1 163 0
 895 000c 0023     		movs	r3, #0
 896 000e 05E0     		b	.L67
 897              	.LVL102:
 898              	.L68:
 164:Core/Src/spi.c ****   sstBuf[i] = '\0';
 899              		.loc 1 164 0 discriminator 3
 900 0010 3F4A     		ldr	r2, .L76
 901 0012 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 902 0014 3F4A     		ldr	r2, .L76+4
 903 0016 D154     		strb	r1, [r2, r3]
 163:Core/Src/spi.c ****     sstBuf[i] = txBuf[i];
 904              		.loc 1 163 0 discriminator 3
 905 0018 0133     		adds	r3, r3, #1
 906              	.LVL103:
 907 001a 9BB2     		uxth	r3, r3
 908              	.LVL104:
 909              	.L67:
 163:Core/Src/spi.c ****     sstBuf[i] = txBuf[i];
 910              		.loc 1 163 0 is_stmt 0 discriminator 1
 911 001c AB42     		cmp	r3, r5
 912 001e F7D3     		bcc	.L68
 165:Core/Src/spi.c ****   snprintf((char *)debugStr, 40, "txBuf is %s", txBuf);
 913              		.loc 1 165 0 is_stmt 1
 914 0020 DFF8F080 		ldr	r8, .L76+4
 915 0024 0024     		movs	r4, #0
 916 0026 08F80340 		strb	r4, [r8, r3]
 166:Core/Src/spi.c ****   tftprintf(debugStr);
 917              		.loc 1 166 0
 918 002a 3B4F     		ldr	r7, .L76+8
 919 002c 3846     		mov	r0, r7
 920 002e 2821     		movs	r1, #40
 921 0030 3A4A     		ldr	r2, .L76+12
 922 0032 374B     		ldr	r3, .L76
 923              	.LVL105:
 924 0034 FFF7FEFF 		bl	snprintf
 925              	.LVL106:
 167:Core/Src/spi.c ****   memset((char *)debugStr, 0, 40);
 926              		.loc 1 167 0
 927 0038 3846     		mov	r0, r7
 928 003a FFF7FEFF 		bl	tftprintf
 929              	.LVL107:
 168:Core/Src/spi.c **** 
 930              		.loc 1 168 0
 931 003e 3E46     		mov	r6, r7
 932 0040 46F8044B 		str	r4, [r6], #4
 933 0044 7C60     		str	r4, [r7, #4]
 934 0046 46F8044F 		str	r4, [r6, #4]!
 935 004a 46F8044F 		str	r4, [r6, #4]!
 936 004e 46F8044F 		str	r4, [r6, #4]!
 937 0052 46F8044F 		str	r4, [r6, #4]!
ARM GAS  /tmp/cc27mv2X.s 			page 26


 938 0056 46F8044F 		str	r4, [r6, #4]!
 939 005a 46F8044F 		str	r4, [r6, #4]!
 940 005e 46F8044F 		str	r4, [r6, #4]!
 941 0062 46F8044F 		str	r4, [r6, #4]!
 170:Core/Src/spi.c ****   tftprintf(debugStr);
 942              		.loc 1 170 0
 943 0066 3846     		mov	r0, r7
 944 0068 2821     		movs	r1, #40
 945 006a 2D4A     		ldr	r2, .L76+16
 946 006c 4346     		mov	r3, r8
 947 006e FFF7FEFF 		bl	snprintf
 948              	.LVL108:
 171:Core/Src/spi.c ****   memset((char *)debugStr, 0, 40);
 949              		.loc 1 171 0
 950 0072 3846     		mov	r0, r7
 951 0074 FFF7FEFF 		bl	tftprintf
 952              	.LVL109:
 172:Core/Src/spi.c ****   sst_wr_block(0, sstBuf, 20);
 953              		.loc 1 172 0
 954 0078 3B46     		mov	r3, r7
 955 007a 43F8044B 		str	r4, [r3], #4
 956 007e 7C60     		str	r4, [r7, #4]
 957 0080 0433     		adds	r3, r3, #4
 958 0082 43F8044B 		str	r4, [r3], #4
 959 0086 43F8044B 		str	r4, [r3], #4
 960 008a 43F8044B 		str	r4, [r3], #4
 961 008e 43F8044B 		str	r4, [r3], #4
 962 0092 43F8044B 		str	r4, [r3], #4
 963 0096 43F8044B 		str	r4, [r3], #4
 964 009a 1C60     		str	r4, [r3]
 965 009c 3460     		str	r4, [r6]
 173:Core/Src/spi.c ****   HAL_Delay(1000);
 966              		.loc 1 173 0
 967 009e 2046     		mov	r0, r4
 968 00a0 4146     		mov	r1, r8
 969 00a2 1422     		movs	r2, #20
 970 00a4 FFF7FEFF 		bl	sst_wr_block
 971              	.LVL110:
 174:Core/Src/spi.c ****   sst_rd_block(0, sstBuf, 20);
 972              		.loc 1 174 0
 973 00a8 4FF47A70 		mov	r0, #1000
 974 00ac FFF7FEFF 		bl	HAL_Delay
 975              	.LVL111:
 175:Core/Src/spi.c **** 
 976              		.loc 1 175 0
 977 00b0 2046     		mov	r0, r4
 978 00b2 4146     		mov	r1, r8
 979 00b4 1422     		movs	r2, #20
 980 00b6 FFF7FEFF 		bl	sst_rd_block
 981              	.LVL112:
 177:Core/Src/spi.c ****   tftprintf(debugStr);
 982              		.loc 1 177 0
 983 00ba 3846     		mov	r0, r7
 984 00bc 2821     		movs	r1, #40
 985 00be 194A     		ldr	r2, .L76+20
 986 00c0 4346     		mov	r3, r8
 987 00c2 FFF7FEFF 		bl	snprintf
ARM GAS  /tmp/cc27mv2X.s 			page 27


 988              	.LVL113:
 178:Core/Src/spi.c ****   uint16_t a=0;
 989              		.loc 1 178 0
 990 00c6 3846     		mov	r0, r7
 991 00c8 FFF7FEFF 		bl	tftprintf
 992              	.LVL114:
 179:Core/Src/spi.c ****   for(i=0; i<len;i++){
 993              		.loc 1 179 0
 994 00cc 2346     		mov	r3, r4
 180:Core/Src/spi.c ****    if(sstBuf[i]==txBuf[i]) a=1;     //读出的数据和测试数据进行比较， 以判别是否
 995              		.loc 1 180 0
 996 00ce 2046     		mov	r0, r4
 997 00d0 0BE0     		b	.L69
 998              	.LVL115:
 999              	.L71:
 181:Core/Src/spi.c ****    else {a=0; i=len;}
 1000              		.loc 1 181 0
 1001 00d2 104B     		ldr	r3, .L76+4
 1002              	.LVL116:
 1003 00d4 1A5C     		ldrb	r2, [r3, r0]	@ zero_extendqisi2
 1004 00d6 0E4B     		ldr	r3, .L76
 1005 00d8 1B5C     		ldrb	r3, [r3, r0]	@ zero_extendqisi2
 1006 00da 9A42     		cmp	r2, r3
 1007 00dc 01D1     		bne	.L74
 1008 00de 0123     		movs	r3, #1
 1009 00e0 01E0     		b	.L70
 1010              	.L74:
 182:Core/Src/spi.c ****   }
 1011              		.loc 1 182 0
 1012 00e2 2846     		mov	r0, r5
 1013              	.LVL117:
 1014 00e4 0023     		movs	r3, #0
 1015              	.L70:
 1016              	.LVL118:
 180:Core/Src/spi.c ****    if(sstBuf[i]==txBuf[i]) a=1;     //读出的数据和测试数据进行比较， 以判别是否
 1017              		.loc 1 180 0 discriminator 2
 1018 00e6 0130     		adds	r0, r0, #1
 1019              	.LVL119:
 1020 00e8 80B2     		uxth	r0, r0
 1021              	.LVL120:
 1022              	.L69:
 180:Core/Src/spi.c ****    if(sstBuf[i]==txBuf[i]) a=1;     //读出的数据和测试数据进行比较， 以判别是否
 1023              		.loc 1 180 0 is_stmt 0 discriminator 1
 1024 00ea A842     		cmp	r0, r5
 1025 00ec F1D3     		bcc	.L71
 184:Core/Src/spi.c ****     HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 1026              		.loc 1 184 0 is_stmt 1
 1027 00ee 4BB1     		cbz	r3, .L72
 185:Core/Src/spi.c ****     tftprintf(sstBuf);   //将读出的数据通过串口输出  
 1028              		.loc 1 185 0
 1029 00f0 0D48     		ldr	r0, .L76+24
 1030              	.LVL121:
 1031 00f2 2021     		movs	r1, #32
 1032 00f4 0122     		movs	r2, #1
 1033 00f6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1034              	.LVL122:
 186:Core/Src/spi.c ****   } else {
ARM GAS  /tmp/cc27mv2X.s 			page 28


 1035              		.loc 1 186 0
 1036 00fa 0648     		ldr	r0, .L76+4
 1037 00fc FFF7FEFF 		bl	tftprintf
 1038              	.LVL123:
 1039 0100 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1040              	.LVL124:
 1041              	.L72:
 188:Core/Src/spi.c ****   }
 1042              		.loc 1 188 0
 1043 0104 0948     		ldr	r0, .L76+28
 1044              	.LVL125:
 1045 0106 FFF7FEFF 		bl	tftprintf
 1046              	.LVL126:
 1047 010a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1048              	.LVL127:
 1049              	.L77:
 1050 010e 00BF     		.align	2
 1051              	.L76:
 1052 0110 00000000 		.word	.LANCHOR0
 1053 0114 00000000 		.word	.LANCHOR1
 1054 0118 00000000 		.word	.LANCHOR2
 1055 011c 00000000 		.word	.LC0
 1056 0120 0C000000 		.word	.LC1
 1057 0124 1C000000 		.word	.LC2
 1058 0128 000C0140 		.word	1073810432
 1059 012c 2C000000 		.word	.LC3
 1060              		.cfi_endproc
 1061              	.LFE66:
 1063              		.comm	hspi1,88,4
 1064              		.section	.rodata.str1.4,"aMS",%progbits,1
 1065              		.align	2
 1066              	.LC0:
 1067 0000 74784275 		.ascii	"txBuf is %s\000"
 1067      66206973 
 1067      20257300 
 1068              	.LC1:
 1069 000c 73737442 		.ascii	"sstBuf p is %s\000"
 1069      75662070 
 1069      20697320 
 1069      257300
 1070 001b 00       		.space	1
 1071              	.LC2:
 1072 001c 73737442 		.ascii	"sstBuf a is %s\000"
 1072      75662061 
 1072      20697320 
 1072      257300
 1073 002b 00       		.space	1
 1074              	.LC3:
 1075 002c 73737420 		.ascii	"sst test failed\000"
 1075      74657374 
 1075      20666169 
 1075      6C656400 
 1076              		.section	.bss.sstBuf,"aw",%nobits
 1077              		.align	2
 1078              		.set	.LANCHOR1,. + 0
 1081              	sstBuf:
 1082 0000 00000000 		.space	20
ARM GAS  /tmp/cc27mv2X.s 			page 29


 1082      00000000 
 1082      00000000 
 1082      00000000 
 1082      00000000 
 1083              		.section	.data.txBuf,"aw",%progbits
 1084              		.align	2
 1085              		.set	.LANCHOR0,. + 0
 1088              	txBuf:
 1089 0000 53504920 		.ascii	"SPI SST25 Demo\000"
 1089      53535432 
 1089      35204465 
 1089      6D6F00
 1090 000f 00000000 		.space	5
 1090      00
 1091              		.section	.bss.debugStr,"aw",%nobits
 1092              		.align	2
 1093              		.set	.LANCHOR2,. + 0
 1096              	debugStr:
 1097 0000 00000000 		.space	40
 1097      00000000 
 1097      00000000 
 1097      00000000 
 1097      00000000 
 1098              		.text
 1099              	.Letext0:
 1100              		.file 2 "/opt/gcc-arm-none-eabi-4_9-2015q3/arm-none-eabi/include/machine/_default_types.h"
 1101              		.file 3 "/opt/gcc-arm-none-eabi-4_9-2015q3/arm-none-eabi/include/sys/_stdint.h"
 1102              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 1103              		.file 5 "/opt/gcc-arm-none-eabi-4_9-2015q3/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 1104              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1105              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1106              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1107              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 1108              		.file 10 "Drivers/CMSIS/Include/core_cm3.h"
 1109              		.file 11 "/opt/gcc-arm-none-eabi-4_9-2015q3/arm-none-eabi/include/string.h"
 1110              		.file 12 "/opt/gcc-arm-none-eabi-4_9-2015q3/arm-none-eabi/include/stdio.h"
 1111              		.file 13 "Core/Inc/usart.h"
 1112              		.file 14 "Core/Inc/main.h"
 1113              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/cc27mv2X.s 			page 30


DEFINED SYMBOLS
                            *ABS*:00000000 spi.c
     /tmp/cc27mv2X.s:19     .text.SPI_Flash_SendByte:00000000 $t
     /tmp/cc27mv2X.s:23     .text.SPI_Flash_SendByte:00000000 SPI_Flash_SendByte
     /tmp/cc27mv2X.s:66     .text.SPI_Flash_SendByte:0000002c $d
                            *COM*:00000058 hspi1
     /tmp/cc27mv2X.s:71     .text.wen:00000000 $t
     /tmp/cc27mv2X.s:75     .text.wen:00000000 wen
     /tmp/cc27mv2X.s:107    .text.wen:00000020 $d
     /tmp/cc27mv2X.s:112    .text.SPI_Flash_ReadByte:00000000 $t
     /tmp/cc27mv2X.s:116    .text.SPI_Flash_ReadByte:00000000 SPI_Flash_ReadByte
     /tmp/cc27mv2X.s:153    .text.SPI_Flash_ReadByte:00000028 $d
     /tmp/cc27mv2X.s:158    .text.rdsr:00000000 $t
     /tmp/cc27mv2X.s:162    .text.rdsr:00000000 rdsr
     /tmp/cc27mv2X.s:204    .text.rdsr:00000028 $d
     /tmp/cc27mv2X.s:209    .text.wip:00000000 $t
     /tmp/cc27mv2X.s:213    .text.wip:00000000 wip
     /tmp/cc27mv2X.s:244    .text.wsr:00000000 $t
     /tmp/cc27mv2X.s:248    .text.wsr:00000000 wsr
     /tmp/cc27mv2X.s:303    .text.wsr:00000044 $d
     /tmp/cc27mv2X.s:308    .text.sect_clr:00000000 $t
     /tmp/cc27mv2X.s:312    .text.sect_clr:00000000 sect_clr
     /tmp/cc27mv2X.s:370    .text.sect_clr:00000044 $d
     /tmp/cc27mv2X.s:375    .text.wdis:00000000 $t
     /tmp/cc27mv2X.s:379    .text.wdis:00000000 wdis
     /tmp/cc27mv2X.s:414    .text.wdis:00000024 $d
     /tmp/cc27mv2X.s:419    .text.sst_wr_block:00000000 $t
     /tmp/cc27mv2X.s:423    .text.sst_wr_block:00000000 sst_wr_block
     /tmp/cc27mv2X.s:569    .text.sst_wr_block:000000b4 $d
     /tmp/cc27mv2X.s:574    .text.sst_rd_block:00000000 $t
     /tmp/cc27mv2X.s:578    .text.sst_rd_block:00000000 sst_rd_block
     /tmp/cc27mv2X.s:654    .text.sst_rd_block:00000050 $d
     /tmp/cc27mv2X.s:659    .text.MX_SPI1_Init:00000000 $t
     /tmp/cc27mv2X.s:664    .text.MX_SPI1_Init:00000000 MX_SPI1_Init
     /tmp/cc27mv2X.s:720    .text.MX_SPI1_Init:0000003c $d
     /tmp/cc27mv2X.s:726    .text.HAL_SPI_MspInit:00000000 $t
     /tmp/cc27mv2X.s:731    .text.HAL_SPI_MspInit:00000000 HAL_SPI_MspInit
     /tmp/cc27mv2X.s:817    .text.HAL_SPI_MspInit:0000006c $d
     /tmp/cc27mv2X.s:823    .text.HAL_SPI_MspDeInit:00000000 $t
     /tmp/cc27mv2X.s:828    .text.HAL_SPI_MspDeInit:00000000 HAL_SPI_MspDeInit
     /tmp/cc27mv2X.s:861    .text.HAL_SPI_MspDeInit:00000020 $d
     /tmp/cc27mv2X.s:868    .text.EEPROM_Test:00000000 $t
     /tmp/cc27mv2X.s:873    .text.EEPROM_Test:00000000 EEPROM_Test
     /tmp/cc27mv2X.s:1052   .text.EEPROM_Test:00000110 $d
     /tmp/cc27mv2X.s:1065   .rodata.str1.4:00000000 $d
     /tmp/cc27mv2X.s:1077   .bss.sstBuf:00000000 $d
     /tmp/cc27mv2X.s:1081   .bss.sstBuf:00000000 sstBuf
     /tmp/cc27mv2X.s:1084   .data.txBuf:00000000 $d
     /tmp/cc27mv2X.s:1088   .data.txBuf:00000000 txBuf
     /tmp/cc27mv2X.s:1092   .bss.debugStr:00000000 $d
     /tmp/cc27mv2X.s:1096   .bss.debugStr:00000000 debugStr
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_SPI_GetState
HAL_SPI_Transmit
HAL_GPIO_WritePin
ARM GAS  /tmp/cc27mv2X.s 			page 31


HAL_SPI_Receive
HAL_SPI_Init
Error_Handler
HAL_GPIO_Init
HAL_GPIO_DeInit
strlen
snprintf
tftprintf
HAL_Delay
