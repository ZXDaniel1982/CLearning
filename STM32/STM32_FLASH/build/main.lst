ARM GAS  /tmp/ccqHBNOB.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.SystemClock_Config,"ax",%progbits
  19              		.align	2
  20              		.global	SystemClock_Config
  21              		.thumb
  22              		.thumb_func
  24              	SystemClock_Config:
  25              	.LFB64:
  26              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * This notice applies to any and all portions of this file
   8:Core/Src/main.c ****   * that are not between comment pairs USER CODE BEGIN and
   9:Core/Src/main.c ****   * USER CODE END. Other portions of this file, whether 
  10:Core/Src/main.c ****   * inserted by the user or by software development tools
  11:Core/Src/main.c ****   * are owned by their respective copyright owners.
  12:Core/Src/main.c ****   *
  13:Core/Src/main.c ****   * Copyright (c) 2018 STMicroelectronics International N.V. 
  14:Core/Src/main.c ****   * All rights reserved.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   * Redistribution and use in source and binary forms, with or without 
  17:Core/Src/main.c ****   * modification, are permitted, provided that the following conditions are met:
  18:Core/Src/main.c ****   *
  19:Core/Src/main.c ****   * 1. Redistribution of source code must retain the above copyright notice, 
  20:Core/Src/main.c ****   *    this list of conditions and the following disclaimer.
  21:Core/Src/main.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Core/Src/main.c ****   *    this list of conditions and the following disclaimer in the documentation
  23:Core/Src/main.c ****   *    and/or other materials provided with the distribution.
  24:Core/Src/main.c ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  25:Core/Src/main.c ****   *    contributors to this software may be used to endorse or promote products 
  26:Core/Src/main.c ****   *    derived from this software without specific written permission.
  27:Core/Src/main.c ****   * 4. This software, including modifications and/or derivative works of this 
  28:Core/Src/main.c ****   *    software, must execute solely and exclusively on microcontroller or
  29:Core/Src/main.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Core/Src/main.c ****   * 5. Redistribution and use of this software other than as permitted under 
  31:Core/Src/main.c ****   *    this license is void and will automatically terminate your rights under 
  32:Core/Src/main.c ****   *    this license. 
ARM GAS  /tmp/ccqHBNOB.s 			page 2


  33:Core/Src/main.c ****   *
  34:Core/Src/main.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  35:Core/Src/main.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  36:Core/Src/main.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  37:Core/Src/main.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Core/Src/main.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  39:Core/Src/main.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Core/Src/main.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Core/Src/main.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  42:Core/Src/main.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  43:Core/Src/main.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  44:Core/Src/main.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Core/Src/main.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Core/Src/main.c ****   *
  47:Core/Src/main.c ****   ******************************************************************************
  48:Core/Src/main.c ****   */
  49:Core/Src/main.c **** /* USER CODE END Header */
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  52:Core/Src/main.c **** #include "main.h"
  53:Core/Src/main.c **** #include "fatfs.h"
  54:Core/Src/main.c **** #include "spi.h"
  55:Core/Src/main.c **** #include "usart.h"
  56:Core/Src/main.c **** #include "gpio.h"
  57:Core/Src/main.c **** #include "fsmc.h"
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  60:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* USER CODE END Includes */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  65:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* USER CODE END PTD */
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  70:Core/Src/main.c **** /* USER CODE BEGIN PD */
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** /* USER CODE END PD */
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  75:Core/Src/main.c **** /* USER CODE BEGIN PM */
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** /* USER CODE END PM */
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** /* USER CODE BEGIN PV */
  82:Core/Src/main.c **** 
  83:Core/Src/main.c **** /* USER CODE END PV */
  84:Core/Src/main.c **** 
  85:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  86:Core/Src/main.c **** void SystemClock_Config(void);
  87:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  88:Core/Src/main.c **** 
  89:Core/Src/main.c **** /* USER CODE END PFP */
ARM GAS  /tmp/ccqHBNOB.s 			page 3


  90:Core/Src/main.c **** 
  91:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  92:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c **** /* USER CODE END 0 */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c **** /**
  97:Core/Src/main.c ****   * @brief  The application entry point.
  98:Core/Src/main.c ****   * @retval int
  99:Core/Src/main.c ****   */
 100:Core/Src/main.c **** int main(void)
 101:Core/Src/main.c **** {
 102:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* USER CODE END 1 */
 105:Core/Src/main.c **** 
 106:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 109:Core/Src/main.c ****   HAL_Init();
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 112:Core/Src/main.c **** 
 113:Core/Src/main.c ****   /* USER CODE END Init */
 114:Core/Src/main.c **** 
 115:Core/Src/main.c ****   /* Configure the system clock */
 116:Core/Src/main.c ****   SystemClock_Config();
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 119:Core/Src/main.c **** 
 120:Core/Src/main.c ****   /* USER CODE END SysInit */
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****   /* Initialize all configured peripherals */
 123:Core/Src/main.c ****   MX_GPIO_Init();
 124:Core/Src/main.c ****   MX_SPI1_Init();
 125:Core/Src/main.c ****   MX_USART1_UART_Init();
 126:Core/Src/main.c ****   MX_FATFS_Init();
 127:Core/Src/main.c ****   MX_FSMC_Init();
 128:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****   /* USER CODE END 2 */
 131:Core/Src/main.c **** 
 132:Core/Src/main.c ****   /* Infinite loop */
 133:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 134:Core/Src/main.c ****   while (1)
 135:Core/Src/main.c ****   {
 136:Core/Src/main.c ****     /* USER CODE END WHILE */
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 139:Core/Src/main.c ****   }
 140:Core/Src/main.c ****   /* USER CODE END 3 */
 141:Core/Src/main.c **** }
 142:Core/Src/main.c **** 
 143:Core/Src/main.c **** /**
 144:Core/Src/main.c ****   * @brief System Clock Configuration
 145:Core/Src/main.c ****   * @retval None
 146:Core/Src/main.c ****   */
ARM GAS  /tmp/ccqHBNOB.s 			page 4


 147:Core/Src/main.c **** void SystemClock_Config(void)
 148:Core/Src/main.c **** {
  27              		.loc 1 148 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 64
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 30B5     		push	{r4, r5, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 12
  34              		.cfi_offset 4, -12
  35              		.cfi_offset 5, -8
  36              		.cfi_offset 14, -4
  37 0002 91B0     		sub	sp, sp, #68
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 80
 149:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  40              		.loc 1 149 0
  41 0004 0024     		movs	r4, #0
  42 0006 0894     		str	r4, [sp, #32]
  43 0008 0994     		str	r4, [sp, #36]
  44 000a 0B94     		str	r4, [sp, #44]
  45 000c 0C94     		str	r4, [sp, #48]
 150:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  46              		.loc 1 150 0
  47 000e 0194     		str	r4, [sp, #4]
  48 0010 0294     		str	r4, [sp, #8]
  49 0012 0394     		str	r4, [sp, #12]
  50 0014 0494     		str	r4, [sp, #16]
  51 0016 0594     		str	r4, [sp, #20]
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****   /**Initializes the CPU, AHB and APB busses clocks 
 153:Core/Src/main.c ****   */
 154:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  52              		.loc 1 154 0
  53 0018 0122     		movs	r2, #1
  54 001a 0692     		str	r2, [sp, #24]
 155:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  55              		.loc 1 155 0
  56 001c 4FF48033 		mov	r3, #65536
  57 0020 0793     		str	r3, [sp, #28]
 156:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 157:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  58              		.loc 1 157 0
  59 0022 0A92     		str	r2, [sp, #40]
 158:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  60              		.loc 1 158 0
  61 0024 0225     		movs	r5, #2
  62 0026 0D95     		str	r5, [sp, #52]
 159:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  63              		.loc 1 159 0
  64 0028 0E93     		str	r3, [sp, #56]
 160:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  65              		.loc 1 160 0
  66 002a 4FF4E013 		mov	r3, #1835008
  67 002e 0F93     		str	r3, [sp, #60]
 161:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  68              		.loc 1 161 0
ARM GAS  /tmp/ccqHBNOB.s 			page 5


  69 0030 06A8     		add	r0, sp, #24
  70 0032 FFF7FEFF 		bl	HAL_RCC_OscConfig
  71              	.LVL0:
 162:Core/Src/main.c ****   {
 163:Core/Src/main.c ****     Error_Handler();
 164:Core/Src/main.c ****   }
 165:Core/Src/main.c ****   /**Initializes the CPU, AHB and APB busses clocks 
 166:Core/Src/main.c ****   */
 167:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
  72              		.loc 1 167 0
  73 0036 0F23     		movs	r3, #15
  74 0038 0193     		str	r3, [sp, #4]
 168:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 169:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  75              		.loc 1 169 0
  76 003a 0295     		str	r5, [sp, #8]
 170:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  77              		.loc 1 170 0
  78 003c 0394     		str	r4, [sp, #12]
 171:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  79              		.loc 1 171 0
  80 003e 4FF48063 		mov	r3, #1024
  81 0042 0493     		str	r3, [sp, #16]
 172:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  82              		.loc 1 172 0
  83 0044 0594     		str	r4, [sp, #20]
 173:Core/Src/main.c **** 
 174:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  84              		.loc 1 174 0
  85 0046 01A8     		add	r0, sp, #4
  86 0048 2946     		mov	r1, r5
  87 004a FFF7FEFF 		bl	HAL_RCC_ClockConfig
  88              	.LVL1:
 175:Core/Src/main.c ****   {
 176:Core/Src/main.c ****     Error_Handler();
 177:Core/Src/main.c ****   }
 178:Core/Src/main.c **** }
  89              		.loc 1 178 0
  90 004e 11B0     		add	sp, sp, #68
  91              	.LCFI2:
  92              		.cfi_def_cfa_offset 12
  93              		@ sp needed
  94 0050 30BD     		pop	{r4, r5, pc}
  95              		.cfi_endproc
  96              	.LFE64:
  98 0052 00BF     		.section	.text.main,"ax",%progbits
  99              		.align	2
 100              		.global	main
 101              		.thumb
 102              		.thumb_func
 104              	main:
 105              	.LFB63:
 101:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 106              		.loc 1 101 0
 107              		.cfi_startproc
 108              		@ Volatile: function does not return.
 109              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccqHBNOB.s 			page 6


 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111 0000 08B5     		push	{r3, lr}
 112              	.LCFI3:
 113              		.cfi_def_cfa_offset 8
 114              		.cfi_offset 3, -8
 115              		.cfi_offset 14, -4
 109:Core/Src/main.c **** 
 116              		.loc 1 109 0
 117 0002 FFF7FEFF 		bl	HAL_Init
 118              	.LVL2:
 116:Core/Src/main.c **** 
 119              		.loc 1 116 0
 120 0006 FFF7FEFF 		bl	SystemClock_Config
 121              	.LVL3:
 123:Core/Src/main.c ****   MX_SPI1_Init();
 122              		.loc 1 123 0
 123 000a FFF7FEFF 		bl	MX_GPIO_Init
 124              	.LVL4:
 124:Core/Src/main.c ****   MX_USART1_UART_Init();
 125              		.loc 1 124 0
 126 000e FFF7FEFF 		bl	MX_SPI1_Init
 127              	.LVL5:
 125:Core/Src/main.c ****   MX_FATFS_Init();
 128              		.loc 1 125 0
 129 0012 FFF7FEFF 		bl	MX_USART1_UART_Init
 130              	.LVL6:
 126:Core/Src/main.c ****   MX_FSMC_Init();
 131              		.loc 1 126 0
 132 0016 FFF7FEFF 		bl	MX_FATFS_Init
 133              	.LVL7:
 127:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 134              		.loc 1 127 0
 135 001a FFF7FEFF 		bl	MX_FSMC_Init
 136              	.LVL8:
 137              	.L4:
 139:Core/Src/main.c ****   /* USER CODE END 3 */
 138              		.loc 1 139 0 discriminator 1
 139 001e FEE7     		b	.L4
 140              		.cfi_endproc
 141              	.LFE63:
 143              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 144              		.align	2
 145              		.global	HAL_TIM_PeriodElapsedCallback
 146              		.thumb
 147              		.thumb_func
 149              	HAL_TIM_PeriodElapsedCallback:
 150              	.LFB65:
 179:Core/Src/main.c **** 
 180:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 181:Core/Src/main.c **** 
 182:Core/Src/main.c **** /* USER CODE END 4 */
 183:Core/Src/main.c **** 
 184:Core/Src/main.c **** /**
 185:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 186:Core/Src/main.c ****   * @note   This function is called  when TIM1 interrupt took place, inside
 187:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 188:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
ARM GAS  /tmp/ccqHBNOB.s 			page 7


 189:Core/Src/main.c ****   * @param  htim : TIM handle
 190:Core/Src/main.c ****   * @retval None
 191:Core/Src/main.c ****   */
 192:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 193:Core/Src/main.c **** {
 151              		.loc 1 193 0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
 155              	.LVL9:
 156 0000 08B5     		push	{r3, lr}
 157              	.LCFI4:
 158              		.cfi_def_cfa_offset 8
 159              		.cfi_offset 3, -8
 160              		.cfi_offset 14, -4
 194:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 197:Core/Src/main.c ****   if (htim->Instance == TIM1) {
 161              		.loc 1 197 0
 162 0002 0268     		ldr	r2, [r0]
 163 0004 024B     		ldr	r3, .L9
 164 0006 9A42     		cmp	r2, r3
 165 0008 01D1     		bne	.L6
 198:Core/Src/main.c ****     HAL_IncTick();
 166              		.loc 1 198 0
 167 000a FFF7FEFF 		bl	HAL_IncTick
 168              	.LVL10:
 169              	.L6:
 170 000e 08BD     		pop	{r3, pc}
 171              	.L10:
 172              		.align	2
 173              	.L9:
 174 0010 002C0140 		.word	1073818624
 175              		.cfi_endproc
 176              	.LFE65:
 178              		.section	.text.Error_Handler,"ax",%progbits
 179              		.align	2
 180              		.global	Error_Handler
 181              		.thumb
 182              		.thumb_func
 184              	Error_Handler:
 185              	.LFB66:
 199:Core/Src/main.c ****   }
 200:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 201:Core/Src/main.c **** 
 202:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 203:Core/Src/main.c **** }
 204:Core/Src/main.c **** 
 205:Core/Src/main.c **** /**
 206:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 207:Core/Src/main.c ****   * @retval None
 208:Core/Src/main.c ****   */
 209:Core/Src/main.c **** void Error_Handler(void)
 210:Core/Src/main.c **** {
 186              		.loc 1 210 0
 187              		.cfi_startproc
ARM GAS  /tmp/ccqHBNOB.s 			page 8


 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190              		@ link register save eliminated.
 191 0000 7047     		bx	lr
 192              		.cfi_endproc
 193              	.LFE66:
 195 0002 00BF     		.text
 196              	.Letext0:
 197              		.file 2 "/opt/gcc-arm-none-eabi-4_9-2015q3/arm-none-eabi/include/machine/_default_types.h"
 198              		.file 3 "/opt/gcc-arm-none-eabi-4_9-2015q3/arm-none-eabi/include/sys/_stdint.h"
 199              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 200              		.file 5 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 201              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 202              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 203              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 204              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 205              		.file 10 "Core/Inc/gpio.h"
 206              		.file 11 "Core/Inc/spi.h"
 207              		.file 12 "Core/Inc/usart.h"
 208              		.file 13 "FATFS/App/fatfs.h"
 209              		.file 14 "Core/Inc/fsmc.h"
 210              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 211              		.file 16 "Drivers/CMSIS/Include/core_cm3.h"
ARM GAS  /tmp/ccqHBNOB.s 			page 9


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccqHBNOB.s:19     .text.SystemClock_Config:00000000 $t
     /tmp/ccqHBNOB.s:24     .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccqHBNOB.s:99     .text.main:00000000 $t
     /tmp/ccqHBNOB.s:104    .text.main:00000000 main
     /tmp/ccqHBNOB.s:144    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
     /tmp/ccqHBNOB.s:149    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccqHBNOB.s:174    .text.HAL_TIM_PeriodElapsedCallback:00000010 $d
     /tmp/ccqHBNOB.s:179    .text.Error_Handler:00000000 $t
     /tmp/ccqHBNOB.s:184    .text.Error_Handler:00000000 Error_Handler
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_SPI1_Init
MX_USART1_UART_Init
MX_FATFS_Init
MX_FSMC_Init
HAL_IncTick
