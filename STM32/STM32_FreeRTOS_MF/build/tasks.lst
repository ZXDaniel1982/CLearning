ARM GAS  /tmp/ccNFblrO.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"tasks.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  23              	prvTaskIsTaskSuspended:
  24              	.LFB14:
  25              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.1.0
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
ARM GAS  /tmp/ccNFblrO.s 			page 2


  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
ARM GAS  /tmp/ccNFblrO.s 			page 3


  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccNFblrO.s 			page 4


 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
ARM GAS  /tmp/ccNFblrO.s 			page 5


 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
ARM GAS  /tmp/ccNFblrO.s 			page 6


 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct TaskControlBlock_t
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
ARM GAS  /tmp/ccNFblrO.s 			page 7


 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
ARM GAS  /tmp/ccNFblrO.s 			page 8


 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
ARM GAS  /tmp/ccNFblrO.s 			page 9


 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
ARM GAS  /tmp/ccNFblrO.s 			page 10


 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccNFblrO.s 			page 11


 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccNFblrO.s 			page 12


 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
ARM GAS  /tmp/ccNFblrO.s 			page 13


 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
ARM GAS  /tmp/ccNFblrO.s 			page 14


 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccNFblrO.s 			page 15


 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
ARM GAS  /tmp/ccNFblrO.s 			page 16


 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pcName );
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
ARM GAS  /tmp/ccNFblrO.s 			page 17


 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == ( char ) 0x00 )
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
ARM GAS  /tmp/ccNFblrO.s 			page 18


 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccNFblrO.s 			page 19


1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
ARM GAS  /tmp/ccNFblrO.s 			page 20


1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccNFblrO.s 			page 21


1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccNFblrO.s 			page 22


1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
ARM GAS  /tmp/ccNFblrO.s 			page 23


1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccNFblrO.s 			page 24


1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
ARM GAS  /tmp/ccNFblrO.s 			page 25


1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccNFblrO.s 			page 26


1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
ARM GAS  /tmp/ccNFblrO.s 			page 27


1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccNFblrO.s 			page 28


1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
ARM GAS  /tmp/ccNFblrO.s 			page 29


1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccNFblrO.s 			page 30


1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccNFblrO.s 			page 31


1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccNFblrO.s 			page 32


1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  26              		.loc 1 1756 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  32              		.loc 1 1764 0
  33 0000 40B9     		cbnz	r0, .L2
  34              	.LBB100:
  35              	.LBB101:
  36              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.1.0
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
ARM GAS  /tmp/ccNFblrO.s 			page 33


  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
ARM GAS  /tmp/ccNFblrO.s 			page 34


  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
ARM GAS  /tmp/ccNFblrO.s 			page 35


 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
  37              		.loc 2 195 0
ARM GAS  /tmp/ccNFblrO.s 			page 36


  38              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
  39 0002 4FF05003 			mov r3, #80												
  40 0006 83F31188 		msr basepri, r3											
  41 000a BFF36F8F 		isb														
  42 000e BFF34F8F 		dsb														
  43              	
  44              	@ 0 "" 2
  45              	.LVL1:
  46              		.thumb
  47              	.L3:
  48              	.LBE101:
  49              	.LBE100:
  50              		.loc 1 1764 0 discriminator 1
  51 0012 FEE7     		b	.L3
  52              	.L2:
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  53              		.loc 1 1767 0
  54 0014 4169     		ldr	r1, [r0, #20]
  55 0016 084A     		ldr	r2, .L8
  56 0018 9142     		cmp	r1, r2
  57 001a 06D1     		bne	.L5
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  58              		.loc 1 1770 0
  59 001c 836A     		ldr	r3, [r0, #40]
  60 001e 074A     		ldr	r2, .L8+4
  61 0020 9342     		cmp	r3, r2
  62 0022 04D0     		beq	.L6
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  63              		.loc 1 1774 0
  64 0024 2BB1     		cbz	r3, .L7
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  65              		.loc 1 1757 0
  66 0026 0020     		movs	r0, #0
  67              	.LVL2:
  68 0028 7047     		bx	lr
  69              	.LVL3:
  70              	.L5:
  71 002a 0020     		movs	r0, #0
  72              	.LVL4:
  73 002c 7047     		bx	lr
  74              	.LVL5:
  75              	.L6:
  76 002e 0020     		movs	r0, #0
  77              	.LVL6:
  78 0030 7047     		bx	lr
  79              	.LVL7:
  80              	.L7:
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  81              		.loc 1 1776 0
ARM GAS  /tmp/ccNFblrO.s 			page 37


  82 0032 0120     		movs	r0, #1
  83              	.LVL8:
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  84              		.loc 1 1794 0
  85 0034 7047     		bx	lr
  86              	.L9:
  87 0036 00BF     		.align	2
  88              	.L8:
  89 0038 00000000 		.word	.LANCHOR0
  90 003c 00000000 		.word	.LANCHOR1
  91              		.cfi_endproc
  92              	.LFE14:
  94              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
  95              		.align	2
  96              		.thumb
  97              		.thumb_func
  99              	prvResetNextTaskUnblockTime:
 100              	.LFB39:
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
ARM GAS  /tmp/ccNFblrO.s 			page 38


1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
ARM GAS  /tmp/ccNFblrO.s 			page 39


1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
ARM GAS  /tmp/ccNFblrO.s 			page 40


1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccNFblrO.s 			page 41


1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/ccNFblrO.s 			page 42


2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccNFblrO.s 			page 43


2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
ARM GAS  /tmp/ccNFblrO.s 			page 44


2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
ARM GAS  /tmp/ccNFblrO.s 			page 45


2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
ARM GAS  /tmp/ccNFblrO.s 			page 46


2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
ARM GAS  /tmp/ccNFblrO.s 			page 47


2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccNFblrO.s 			page 48


2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccNFblrO.s 			page 49


2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccNFblrO.s 			page 50


2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
ARM GAS  /tmp/ccNFblrO.s 			page 51


2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
ARM GAS  /tmp/ccNFblrO.s 			page 52


2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
ARM GAS  /tmp/ccNFblrO.s 			page 53


2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
ARM GAS  /tmp/ccNFblrO.s 			page 54


2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccNFblrO.s 			page 55


2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  /tmp/ccNFblrO.s 			page 56


2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
ARM GAS  /tmp/ccNFblrO.s 			page 57


2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/count
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution t
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccNFblrO.s 			page 58


2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccNFblrO.s 			page 59


3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
ARM GAS  /tmp/ccNFblrO.s 			page 60


3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
ARM GAS  /tmp/ccNFblrO.s 			page 61


3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccNFblrO.s 			page 62


3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
ARM GAS  /tmp/ccNFblrO.s 			page 63


3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
ARM GAS  /tmp/ccNFblrO.s 			page 64


3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
ARM GAS  /tmp/ccNFblrO.s 			page 65


3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccNFblrO.s 			page 66


3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
ARM GAS  /tmp/ccNFblrO.s 			page 67


3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;	/*< Delayed tasks. */
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;	/*< Delayed tasks (two lists are used - one for de
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccNFblrO.s 			page 68


3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccNFblrO.s 			page 69


3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
ARM GAS  /tmp/ccNFblrO.s 			page 70


3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
ARM GAS  /tmp/ccNFblrO.s 			page 71


3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
ARM GAS  /tmp/ccNFblrO.s 			page 72


3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 101              		.loc 1 3785 0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105              		@ link register save eliminated.
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 106              		.loc 1 3788 0
 107 0000 084B     		ldr	r3, .L13
 108 0002 1B68     		ldr	r3, [r3]
 109 0004 1B68     		ldr	r3, [r3]
 110 0006 23B9     		cbnz	r3, .L11
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 111              		.loc 1 3794 0
 112 0008 4FF0FF32 		mov	r2, #-1
 113 000c 064B     		ldr	r3, .L13+4
 114 000e 1A60     		str	r2, [r3]
 115 0010 7047     		bx	lr
 116              	.L11:
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccNFblrO.s 			page 73


3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
 117              		.loc 1 3802 0
 118 0012 044B     		ldr	r3, .L13
 119 0014 1B68     		ldr	r3, [r3]
 120 0016 DB68     		ldr	r3, [r3, #12]
 121 0018 DB68     		ldr	r3, [r3, #12]
 122              	.LVL9:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 123              		.loc 1 3803 0
 124 001a 5A68     		ldr	r2, [r3, #4]
 125 001c 024B     		ldr	r3, .L13+4
 126              	.LVL10:
 127 001e 1A60     		str	r2, [r3]
 128 0020 7047     		bx	lr
 129              	.L14:
 130 0022 00BF     		.align	2
 131              	.L13:
 132 0024 00000000 		.word	.LANCHOR2
 133 0028 00000000 		.word	.LANCHOR3
 134              		.cfi_endproc
 135              	.LFE39:
 137              		.section	.text.prvDeleteTCB,"ax",%progbits
 138              		.align	2
 139              		.thumb
 140              		.thumb_func
 142              	prvDeleteTCB:
 143              	.LFB38:
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 144              		.loc 1 3731 0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 0
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 148              	.LVL11:
 149 0000 10B5     		push	{r4, lr}
 150              	.LCFI0:
 151              		.cfi_def_cfa_offset 8
 152              		.cfi_offset 4, -8
 153              		.cfi_offset 14, -4
 154 0002 0446     		mov	r4, r0
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 155              		.loc 1 3749 0
 156 0004 006B     		ldr	r0, [r0, #48]
 157              	.LVL12:
 158 0006 FFF7FEFF 		bl	vPortFree
 159              	.LVL13:
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 160              		.loc 1 3750 0
 161 000a 2046     		mov	r0, r4
 162 000c FFF7FEFF 		bl	vPortFree
 163              	.LVL14:
 164 0010 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccNFblrO.s 			page 74


 165              		.cfi_endproc
 166              	.LFE38:
 168 0012 00BF     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 169              		.align	2
 170              		.thumb
 171              		.thumb_func
 173              	prvInitialiseNewTask:
 174              	.LFB6:
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 175              		.loc 1 832 0
 176              		.cfi_startproc
 177              		@ args = 16, pretend = 0, frame = 0
 178              		@ frame_needed = 0, uses_anonymous_args = 0
 179              	.LVL15:
 180 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 181              	.LCFI1:
 182              		.cfi_def_cfa_offset 32
 183              		.cfi_offset 4, -32
 184              		.cfi_offset 5, -28
 185              		.cfi_offset 6, -24
 186              		.cfi_offset 7, -20
 187              		.cfi_offset 8, -16
 188              		.cfi_offset 9, -12
 189              		.cfi_offset 10, -8
 190              		.cfi_offset 14, -4
 191 0004 089E     		ldr	r6, [sp, #32]
 192 0006 DDF82480 		ldr	r8, [sp, #36]
 193 000a 0A9C     		ldr	r4, [sp, #40]
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194              		.loc 1 850 0
 195 000c 41B9     		cbnz	r1, .L18
 196              	.LBB102:
 197              	.LBB103:
 198              		.loc 2 195 0
 199              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 200 000e 4FF05003 			mov r3, #80												
 201 0012 83F31188 		msr basepri, r3											
 202 0016 BFF36F8F 		isb														
 203 001a BFF34F8F 		dsb														
 204              	
 205              	@ 0 "" 2
 206              	.LVL16:
 207              		.thumb
 208              	.L19:
 209              	.LBE103:
 210              	.LBE102:
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 211              		.loc 1 850 0 discriminator 1
 212 001e FEE7     		b	.L19
 213              	.LVL17:
 214              	.L18:
 215 0020 0D46     		mov	r5, r1
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 216              		.loc 1 866 0
 217 0022 216B     		ldr	r1, [r4, #48]
 218              	.LVL18:
 219 0024 02F18042 		add	r2, r2, #1073741824
ARM GAS  /tmp/ccNFblrO.s 			page 75


 220              	.LVL19:
 221 0028 013A     		subs	r2, r2, #1
 222              	.LVL20:
 223 002a 01EB8202 		add	r2, r1, r2, lsl #2
 224              	.LVL21:
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225              		.loc 1 867 0
 226 002e 22F00707 		bic	r7, r2, #7
 227              	.LVL22:
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 228              		.loc 1 894 0
 229 0032 0022     		movs	r2, #0
 230 0034 07E0     		b	.L20
 231              	.LVL23:
 232              	.L22:
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233              		.loc 1 896 0
 234 0036 15F802E0 		ldrb	lr, [r5, r2]	@ zero_extendqisi2
 235 003a A118     		adds	r1, r4, r2
 236 003c 81F834E0 		strb	lr, [r1, #52]
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 237              		.loc 1 901 0
 238 0040 A95C     		ldrb	r1, [r5, r2]	@ zero_extendqisi2
 239 0042 11B1     		cbz	r1, .L21
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 240              		.loc 1 894 0 discriminator 2
 241 0044 0132     		adds	r2, r2, #1
 242              	.LVL24:
 243              	.L20:
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 244              		.loc 1 894 0 is_stmt 0 discriminator 1
 245 0046 0F2A     		cmp	r2, #15
 246 0048 F5D9     		bls	.L22
 247              	.L21:
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 248              		.loc 1 913 0 is_stmt 1
 249 004a 0022     		movs	r2, #0
 250              	.LVL25:
 251 004c 84F84320 		strb	r2, [r4, #67]
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 252              		.loc 1 917 0
 253 0050 062E     		cmp	r6, #6
 254 0052 00D9     		bls	.L23
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 255              		.loc 1 919 0
 256 0054 0626     		movs	r6, #6
 257              	.L23:
 258 0056 9946     		mov	r9, r3
 259 0058 8246     		mov	r10, r0
 260              	.LVL26:
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 261              		.loc 1 926 0
 262 005a E662     		str	r6, [r4, #44]
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 263              		.loc 1 929 0
 264 005c 6664     		str	r6, [r4, #68]
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccNFblrO.s 			page 76


 265              		.loc 1 930 0
 266 005e 0025     		movs	r5, #0
 267              	.LVL27:
 268 0060 A564     		str	r5, [r4, #72]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 269              		.loc 1 934 0
 270 0062 201D     		adds	r0, r4, #4
 271              	.LVL28:
 272 0064 FFF7FEFF 		bl	vListInitialiseItem
 273              	.LVL29:
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274              		.loc 1 935 0
 275 0068 04F11800 		add	r0, r4, #24
 276 006c FFF7FEFF 		bl	vListInitialiseItem
 277              	.LVL30:
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 278              		.loc 1 939 0
 279 0070 2461     		str	r4, [r4, #16]
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 280              		.loc 1 942 0
 281 0072 C6F10706 		rsb	r6, r6, #7
 282              	.LVL31:
 283 0076 A661     		str	r6, [r4, #24]
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284              		.loc 1 943 0
 285 0078 6462     		str	r4, [r4, #36]
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 286              		.loc 1 985 0
 287 007a E564     		str	r5, [r4, #76]
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 288              		.loc 1 986 0
 289 007c 84F85050 		strb	r5, [r4, #80]
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 290              		.loc 1 1013 0
 291 0080 3846     		mov	r0, r7
 292 0082 5146     		mov	r1, r10
 293 0084 4A46     		mov	r2, r9
 294 0086 FFF7FEFF 		bl	pxPortInitialiseStack
 295              	.LVL32:
 296 008a 2060     		str	r0, [r4]
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 297              		.loc 1 1017 0
 298 008c B8F1000F 		cmp	r8, #0
 299 0090 01D0     		beq	.L17
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 300              		.loc 1 1021 0
 301 0092 C8F80040 		str	r4, [r8]
 302              	.L17:
 303 0096 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 304              		.cfi_endproc
 305              	.LFE6:
 307 009a 00BF     		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 308              		.align	2
 309              		.thumb
 310              		.thumb_func
 312              	prvInitialiseTaskLists:
 313              	.LFB36:
ARM GAS  /tmp/ccNFblrO.s 			page 77


3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 314              		.loc 1 3489 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 0
 317              		@ frame_needed = 0, uses_anonymous_args = 0
 318 0000 38B5     		push	{r3, r4, r5, lr}
 319              	.LCFI2:
 320              		.cfi_def_cfa_offset 16
 321              		.cfi_offset 3, -16
 322              		.cfi_offset 4, -12
 323              		.cfi_offset 5, -8
 324              		.cfi_offset 14, -4
 325              	.LVL33:
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 326              		.loc 1 3494 0
 327 0002 0024     		movs	r4, #0
 328 0004 07E0     		b	.L28
 329              	.LVL34:
 330              	.L29:
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 331              		.loc 1 3496 0 discriminator 3
 332 0006 04EB8403 		add	r3, r4, r4, lsl #2
 333 000a 9B00     		lsls	r3, r3, #2
 334 000c 0E48     		ldr	r0, .L31
 335 000e 1844     		add	r0, r0, r3
 336 0010 FFF7FEFF 		bl	vListInitialise
 337              	.LVL35:
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 338              		.loc 1 3494 0 discriminator 3
 339 0014 0134     		adds	r4, r4, #1
 340              	.LVL36:
 341              	.L28:
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 342              		.loc 1 3494 0 is_stmt 0 discriminator 1
 343 0016 062C     		cmp	r4, #6
 344 0018 F5D9     		bls	.L29
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 345              		.loc 1 3499 0 is_stmt 1
 346 001a 0C4D     		ldr	r5, .L31+4
 347 001c 2846     		mov	r0, r5
 348 001e FFF7FEFF 		bl	vListInitialise
 349              	.LVL37:
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 350              		.loc 1 3500 0
 351 0022 0B4C     		ldr	r4, .L31+8
 352              	.LVL38:
 353 0024 2046     		mov	r0, r4
 354 0026 FFF7FEFF 		bl	vListInitialise
 355              	.LVL39:
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 356              		.loc 1 3501 0
 357 002a 0A48     		ldr	r0, .L31+12
 358 002c FFF7FEFF 		bl	vListInitialise
 359              	.LVL40:
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 360              		.loc 1 3505 0
 361 0030 0948     		ldr	r0, .L31+16
ARM GAS  /tmp/ccNFblrO.s 			page 78


 362 0032 FFF7FEFF 		bl	vListInitialise
 363              	.LVL41:
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 364              		.loc 1 3511 0
 365 0036 0948     		ldr	r0, .L31+20
 366 0038 FFF7FEFF 		bl	vListInitialise
 367              	.LVL42:
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 368              		.loc 1 3517 0
 369 003c 084B     		ldr	r3, .L31+24
 370 003e 1D60     		str	r5, [r3]
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 371              		.loc 1 3518 0
 372 0040 084B     		ldr	r3, .L31+28
 373 0042 1C60     		str	r4, [r3]
 374 0044 38BD     		pop	{r3, r4, r5, pc}
 375              	.L32:
 376 0046 00BF     		.align	2
 377              	.L31:
 378 0048 00000000 		.word	.LANCHOR4
 379 004c 00000000 		.word	.LANCHOR5
 380 0050 00000000 		.word	.LANCHOR6
 381 0054 00000000 		.word	.LANCHOR1
 382 0058 00000000 		.word	.LANCHOR7
 383 005c 00000000 		.word	.LANCHOR0
 384 0060 00000000 		.word	.LANCHOR2
 385 0064 00000000 		.word	.LANCHOR8
 386              		.cfi_endproc
 387              	.LFE36:
 389              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 390              		.align	2
 391              		.thumb
 392              		.thumb_func
 394              	prvAddNewTaskToReadyList:
 395              	.LFB7:
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 396              		.loc 1 1031 0
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 0
 399              		@ frame_needed = 0, uses_anonymous_args = 0
 400              	.LVL43:
 401 0000 10B5     		push	{r4, lr}
 402              	.LCFI3:
 403              		.cfi_def_cfa_offset 8
 404              		.cfi_offset 4, -8
 405              		.cfi_offset 14, -4
 406 0002 0446     		mov	r4, r0
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 407              		.loc 1 1034 0
 408 0004 FFF7FEFF 		bl	vPortEnterCritical
 409              	.LVL44:
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 410              		.loc 1 1036 0
 411 0008 204A     		ldr	r2, .L38
 412 000a 1368     		ldr	r3, [r2]
 413 000c 0133     		adds	r3, r3, #1
 414 000e 1360     		str	r3, [r2]
ARM GAS  /tmp/ccNFblrO.s 			page 79


1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 415              		.loc 1 1037 0
 416 0010 1F4B     		ldr	r3, .L38+4
 417 0012 1B68     		ldr	r3, [r3]
 418 0014 3BB9     		cbnz	r3, .L34
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419              		.loc 1 1041 0
 420 0016 1E4B     		ldr	r3, .L38+4
 421 0018 1C60     		str	r4, [r3]
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 422              		.loc 1 1043 0
 423 001a 1368     		ldr	r3, [r2]
 424 001c 012B     		cmp	r3, #1
 425 001e 0DD1     		bne	.L35
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 426              		.loc 1 1048 0
 427 0020 FFF7FEFF 		bl	prvInitialiseTaskLists
 428              	.LVL45:
 429 0024 0AE0     		b	.L35
 430              	.L34:
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 431              		.loc 1 1060 0
 432 0026 1B4B     		ldr	r3, .L38+8
 433 0028 1B68     		ldr	r3, [r3]
 434 002a 3BB9     		cbnz	r3, .L35
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 435              		.loc 1 1062 0
 436 002c 184B     		ldr	r3, .L38+4
 437 002e 1B68     		ldr	r3, [r3]
 438 0030 DA6A     		ldr	r2, [r3, #44]
 439 0032 E36A     		ldr	r3, [r4, #44]
 440 0034 9A42     		cmp	r2, r3
 441 0036 01D8     		bhi	.L35
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 442              		.loc 1 1064 0
 443 0038 154B     		ldr	r3, .L38+4
 444 003a 1C60     		str	r4, [r3]
 445              	.L35:
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 446              		.loc 1 1077 0
 447 003c 164A     		ldr	r2, .L38+12
 448 003e 1368     		ldr	r3, [r2]
 449 0040 0133     		adds	r3, r3, #1
 450 0042 1360     		str	r3, [r2]
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 451              		.loc 1 1087 0
 452 0044 E06A     		ldr	r0, [r4, #44]
 453 0046 0123     		movs	r3, #1
 454 0048 8340     		lsls	r3, r3, r0
 455 004a 1449     		ldr	r1, .L38+16
 456 004c 0A68     		ldr	r2, [r1]
 457 004e 1343     		orrs	r3, r3, r2
 458 0050 0B60     		str	r3, [r1]
 459 0052 00EB8000 		add	r0, r0, r0, lsl #2
 460 0056 8000     		lsls	r0, r0, #2
 461 0058 114B     		ldr	r3, .L38+20
 462 005a 1844     		add	r0, r0, r3
ARM GAS  /tmp/ccNFblrO.s 			page 80


 463 005c 211D     		adds	r1, r4, #4
 464 005e FFF7FEFF 		bl	vListInsertEnd
 465              	.LVL46:
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 466              		.loc 1 1091 0
 467 0062 FFF7FEFF 		bl	vPortExitCritical
 468              	.LVL47:
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 469              		.loc 1 1093 0
 470 0066 0B4B     		ldr	r3, .L38+8
 471 0068 1B68     		ldr	r3, [r3]
 472 006a 6BB1     		cbz	r3, .L33
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 473              		.loc 1 1097 0
 474 006c 084B     		ldr	r3, .L38+4
 475 006e 1B68     		ldr	r3, [r3]
 476 0070 DA6A     		ldr	r2, [r3, #44]
 477 0072 E36A     		ldr	r3, [r4, #44]
 478 0074 9A42     		cmp	r2, r3
 479 0076 07D2     		bcs	.L33
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 480              		.loc 1 1099 0
 481 0078 4FF08052 		mov	r2, #268435456
 482 007c 094B     		ldr	r3, .L38+24
 483 007e 1A60     		str	r2, [r3]
 484              	@ 1099 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 485 0080 BFF34F8F 		dsb
 486              	@ 0 "" 2
 487              	@ 1099 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 488 0084 BFF36F8F 		isb
 489              	@ 0 "" 2
 490              		.thumb
 491              	.L33:
 492 0088 10BD     		pop	{r4, pc}
 493              	.LVL48:
 494              	.L39:
 495 008a 00BF     		.align	2
 496              	.L38:
 497 008c 00000000 		.word	.LANCHOR9
 498 0090 00000000 		.word	.LANCHOR10
 499 0094 00000000 		.word	.LANCHOR11
 500 0098 00000000 		.word	.LANCHOR12
 501 009c 00000000 		.word	.LANCHOR13
 502 00a0 00000000 		.word	.LANCHOR4
 503 00a4 04ED00E0 		.word	-536810236
 504              		.cfi_endproc
 505              	.LFE7:
 507              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 508              		.align	2
 509              		.thumb
 510              		.thumb_func
 512              	prvCheckTasksWaitingTermination:
 513              	.LFB37:
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 514              		.loc 1 3523 0
 515              		.cfi_startproc
 516              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccNFblrO.s 			page 81


 517              		@ frame_needed = 0, uses_anonymous_args = 0
 518 0000 10B5     		push	{r4, lr}
 519              	.LCFI4:
 520              		.cfi_def_cfa_offset 8
 521              		.cfi_offset 4, -8
 522              		.cfi_offset 14, -4
 523              	.LBB104:
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 524              		.loc 1 3533 0
 525 0002 14E0     		b	.L41
 526              	.L42:
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 527              		.loc 1 3535 0
 528 0004 FFF7FEFF 		bl	vPortEnterCritical
 529              	.LVL49:
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 530              		.loc 1 3537 0
 531 0008 0B4B     		ldr	r3, .L44
 532 000a DB68     		ldr	r3, [r3, #12]
 533 000c DC68     		ldr	r4, [r3, #12]
 534              	.LVL50:
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 535              		.loc 1 3538 0
 536 000e 201D     		adds	r0, r4, #4
 537 0010 FFF7FEFF 		bl	uxListRemove
 538              	.LVL51:
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 539              		.loc 1 3539 0
 540 0014 094A     		ldr	r2, .L44+4
 541 0016 1368     		ldr	r3, [r2]
 542 0018 013B     		subs	r3, r3, #1
 543 001a 1360     		str	r3, [r2]
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 544              		.loc 1 3540 0
 545 001c 084A     		ldr	r2, .L44+8
 546 001e 1368     		ldr	r3, [r2]
 547 0020 013B     		subs	r3, r3, #1
 548 0022 1360     		str	r3, [r2]
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 549              		.loc 1 3542 0
 550 0024 FFF7FEFF 		bl	vPortExitCritical
 551              	.LVL52:
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 552              		.loc 1 3544 0
 553 0028 2046     		mov	r0, r4
 554 002a FFF7FEFF 		bl	prvDeleteTCB
 555              	.LVL53:
 556              	.L41:
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 557              		.loc 1 3533 0
 558 002e 044B     		ldr	r3, .L44+8
 559 0030 1B68     		ldr	r3, [r3]
 560 0032 002B     		cmp	r3, #0
 561 0034 E6D1     		bne	.L42
 562              	.LBE104:
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 563              		.loc 1 3548 0
ARM GAS  /tmp/ccNFblrO.s 			page 82


 564 0036 10BD     		pop	{r4, pc}
 565              	.L45:
 566              		.align	2
 567              	.L44:
 568 0038 00000000 		.word	.LANCHOR7
 569 003c 00000000 		.word	.LANCHOR9
 570 0040 00000000 		.word	.LANCHOR14
 571              		.cfi_endproc
 572              	.LFE37:
 574              		.section	.text.prvIdleTask,"ax",%progbits
 575              		.align	2
 576              		.thumb
 577              		.thumb_func
 579              	prvIdleTask:
 580              	.LFB35:
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 581              		.loc 1 3277 0
 582              		.cfi_startproc
 583              		@ Volatile: function does not return.
 584              		@ args = 0, pretend = 0, frame = 0
 585              		@ frame_needed = 0, uses_anonymous_args = 0
 586              	.LVL54:
 587 0000 08B5     		push	{r3, lr}
 588              	.LCFI5:
 589              		.cfi_def_cfa_offset 8
 590              		.cfi_offset 3, -8
 591              		.cfi_offset 14, -4
 592              	.LVL55:
 593              	.L47:
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 594              		.loc 1 3293 0
 595 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 596              	.LVL56:
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 597              		.loc 1 3316 0
 598 0006 064B     		ldr	r3, .L50
 599 0008 1B68     		ldr	r3, [r3]
 600 000a 012B     		cmp	r3, #1
 601 000c F9D9     		bls	.L47
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 602              		.loc 1 3318 0
 603 000e 4FF08052 		mov	r2, #268435456
 604 0012 044B     		ldr	r3, .L50+4
 605 0014 1A60     		str	r2, [r3]
 606              	@ 3318 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 607 0016 BFF34F8F 		dsb
 608              	@ 0 "" 2
 609              	@ 3318 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 610 001a BFF36F8F 		isb
 611              	@ 0 "" 2
 612              		.thumb
 613 001e F0E7     		b	.L47
 614              	.L51:
 615              		.align	2
 616              	.L50:
 617 0020 00000000 		.word	.LANCHOR4
 618 0024 04ED00E0 		.word	-536810236
ARM GAS  /tmp/ccNFblrO.s 			page 83


 619              		.cfi_endproc
 620              	.LFE35:
 622              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 623              		.align	2
 624              		.thumb
 625              		.thumb_func
 627              	prvAddCurrentTaskToDelayedList:
 628              	.LFB53:
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccNFblrO.s 			page 84


3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccNFblrO.s 			page 85


3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
ARM GAS  /tmp/ccNFblrO.s 			page 86


3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccNFblrO.s 			page 87


4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
ARM GAS  /tmp/ccNFblrO.s 			page 88


4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
ARM GAS  /tmp/ccNFblrO.s 			page 89


4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
ARM GAS  /tmp/ccNFblrO.s 			page 90


4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
ARM GAS  /tmp/ccNFblrO.s 			page 91


4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
ARM GAS  /tmp/ccNFblrO.s 			page 92


4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccNFblrO.s 			page 93


4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccNFblrO.s 			page 94


4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
ARM GAS  /tmp/ccNFblrO.s 			page 95


4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
ARM GAS  /tmp/ccNFblrO.s 			page 96


4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
ARM GAS  /tmp/ccNFblrO.s 			page 97


4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
ARM GAS  /tmp/ccNFblrO.s 			page 98


4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccNFblrO.s 			page 99


4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccNFblrO.s 			page 100


4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  /tmp/ccNFblrO.s 			page 101


4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
ARM GAS  /tmp/ccNFblrO.s 			page 102


4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccNFblrO.s 			page 103


4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 629              		.loc 1 4979 0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 0
 632              		@ frame_needed = 0, uses_anonymous_args = 0
 633              	.LVL57:
 634 0000 70B5     		push	{r4, r5, r6, lr}
 635              	.LCFI6:
 636              		.cfi_def_cfa_offset 16
 637              		.cfi_offset 4, -16
 638              		.cfi_offset 5, -12
 639              		.cfi_offset 6, -8
 640              		.cfi_offset 14, -4
 641 0002 0446     		mov	r4, r0
ARM GAS  /tmp/ccNFblrO.s 			page 104


 642 0004 0E46     		mov	r6, r1
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 643              		.loc 1 4981 0
 644 0006 1C4B     		ldr	r3, .L58
 645 0008 1D68     		ldr	r5, [r3]
 646              	.LVL58:
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 647              		.loc 1 4994 0
 648 000a 1C4B     		ldr	r3, .L58+4
 649 000c 1868     		ldr	r0, [r3]
 650              	.LVL59:
 651 000e 0430     		adds	r0, r0, #4
 652 0010 FFF7FEFF 		bl	uxListRemove
 653              	.LVL60:
 654 0014 48B9     		cbnz	r0, .L53
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
 655              		.loc 1 4998 0
 656 0016 194B     		ldr	r3, .L58+4
 657 0018 1B68     		ldr	r3, [r3]
 658 001a DA6A     		ldr	r2, [r3, #44]
 659 001c 0123     		movs	r3, #1
 660 001e 9340     		lsls	r3, r3, r2
 661 0020 1749     		ldr	r1, .L58+8
 662 0022 0A68     		ldr	r2, [r1]
 663 0024 22EA0303 		bic	r3, r2, r3
 664 0028 0B60     		str	r3, [r1]
 665              	.L53:
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 666              		.loc 1 5007 0
 667 002a B4F1FF3F 		cmp	r4, #-1
 668 002e 07D1     		bne	.L54
 669              		.loc 1 5007 0 is_stmt 0 discriminator 1
 670 0030 36B1     		cbz	r6, .L54
ARM GAS  /tmp/ccNFblrO.s 			page 105


5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 671              		.loc 1 5012 0 is_stmt 1
 672 0032 124B     		ldr	r3, .L58+4
 673 0034 1968     		ldr	r1, [r3]
 674 0036 1348     		ldr	r0, .L58+12
 675 0038 0431     		adds	r1, r1, #4
 676 003a FFF7FEFF 		bl	vListInsertEnd
 677              	.LVL61:
 678 003e 70BD     		pop	{r4, r5, r6, pc}
 679              	.LVL62:
 680              	.L54:
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 681              		.loc 1 5019 0
 682 0040 2C44     		add	r4, r4, r5
 683              	.LVL63:
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 684              		.loc 1 5022 0
 685 0042 0E4B     		ldr	r3, .L58+4
 686 0044 1B68     		ldr	r3, [r3]
 687 0046 5C60     		str	r4, [r3, #4]
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 688              		.loc 1 5024 0
 689 0048 AC42     		cmp	r4, r5
 690 004a 07D2     		bcs	.L56
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 691              		.loc 1 5028 0
 692 004c 0E4B     		ldr	r3, .L58+16
 693 004e 1868     		ldr	r0, [r3]
 694 0050 0A4B     		ldr	r3, .L58+4
 695 0052 1968     		ldr	r1, [r3]
 696 0054 0431     		adds	r1, r1, #4
 697 0056 FFF7FEFF 		bl	vListInsert
 698              	.LVL64:
 699 005a 70BD     		pop	{r4, r5, r6, pc}
 700              	.LVL65:
 701              	.L56:
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
ARM GAS  /tmp/ccNFblrO.s 			page 106


5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 702              		.loc 1 5034 0
 703 005c 0B4B     		ldr	r3, .L58+20
 704 005e 1868     		ldr	r0, [r3]
 705 0060 064B     		ldr	r3, .L58+4
 706 0062 1968     		ldr	r1, [r3]
 707 0064 0431     		adds	r1, r1, #4
 708 0066 FFF7FEFF 		bl	vListInsert
 709              	.LVL66:
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 710              		.loc 1 5039 0
 711 006a 094B     		ldr	r3, .L58+24
 712 006c 1B68     		ldr	r3, [r3]
 713 006e 9C42     		cmp	r4, r3
 714 0070 01D2     		bcs	.L52
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 715              		.loc 1 5041 0
 716 0072 074B     		ldr	r3, .L58+24
 717 0074 1C60     		str	r4, [r3]
 718              	.L52:
 719 0076 70BD     		pop	{r4, r5, r6, pc}
 720              	.LVL67:
 721              	.L59:
 722              		.align	2
 723              	.L58:
 724 0078 00000000 		.word	.LANCHOR15
 725 007c 00000000 		.word	.LANCHOR10
 726 0080 00000000 		.word	.LANCHOR13
 727 0084 00000000 		.word	.LANCHOR0
 728 0088 00000000 		.word	.LANCHOR8
 729 008c 00000000 		.word	.LANCHOR2
 730 0090 00000000 		.word	.LANCHOR3
 731              		.cfi_endproc
 732              	.LFE53:
 734              		.section	.text.xTaskCreate,"ax",%progbits
 735              		.align	2
 736              		.global	xTaskCreate
 737              		.thumb
 738              		.thumb_func
 740              	xTaskCreate:
 741              	.LFB5:
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 742              		.loc 1 739 0
 743              		.cfi_startproc
 744              		@ args = 8, pretend = 0, frame = 0
 745              		@ frame_needed = 0, uses_anonymous_args = 0
 746              	.LVL68:
 747 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 748              	.LCFI7:
 749              		.cfi_def_cfa_offset 28
 750              		.cfi_offset 4, -28
 751              		.cfi_offset 5, -24
ARM GAS  /tmp/ccNFblrO.s 			page 107


 752              		.cfi_offset 6, -20
 753              		.cfi_offset 7, -16
 754              		.cfi_offset 8, -12
 755              		.cfi_offset 9, -8
 756              		.cfi_offset 14, -4
 757 0004 85B0     		sub	sp, sp, #20
 758              	.LCFI8:
 759              		.cfi_def_cfa_offset 48
 760 0006 8046     		mov	r8, r0
 761 0008 0F46     		mov	r7, r1
 762 000a 1546     		mov	r5, r2
 763 000c 1E46     		mov	r6, r3
 764              	.LBB105:
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 765              		.loc 1 773 0
 766 000e 9000     		lsls	r0, r2, #2
 767              	.LVL69:
 768 0010 FFF7FEFF 		bl	pvPortMalloc
 769              	.LVL70:
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 770              		.loc 1 775 0
 771 0014 60B1     		cbz	r0, .L64
 772 0016 8146     		mov	r9, r0
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 773              		.loc 1 778 0
 774 0018 5420     		movs	r0, #84
 775              	.LVL71:
 776 001a FFF7FEFF 		bl	pvPortMalloc
 777              	.LVL72:
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 778              		.loc 1 780 0
 779 001e 0446     		mov	r4, r0
 780 0020 10B1     		cbz	r0, .L62
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 781              		.loc 1 783 0
 782 0022 C0F83090 		str	r9, [r0, #48]
 783 0026 04E0     		b	.L61
 784              	.L62:
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 785              		.loc 1 789 0
 786 0028 4846     		mov	r0, r9
 787              	.LVL73:
 788 002a FFF7FEFF 		bl	vPortFree
 789              	.LVL74:
 790 002e 00E0     		b	.L61
 791              	.LVL75:
 792              	.L64:
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 793              		.loc 1 794 0
 794 0030 0024     		movs	r4, #0
 795              	.LVL76:
 796              	.L61:
 797              	.LBE105:
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 798              		.loc 1 799 0
 799 0032 8CB1     		cbz	r4, .L65
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
ARM GAS  /tmp/ccNFblrO.s 			page 108


 800              		.loc 1 809 0
 801 0034 0C9B     		ldr	r3, [sp, #48]
 802 0036 0093     		str	r3, [sp]
 803 0038 0D9B     		ldr	r3, [sp, #52]
 804 003a 0193     		str	r3, [sp, #4]
 805 003c 0294     		str	r4, [sp, #8]
 806 003e 0023     		movs	r3, #0
 807 0040 0393     		str	r3, [sp, #12]
 808 0042 4046     		mov	r0, r8
 809 0044 3946     		mov	r1, r7
 810 0046 2A46     		mov	r2, r5
 811 0048 3346     		mov	r3, r6
 812 004a FFF7FEFF 		bl	prvInitialiseNewTask
 813              	.LVL77:
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 814              		.loc 1 810 0
 815 004e 2046     		mov	r0, r4
 816 0050 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 817              	.LVL78:
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 818              		.loc 1 811 0
 819 0054 0120     		movs	r0, #1
 820 0056 01E0     		b	.L63
 821              	.LVL79:
 822              	.L65:
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 823              		.loc 1 815 0
 824 0058 4FF0FF30 		mov	r0, #-1
 825              	.L63:
 826              	.LVL80:
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 827              		.loc 1 819 0
 828 005c 05B0     		add	sp, sp, #20
 829              	.LCFI9:
 830              		.cfi_def_cfa_offset 28
 831              		@ sp needed
 832 005e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 833              		.cfi_endproc
 834              	.LFE5:
 836 0062 00BF     		.section	.text.vTaskDelete,"ax",%progbits
 837              		.align	2
 838              		.global	vTaskDelete
 839              		.thumb
 840              		.thumb_func
 842              	vTaskDelete:
 843              	.LFB8:
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 844              		.loc 1 1116 0
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 0
 847              		@ frame_needed = 0, uses_anonymous_args = 0
 848              	.LVL81:
 849 0000 38B5     		push	{r3, r4, r5, lr}
 850              	.LCFI10:
 851              		.cfi_def_cfa_offset 16
 852              		.cfi_offset 3, -16
 853              		.cfi_offset 4, -12
ARM GAS  /tmp/ccNFblrO.s 			page 109


 854              		.cfi_offset 5, -8
 855              		.cfi_offset 14, -4
 856 0002 0446     		mov	r4, r0
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 857              		.loc 1 1119 0
 858 0004 FFF7FEFF 		bl	vPortEnterCritical
 859              	.LVL82:
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 860              		.loc 1 1123 0
 861 0008 0CB9     		cbnz	r4, .L68
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 862              		.loc 1 1123 0 is_stmt 0 discriminator 1
 863 000a 2A4B     		ldr	r3, .L77
 864 000c 1C68     		ldr	r4, [r3]
 865              	.LVL83:
 866              	.L68:
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 867              		.loc 1 1126 0 is_stmt 1 discriminator 4
 868 000e 251D     		adds	r5, r4, #4
 869 0010 2846     		mov	r0, r5
 870 0012 FFF7FEFF 		bl	uxListRemove
 871              	.LVL84:
 872 0016 70B9     		cbnz	r0, .L69
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 873              		.loc 1 1128 0
 874 0018 E26A     		ldr	r2, [r4, #44]
 875 001a 02EB8203 		add	r3, r2, r2, lsl #2
 876 001e 9B00     		lsls	r3, r3, #2
 877 0020 2549     		ldr	r1, .L77+4
 878 0022 CB58     		ldr	r3, [r1, r3]
 879 0024 3BB9     		cbnz	r3, .L69
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 880              		.loc 1 1128 0 is_stmt 0 discriminator 1
 881 0026 0123     		movs	r3, #1
 882 0028 03FA02F2 		lsl	r2, r3, r2
 883 002c 2349     		ldr	r1, .L77+8
 884 002e 0B68     		ldr	r3, [r1]
 885 0030 23EA0203 		bic	r3, r3, r2
 886 0034 0B60     		str	r3, [r1]
 887              	.L69:
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 888              		.loc 1 1136 0 is_stmt 1
 889 0036 A36A     		ldr	r3, [r4, #40]
 890 0038 1BB1     		cbz	r3, .L70
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 891              		.loc 1 1138 0
 892 003a 04F11800 		add	r0, r4, #24
 893 003e FFF7FEFF 		bl	uxListRemove
 894              	.LVL85:
 895              	.L70:
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 896              		.loc 1 1149 0
 897 0042 1F4A     		ldr	r2, .L77+12
 898 0044 1368     		ldr	r3, [r2]
 899 0046 0133     		adds	r3, r3, #1
 900 0048 1360     		str	r3, [r2]
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccNFblrO.s 			page 110


 901              		.loc 1 1151 0
 902 004a 1A4B     		ldr	r3, .L77
 903 004c 1B68     		ldr	r3, [r3]
 904 004e 9C42     		cmp	r4, r3
 905 0050 08D1     		bne	.L71
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 906              		.loc 1 1158 0
 907 0052 1C48     		ldr	r0, .L77+16
 908 0054 2946     		mov	r1, r5
 909 0056 FFF7FEFF 		bl	vListInsertEnd
 910              	.LVL86:
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 911              		.loc 1 1163 0
 912 005a 1B4A     		ldr	r2, .L77+20
 913 005c 1368     		ldr	r3, [r2]
 914 005e 0133     		adds	r3, r3, #1
 915 0060 1360     		str	r3, [r2]
 916 0062 08E0     		b	.L72
 917              	.L71:
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 918              		.loc 1 1174 0
 919 0064 194A     		ldr	r2, .L77+24
 920 0066 1368     		ldr	r3, [r2]
 921 0068 013B     		subs	r3, r3, #1
 922 006a 1360     		str	r3, [r2]
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 923              		.loc 1 1175 0
 924 006c 2046     		mov	r0, r4
 925 006e FFF7FEFF 		bl	prvDeleteTCB
 926              	.LVL87:
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 927              		.loc 1 1179 0
 928 0072 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 929              	.LVL88:
 930              	.L72:
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 931              		.loc 1 1184 0
 932 0076 FFF7FEFF 		bl	vPortExitCritical
 933              	.LVL89:
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 934              		.loc 1 1188 0
 935 007a 154B     		ldr	r3, .L77+28
 936 007c 1B68     		ldr	r3, [r3]
 937 007e BBB1     		cbz	r3, .L67
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 938              		.loc 1 1190 0
 939 0080 0C4B     		ldr	r3, .L77
 940 0082 1B68     		ldr	r3, [r3]
 941 0084 9C42     		cmp	r4, r3
 942 0086 13D1     		bne	.L67
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 943              		.loc 1 1192 0
 944 0088 124B     		ldr	r3, .L77+32
 945 008a 1B68     		ldr	r3, [r3]
 946 008c 43B1     		cbz	r3, .L74
 947              	.LBB106:
 948              	.LBB107:
ARM GAS  /tmp/ccNFblrO.s 			page 111


 949              		.loc 2 195 0
 950              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 951 008e 4FF05003 			mov r3, #80												
 952 0092 83F31188 		msr basepri, r3											
 953 0096 BFF36F8F 		isb														
 954 009a BFF34F8F 		dsb														
 955              	
 956              	@ 0 "" 2
 957              	.LVL90:
 958              		.thumb
 959              	.L75:
 960              	.LBE107:
 961              	.LBE106:
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 962              		.loc 1 1192 0 discriminator 1
 963 009e FEE7     		b	.L75
 964              	.L74:
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 965              		.loc 1 1193 0
 966 00a0 4FF08052 		mov	r2, #268435456
 967 00a4 0C4B     		ldr	r3, .L77+36
 968 00a6 1A60     		str	r2, [r3]
 969              	@ 1193 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 970 00a8 BFF34F8F 		dsb
 971              	@ 0 "" 2
 972              	@ 1193 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 973 00ac BFF36F8F 		isb
 974              	@ 0 "" 2
 975              		.thumb
 976              	.L67:
 977 00b0 38BD     		pop	{r3, r4, r5, pc}
 978              	.LVL91:
 979              	.L78:
 980 00b2 00BF     		.align	2
 981              	.L77:
 982 00b4 00000000 		.word	.LANCHOR10
 983 00b8 00000000 		.word	.LANCHOR4
 984 00bc 00000000 		.word	.LANCHOR13
 985 00c0 00000000 		.word	.LANCHOR12
 986 00c4 00000000 		.word	.LANCHOR7
 987 00c8 00000000 		.word	.LANCHOR14
 988 00cc 00000000 		.word	.LANCHOR9
 989 00d0 00000000 		.word	.LANCHOR11
 990 00d4 00000000 		.word	.LANCHOR16
 991 00d8 04ED00E0 		.word	-536810236
 992              		.cfi_endproc
 993              	.LFE8:
 995              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 996              		.align	2
 997              		.global	uxTaskPriorityGet
 998              		.thumb
 999              		.thumb_func
 1001              	uxTaskPriorityGet:
 1002              	.LFB10:
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1003              		.loc 1 1429 0
 1004              		.cfi_startproc
ARM GAS  /tmp/ccNFblrO.s 			page 112


 1005              		@ args = 0, pretend = 0, frame = 0
 1006              		@ frame_needed = 0, uses_anonymous_args = 0
 1007              	.LVL92:
 1008 0000 10B5     		push	{r4, lr}
 1009              	.LCFI11:
 1010              		.cfi_def_cfa_offset 8
 1011              		.cfi_offset 4, -8
 1012              		.cfi_offset 14, -4
 1013 0002 0446     		mov	r4, r0
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1014              		.loc 1 1433 0
 1015 0004 FFF7FEFF 		bl	vPortEnterCritical
 1016              	.LVL93:
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1017              		.loc 1 1437 0
 1018 0008 0CB9     		cbnz	r4, .L80
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1019              		.loc 1 1437 0 is_stmt 0 discriminator 1
 1020 000a 034B     		ldr	r3, .L83
 1021 000c 1C68     		ldr	r4, [r3]
 1022              	.LVL94:
 1023              	.L80:
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1024              		.loc 1 1438 0 is_stmt 1 discriminator 4
 1025 000e E46A     		ldr	r4, [r4, #44]
 1026              	.LVL95:
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1027              		.loc 1 1440 0 discriminator 4
 1028 0010 FFF7FEFF 		bl	vPortExitCritical
 1029              	.LVL96:
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1030              		.loc 1 1443 0 discriminator 4
 1031 0014 2046     		mov	r0, r4
 1032 0016 10BD     		pop	{r4, pc}
 1033              	.LVL97:
 1034              	.L84:
 1035              		.align	2
 1036              	.L83:
 1037 0018 00000000 		.word	.LANCHOR10
 1038              		.cfi_endproc
 1039              	.LFE10:
 1041              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1042              		.align	2
 1043              		.global	uxTaskPriorityGetFromISR
 1044              		.thumb
 1045              		.thumb_func
 1047              	uxTaskPriorityGetFromISR:
 1048              	.LFB11:
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1049              		.loc 1 1451 0
 1050              		.cfi_startproc
 1051              		@ args = 0, pretend = 0, frame = 0
 1052              		@ frame_needed = 0, uses_anonymous_args = 0
 1053              	.LVL98:
 1054 0000 10B5     		push	{r4, lr}
 1055              	.LCFI12:
 1056              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccNFblrO.s 			page 113


 1057              		.cfi_offset 4, -8
 1058              		.cfi_offset 14, -4
 1059 0002 0446     		mov	r4, r0
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1060              		.loc 1 1471 0
 1061 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1062              	.LVL99:
 1063              	.LBB108:
 1064              	.LBB109:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1065              		.loc 2 211 0
 1066              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1067 0008 EFF31183 			mrs r3, basepri											
 1068 000c 4FF05002 		mov r2, #80												
 1069 0010 82F31188 		msr basepri, r2											
 1070 0014 BFF36F8F 		isb														
 1071 0018 BFF34F8F 		dsb														
 1072              	
 1073              	@ 0 "" 2
 1074              	.LVL100:
 1075              		.thumb
 1076              	.LBE109:
 1077              	.LBE108:
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1078              		.loc 1 1477 0
 1079 001c 0CB9     		cbnz	r4, .L86
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1080              		.loc 1 1477 0 is_stmt 0 discriminator 1
 1081 001e 034A     		ldr	r2, .L89
 1082 0020 1468     		ldr	r4, [r2]
 1083              	.LVL101:
 1084              	.L86:
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1085              		.loc 1 1478 0 is_stmt 1 discriminator 4
 1086 0022 E06A     		ldr	r0, [r4, #44]
 1087              	.LVL102:
 1088              	.LBB110:
 1089              	.LBB111:
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
ARM GAS  /tmp/ccNFblrO.s 			page 114


 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1090              		.loc 2 229 0 discriminator 4
 1091              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1092 0024 83F31188 			msr basepri, r3	
 1093              	@ 0 "" 2
 1094              		.thumb
 1095              	.LBE111:
 1096              	.LBE110:
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1097              		.loc 1 1483 0 discriminator 4
 1098 0028 10BD     		pop	{r4, pc}
 1099              	.LVL103:
 1100              	.L90:
 1101 002a 00BF     		.align	2
 1102              	.L89:
 1103 002c 00000000 		.word	.LANCHOR10
 1104              		.cfi_endproc
 1105              	.LFE11:
 1107              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1108              		.align	2
 1109              		.global	vTaskPrioritySet
 1110              		.thumb
 1111              		.thumb_func
 1113              	vTaskPrioritySet:
 1114              	.LFB12:
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1115              		.loc 1 1491 0
 1116              		.cfi_startproc
 1117              		@ args = 0, pretend = 0, frame = 0
 1118              		@ frame_needed = 0, uses_anonymous_args = 0
 1119              	.LVL104:
 1120 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1121              	.LCFI13:
 1122              		.cfi_def_cfa_offset 24
 1123              		.cfi_offset 3, -24
 1124              		.cfi_offset 4, -20
 1125              		.cfi_offset 5, -16
 1126              		.cfi_offset 6, -12
 1127              		.cfi_offset 7, -8
 1128              		.cfi_offset 14, -4
 1129 0002 0D46     		mov	r5, r1
 1130              	.LVL105:
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1131              		.loc 1 1496 0
ARM GAS  /tmp/ccNFblrO.s 			page 115


 1132 0004 0629     		cmp	r1, #6
 1133 0006 08D9     		bls	.L92
 1134              	.LBB112:
 1135              	.LBB113:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1136              		.loc 2 195 0
 1137              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1138 0008 4FF05003 			mov r3, #80												
 1139 000c 83F31188 		msr basepri, r3											
 1140 0010 BFF36F8F 		isb														
 1141 0014 BFF34F8F 		dsb														
 1142              	
 1143              	@ 0 "" 2
 1144              	.LVL106:
 1145              		.thumb
 1146              	.L93:
 1147              	.LBE113:
 1148              	.LBE112:
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1149              		.loc 1 1496 0 discriminator 1
 1150 0018 FEE7     		b	.L93
 1151              	.L92:
 1152 001a 0446     		mov	r4, r0
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1153              		.loc 1 1499 0
 1154 001c 0629     		cmp	r1, #6
 1155 001e 00D9     		bls	.L94
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1156              		.loc 1 1501 0
 1157 0020 0625     		movs	r5, #6
 1158              	.L94:
 1159              	.LVL107:
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1160              		.loc 1 1508 0
 1161 0022 FFF7FEFF 		bl	vPortEnterCritical
 1162              	.LVL108:
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1163              		.loc 1 1512 0
 1164 0026 0CB9     		cbnz	r4, .L95
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1165              		.loc 1 1512 0 is_stmt 0 discriminator 1
 1166 0028 2C4B     		ldr	r3, .L108
 1167 002a 1C68     		ldr	r4, [r3]
 1168              	.LVL109:
 1169              	.L95:
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1170              		.loc 1 1518 0 is_stmt 1 discriminator 4
 1171 002c 636C     		ldr	r3, [r4, #68]
 1172              	.LVL110:
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1173              		.loc 1 1526 0 discriminator 4
 1174 002e AB42     		cmp	r3, r5
 1175 0030 50D0     		beq	.L96
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1176              		.loc 1 1530 0
 1177 0032 9D42     		cmp	r5, r3
 1178 0034 0AD9     		bls	.L97
ARM GAS  /tmp/ccNFblrO.s 			page 116


1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1179              		.loc 1 1532 0
 1180 0036 294A     		ldr	r2, .L108
 1181 0038 1268     		ldr	r2, [r2]
 1182 003a 9442     		cmp	r4, r2
 1183 003c 0CD0     		beq	.L104
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1184              		.loc 1 1537 0
 1185 003e 274A     		ldr	r2, .L108
 1186 0040 1268     		ldr	r2, [r2]
 1187 0042 D26A     		ldr	r2, [r2, #44]
 1188 0044 AA42     		cmp	r2, r5
 1189 0046 09D9     		bls	.L105
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1190              		.loc 1 1494 0
 1191 0048 0026     		movs	r6, #0
 1192 004a 0AE0     		b	.L98
 1193              	.L97:
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1194              		.loc 1 1553 0
 1195 004c 234A     		ldr	r2, .L108
 1196 004e 1268     		ldr	r2, [r2]
 1197 0050 9442     		cmp	r4, r2
 1198 0052 05D0     		beq	.L106
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1199              		.loc 1 1494 0
 1200 0054 0026     		movs	r6, #0
 1201 0056 04E0     		b	.L98
 1202              	.L104:
 1203 0058 0026     		movs	r6, #0
 1204 005a 02E0     		b	.L98
 1205              	.L105:
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1206              		.loc 1 1539 0
 1207 005c 0126     		movs	r6, #1
 1208 005e 00E0     		b	.L98
 1209              	.L106:
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1210              		.loc 1 1558 0
 1211 0060 0126     		movs	r6, #1
 1212              	.L98:
 1213              	.LVL111:
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1214              		.loc 1 1570 0
 1215 0062 E76A     		ldr	r7, [r4, #44]
 1216              	.LVL112:
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1217              		.loc 1 1576 0
 1218 0064 BB42     		cmp	r3, r7
 1219 0066 00D1     		bne	.L99
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1220              		.loc 1 1578 0
 1221 0068 E562     		str	r5, [r4, #44]
 1222              	.L99:
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1223              		.loc 1 1586 0
 1224 006a 6564     		str	r5, [r4, #68]
ARM GAS  /tmp/ccNFblrO.s 			page 117


1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1225              		.loc 1 1596 0
 1226 006c A369     		ldr	r3, [r4, #24]
 1227              	.LVL113:
 1228 006e 002B     		cmp	r3, #0
 1229 0070 02DB     		blt	.L100
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1230              		.loc 1 1598 0
 1231 0072 C5F10705 		rsb	r5, r5, #7
 1232              	.LVL114:
 1233 0076 A561     		str	r5, [r4, #24]
 1234              	.L100:
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1235              		.loc 1 1609 0
 1236 0078 6269     		ldr	r2, [r4, #20]
 1237 007a 07EB8703 		add	r3, r7, r7, lsl #2
 1238 007e 9B00     		lsls	r3, r3, #2
 1239 0080 1749     		ldr	r1, .L108+4
 1240 0082 0B44     		add	r3, r3, r1
 1241 0084 9A42     		cmp	r2, r3
 1242 0086 1CD1     		bne	.L101
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1243              		.loc 1 1614 0
 1244 0088 251D     		adds	r5, r4, #4
 1245 008a 2846     		mov	r0, r5
 1246 008c FFF7FEFF 		bl	uxListRemove
 1247              	.LVL115:
 1248 0090 38B9     		cbnz	r0, .L102
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1249              		.loc 1 1619 0
 1250 0092 0123     		movs	r3, #1
 1251 0094 03FA07F2 		lsl	r2, r3, r7
 1252 0098 1249     		ldr	r1, .L108+8
 1253 009a 0B68     		ldr	r3, [r1]
 1254 009c 23EA0203 		bic	r3, r3, r2
 1255 00a0 0B60     		str	r3, [r1]
 1256              	.L102:
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1257              		.loc 1 1625 0
 1258 00a2 E36A     		ldr	r3, [r4, #44]
 1259 00a4 0122     		movs	r2, #1
 1260 00a6 02FA03F1 		lsl	r1, r2, r3
 1261 00aa 0E48     		ldr	r0, .L108+8
 1262 00ac 0268     		ldr	r2, [r0]
 1263 00ae 0A43     		orrs	r2, r2, r1
 1264 00b0 0260     		str	r2, [r0]
 1265 00b2 03EB8303 		add	r3, r3, r3, lsl #2
 1266 00b6 9B00     		lsls	r3, r3, #2
 1267 00b8 0948     		ldr	r0, .L108+4
 1268 00ba 1844     		add	r0, r0, r3
 1269 00bc 2946     		mov	r1, r5
 1270 00be FFF7FEFF 		bl	vListInsertEnd
 1271              	.LVL116:
 1272              	.L101:
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1273              		.loc 1 1632 0
 1274 00c2 3EB1     		cbz	r6, .L96
ARM GAS  /tmp/ccNFblrO.s 			page 118


1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1275              		.loc 1 1634 0
 1276 00c4 4FF08052 		mov	r2, #268435456
 1277 00c8 074B     		ldr	r3, .L108+12
 1278 00ca 1A60     		str	r2, [r3]
 1279              	@ 1634 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1280 00cc BFF34F8F 		dsb
 1281              	@ 0 "" 2
 1282              	@ 1634 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1283 00d0 BFF36F8F 		isb
 1284              	@ 0 "" 2
 1285              	.LVL117:
 1286              		.thumb
 1287              	.L96:
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1288              		.loc 1 1646 0
 1289 00d4 FFF7FEFF 		bl	vPortExitCritical
 1290              	.LVL118:
 1291 00d8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1292              	.LVL119:
 1293              	.L109:
 1294 00da 00BF     		.align	2
 1295              	.L108:
 1296 00dc 00000000 		.word	.LANCHOR10
 1297 00e0 00000000 		.word	.LANCHOR4
 1298 00e4 00000000 		.word	.LANCHOR13
 1299 00e8 04ED00E0 		.word	-536810236
 1300              		.cfi_endproc
 1301              	.LFE12:
 1303              		.section	.text.vTaskResume,"ax",%progbits
 1304              		.align	2
 1305              		.global	vTaskResume
 1306              		.thumb
 1307              		.thumb_func
 1309              	vTaskResume:
 1310              	.LFB15:
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1311              		.loc 1 1802 0
 1312              		.cfi_startproc
 1313              		@ args = 0, pretend = 0, frame = 0
 1314              		@ frame_needed = 0, uses_anonymous_args = 0
 1315              	.LVL120:
 1316 0000 38B5     		push	{r3, r4, r5, lr}
 1317              	.LCFI14:
 1318              		.cfi_def_cfa_offset 16
 1319              		.cfi_offset 3, -16
 1320              		.cfi_offset 4, -12
 1321              		.cfi_offset 5, -8
 1322              		.cfi_offset 14, -4
 1323              	.LVL121:
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1324              		.loc 1 1806 0
 1325 0002 40B9     		cbnz	r0, .L111
 1326              	.LBB114:
 1327              	.LBB115:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1328              		.loc 2 195 0
ARM GAS  /tmp/ccNFblrO.s 			page 119


 1329              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1330 0004 4FF05003 			mov r3, #80												
 1331 0008 83F31188 		msr basepri, r3											
 1332 000c BFF36F8F 		isb														
 1333 0010 BFF34F8F 		dsb														
 1334              	
 1335              	@ 0 "" 2
 1336              	.LVL122:
 1337              		.thumb
 1338              	.L112:
 1339              	.LBE115:
 1340              	.LBE114:
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1341              		.loc 1 1806 0 discriminator 1
 1342 0014 FEE7     		b	.L112
 1343              	.L111:
 1344 0016 0446     		mov	r4, r0
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1345              		.loc 1 1810 0
 1346 0018 174B     		ldr	r3, .L116
 1347 001a 1B68     		ldr	r3, [r3]
 1348 001c 9842     		cmp	r0, r3
 1349 001e 2AD0     		beq	.L110
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1350              		.loc 1 1810 0 is_stmt 0 discriminator 1
 1351 0020 48B3     		cbz	r0, .L110
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1352              		.loc 1 1812 0 is_stmt 1
 1353 0022 FFF7FEFF 		bl	vPortEnterCritical
 1354              	.LVL123:
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1355              		.loc 1 1814 0
 1356 0026 2046     		mov	r0, r4
 1357 0028 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1358              	.LVL124:
 1359 002c 08B3     		cbz	r0, .L114
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1360              		.loc 1 1820 0
 1361 002e 251D     		adds	r5, r4, #4
 1362 0030 2846     		mov	r0, r5
 1363 0032 FFF7FEFF 		bl	uxListRemove
 1364              	.LVL125:
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1365              		.loc 1 1821 0
 1366 0036 E36A     		ldr	r3, [r4, #44]
 1367 0038 0122     		movs	r2, #1
 1368 003a 02FA03F1 		lsl	r1, r2, r3
 1369 003e 0F48     		ldr	r0, .L116+4
 1370 0040 0268     		ldr	r2, [r0]
 1371 0042 0A43     		orrs	r2, r2, r1
 1372 0044 0260     		str	r2, [r0]
 1373 0046 03EB8303 		add	r3, r3, r3, lsl #2
 1374 004a 9B00     		lsls	r3, r3, #2
 1375 004c 0C48     		ldr	r0, .L116+8
 1376 004e 1844     		add	r0, r0, r3
 1377 0050 2946     		mov	r1, r5
 1378 0052 FFF7FEFF 		bl	vListInsertEnd
ARM GAS  /tmp/ccNFblrO.s 			page 120


 1379              	.LVL126:
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1380              		.loc 1 1824 0
 1381 0056 E26A     		ldr	r2, [r4, #44]
 1382 0058 074B     		ldr	r3, .L116
 1383 005a 1B68     		ldr	r3, [r3]
 1384 005c DB6A     		ldr	r3, [r3, #44]
 1385 005e 9A42     		cmp	r2, r3
 1386 0060 07D3     		bcc	.L114
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1387              		.loc 1 1829 0
 1388 0062 4FF08052 		mov	r2, #268435456
 1389 0066 074B     		ldr	r3, .L116+12
 1390 0068 1A60     		str	r2, [r3]
 1391              	@ 1829 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1392 006a BFF34F8F 		dsb
 1393              	@ 0 "" 2
 1394              	@ 1829 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1395 006e BFF36F8F 		isb
 1396              	@ 0 "" 2
 1397              		.thumb
 1398              	.L114:
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1399              		.loc 1 1841 0
 1400 0072 FFF7FEFF 		bl	vPortExitCritical
 1401              	.LVL127:
 1402              	.L110:
 1403 0076 38BD     		pop	{r3, r4, r5, pc}
 1404              	.LVL128:
 1405              	.L117:
 1406              		.align	2
 1407              	.L116:
 1408 0078 00000000 		.word	.LANCHOR10
 1409 007c 00000000 		.word	.LANCHOR13
 1410 0080 00000000 		.word	.LANCHOR4
 1411 0084 04ED00E0 		.word	-536810236
 1412              		.cfi_endproc
 1413              	.LFE15:
 1415              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1416              		.align	2
 1417              		.global	xTaskResumeFromISR
 1418              		.thumb
 1419              		.thumb_func
 1421              	xTaskResumeFromISR:
 1422              	.LFB16:
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1423              		.loc 1 1856 0
 1424              		.cfi_startproc
 1425              		@ args = 0, pretend = 0, frame = 0
 1426              		@ frame_needed = 0, uses_anonymous_args = 0
 1427              	.LVL129:
 1428 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1429              	.LCFI15:
 1430              		.cfi_def_cfa_offset 24
 1431              		.cfi_offset 3, -24
 1432              		.cfi_offset 4, -20
 1433              		.cfi_offset 5, -16
ARM GAS  /tmp/ccNFblrO.s 			page 121


 1434              		.cfi_offset 6, -12
 1435              		.cfi_offset 7, -8
 1436              		.cfi_offset 14, -4
 1437              	.LVL130:
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1438              		.loc 1 1861 0
 1439 0002 40B9     		cbnz	r0, .L119
 1440              	.LBB116:
 1441              	.LBB117:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1442              		.loc 2 195 0
 1443              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1444 0004 4FF05003 			mov r3, #80												
 1445 0008 83F31188 		msr basepri, r3											
 1446 000c BFF36F8F 		isb														
 1447 0010 BFF34F8F 		dsb														
 1448              	
 1449              	@ 0 "" 2
 1450              	.LVL131:
 1451              		.thumb
 1452              	.L120:
 1453              	.LBE117:
 1454              	.LBE116:
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1455              		.loc 1 1861 0 discriminator 1
 1456 0014 FEE7     		b	.L120
 1457              	.L119:
 1458 0016 0446     		mov	r4, r0
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1459              		.loc 1 1879 0
 1460 0018 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1461              	.LVL132:
 1462              	.LBB118:
 1463              	.LBB119:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1464              		.loc 2 211 0
 1465              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1466 001c EFF31187 			mrs r7, basepri											
 1467 0020 4FF05003 		mov r3, #80												
 1468 0024 83F31188 		msr basepri, r3											
 1469 0028 BFF36F8F 		isb														
 1470 002c BFF34F8F 		dsb														
 1471              	
 1472              	@ 0 "" 2
 1473              	.LVL133:
 1474              		.thumb
 1475              	.LBE119:
 1476              	.LBE118:
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1477              		.loc 1 1883 0
 1478 0030 2046     		mov	r0, r4
 1479 0032 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1480              	.LVL134:
 1481 0036 38B3     		cbz	r0, .L124
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1482              		.loc 1 1888 0
 1483 0038 164B     		ldr	r3, .L127
ARM GAS  /tmp/ccNFblrO.s 			page 122


 1484 003a 1B68     		ldr	r3, [r3]
 1485 003c EBB9     		cbnz	r3, .L122
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1486              		.loc 1 1892 0
 1487 003e E26A     		ldr	r2, [r4, #44]
 1488 0040 154B     		ldr	r3, .L127+4
 1489 0042 1B68     		ldr	r3, [r3]
 1490 0044 DB6A     		ldr	r3, [r3, #44]
 1491 0046 9A42     		cmp	r2, r3
 1492 0048 01D2     		bcs	.L125
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1493              		.loc 1 1857 0
 1494 004a 0025     		movs	r5, #0
 1495 004c 00E0     		b	.L123
 1496              	.L125:
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1497              		.loc 1 1894 0
 1498 004e 0125     		movs	r5, #1
 1499              	.L123:
 1500              	.LVL135:
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1501              		.loc 1 1901 0
 1502 0050 261D     		adds	r6, r4, #4
 1503 0052 3046     		mov	r0, r6
 1504 0054 FFF7FEFF 		bl	uxListRemove
 1505              	.LVL136:
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1506              		.loc 1 1902 0
 1507 0058 E36A     		ldr	r3, [r4, #44]
 1508 005a 0122     		movs	r2, #1
 1509 005c 02FA03F1 		lsl	r1, r2, r3
 1510 0060 0E48     		ldr	r0, .L127+8
 1511 0062 0268     		ldr	r2, [r0]
 1512 0064 0A43     		orrs	r2, r2, r1
 1513 0066 0260     		str	r2, [r0]
 1514 0068 03EB8303 		add	r3, r3, r3, lsl #2
 1515 006c 9B00     		lsls	r3, r3, #2
 1516 006e 0C48     		ldr	r0, .L127+12
 1517 0070 1844     		add	r0, r0, r3
 1518 0072 3146     		mov	r1, r6
 1519 0074 FFF7FEFF 		bl	vListInsertEnd
 1520              	.LVL137:
 1521 0078 07E0     		b	.L121
 1522              	.LVL138:
 1523              	.L122:
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1524              		.loc 1 1909 0
 1525 007a 0A48     		ldr	r0, .L127+16
 1526 007c 04F11801 		add	r1, r4, #24
 1527 0080 FFF7FEFF 		bl	vListInsertEnd
 1528              	.LVL139:
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1529              		.loc 1 1857 0
 1530 0084 0025     		movs	r5, #0
 1531 0086 00E0     		b	.L121
 1532              	.L124:
 1533 0088 0025     		movs	r5, #0
ARM GAS  /tmp/ccNFblrO.s 			page 123


 1534              	.LVL140:
 1535              	.L121:
 1536              	.LBB120:
 1537              	.LBB121:
 1538              		.loc 2 229 0
 1539              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1540 008a 87F31188 			msr basepri, r7	
 1541              	@ 0 "" 2
 1542              		.thumb
 1543              	.LBE121:
 1544              	.LBE120:
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1545              		.loc 1 1920 0
 1546 008e 2846     		mov	r0, r5
 1547 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1548              	.LVL141:
 1549              	.L128:
 1550 0092 00BF     		.align	2
 1551              	.L127:
 1552 0094 00000000 		.word	.LANCHOR16
 1553 0098 00000000 		.word	.LANCHOR10
 1554 009c 00000000 		.word	.LANCHOR13
 1555 00a0 00000000 		.word	.LANCHOR4
 1556 00a4 00000000 		.word	.LANCHOR1
 1557              		.cfi_endproc
 1558              	.LFE16:
 1560              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1561              		.align	2
 1562              		.global	vTaskStartScheduler
 1563              		.thumb
 1564              		.thumb_func
 1566              	vTaskStartScheduler:
 1567              	.LFB17:
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1568              		.loc 1 1926 0
 1569              		.cfi_startproc
 1570              		@ args = 0, pretend = 0, frame = 0
 1571              		@ frame_needed = 0, uses_anonymous_args = 0
 1572 0000 00B5     		push	{lr}
 1573              	.LCFI16:
 1574              		.cfi_def_cfa_offset 4
 1575              		.cfi_offset 14, -4
 1576 0002 83B0     		sub	sp, sp, #12
 1577              	.LCFI17:
 1578              		.cfi_def_cfa_offset 16
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
 1579              		.loc 1 1959 0
 1580 0004 0023     		movs	r3, #0
 1581 0006 0093     		str	r3, [sp]
 1582 0008 164A     		ldr	r2, .L134
 1583 000a 0192     		str	r2, [sp, #4]
 1584 000c 1648     		ldr	r0, .L134+4
 1585 000e 1749     		ldr	r1, .L134+8
 1586 0010 8022     		movs	r2, #128
 1587 0012 FFF7FEFF 		bl	xTaskCreate
 1588              	.LVL142:
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccNFblrO.s 			page 124


 1589              		.loc 1 1981 0
 1590 0016 0128     		cmp	r0, #1
 1591 0018 14D1     		bne	.L130
 1592              	.LBB122:
 1593              	.LBB123:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1594              		.loc 2 195 0
 1595              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1596 001a 4FF05003 			mov r3, #80												
 1597 001e 83F31188 		msr basepri, r3											
 1598 0022 BFF36F8F 		isb														
 1599 0026 BFF34F8F 		dsb														
 1600              	
 1601              	@ 0 "" 2
 1602              	.LVL143:
 1603              		.thumb
 1604              	.LBE123:
 1605              	.LBE122:
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1606              		.loc 1 2007 0
 1607 002a 4FF0FF32 		mov	r2, #-1
 1608 002e 104B     		ldr	r3, .L134+12
 1609 0030 1A60     		str	r2, [r3]
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1610              		.loc 1 2008 0
 1611 0032 0122     		movs	r2, #1
 1612 0034 0F4B     		ldr	r3, .L134+16
 1613 0036 1A60     		str	r2, [r3]
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1614              		.loc 1 2009 0
 1615 0038 0022     		movs	r2, #0
 1616 003a 0F4B     		ldr	r3, .L134+20
 1617 003c 1A60     		str	r2, [r3]
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1618              		.loc 1 2023 0
 1619 003e FFF7FEFF 		bl	xPortStartScheduler
 1620              	.LVL144:
 1621 0042 0BE0     		b	.L129
 1622              	.LVL145:
 1623              	.L130:
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1624              		.loc 1 2038 0
 1625 0044 B0F1FF3F 		cmp	r0, #-1
 1626 0048 08D1     		bne	.L129
 1627              	.LBB124:
 1628              	.LBB125:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1629              		.loc 2 195 0
 1630              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1631 004a 4FF05003 			mov r3, #80												
 1632 004e 83F31188 		msr basepri, r3											
 1633 0052 BFF36F8F 		isb														
 1634 0056 BFF34F8F 		dsb														
 1635              	
 1636              	@ 0 "" 2
 1637              	.LVL146:
 1638              		.thumb
ARM GAS  /tmp/ccNFblrO.s 			page 125


 1639              	.L132:
 1640              	.LBE125:
 1641              	.LBE124:
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1642              		.loc 1 2038 0 discriminator 2
 1643 005a FEE7     		b	.L132
 1644              	.LVL147:
 1645              	.L129:
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1646              		.loc 1 2044 0
 1647 005c 03B0     		add	sp, sp, #12
 1648              	.LCFI18:
 1649              		.cfi_def_cfa_offset 4
 1650              		@ sp needed
 1651 005e 5DF804FB 		ldr	pc, [sp], #4
 1652              	.L135:
 1653 0062 00BF     		.align	2
 1654              	.L134:
 1655 0064 00000000 		.word	.LANCHOR17
 1656 0068 00000000 		.word	prvIdleTask
 1657 006c 00000000 		.word	.LC0
 1658 0070 00000000 		.word	.LANCHOR3
 1659 0074 00000000 		.word	.LANCHOR11
 1660 0078 00000000 		.word	.LANCHOR15
 1661              		.cfi_endproc
 1662              	.LFE17:
 1664              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1665              		.align	2
 1666              		.global	vTaskEndScheduler
 1667              		.thumb
 1668              		.thumb_func
 1670              	vTaskEndScheduler:
 1671              	.LFB18:
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1672              		.loc 1 2048 0
 1673              		.cfi_startproc
 1674              		@ args = 0, pretend = 0, frame = 0
 1675              		@ frame_needed = 0, uses_anonymous_args = 0
 1676 0000 08B5     		push	{r3, lr}
 1677              	.LCFI19:
 1678              		.cfi_def_cfa_offset 8
 1679              		.cfi_offset 3, -8
 1680              		.cfi_offset 14, -4
 1681              	.LBB126:
 1682              	.LBB127:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1683              		.loc 2 195 0
 1684              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1685 0002 4FF05003 			mov r3, #80												
 1686 0006 83F31188 		msr basepri, r3											
 1687 000a BFF36F8F 		isb														
 1688 000e BFF34F8F 		dsb														
 1689              	
 1690              	@ 0 "" 2
 1691              	.LVL148:
 1692              		.thumb
 1693              	.LBE127:
ARM GAS  /tmp/ccNFblrO.s 			page 126


 1694              	.LBE126:
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1695              		.loc 1 2053 0
 1696 0012 0022     		movs	r2, #0
 1697 0014 024B     		ldr	r3, .L138
 1698 0016 1A60     		str	r2, [r3]
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1699              		.loc 1 2054 0
 1700 0018 FFF7FEFF 		bl	vPortEndScheduler
 1701              	.LVL149:
 1702 001c 08BD     		pop	{r3, pc}
 1703              	.L139:
 1704 001e 00BF     		.align	2
 1705              	.L138:
 1706 0020 00000000 		.word	.LANCHOR11
 1707              		.cfi_endproc
 1708              	.LFE18:
 1710              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1711              		.align	2
 1712              		.global	vTaskSuspendAll
 1713              		.thumb
 1714              		.thumb_func
 1716              	vTaskSuspendAll:
 1717              	.LFB19:
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1718              		.loc 1 2059 0
 1719              		.cfi_startproc
 1720              		@ args = 0, pretend = 0, frame = 0
 1721              		@ frame_needed = 0, uses_anonymous_args = 0
 1722              		@ link register save eliminated.
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1723              		.loc 1 2064 0
 1724 0000 024A     		ldr	r2, .L141
 1725 0002 1368     		ldr	r3, [r2]
 1726 0004 0133     		adds	r3, r3, #1
 1727 0006 1360     		str	r3, [r2]
 1728 0008 7047     		bx	lr
 1729              	.L142:
 1730 000a 00BF     		.align	2
 1731              	.L141:
 1732 000c 00000000 		.word	.LANCHOR16
 1733              		.cfi_endproc
 1734              	.LFE19:
 1736              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1737              		.align	2
 1738              		.global	xTaskGetTickCount
 1739              		.thumb
 1740              		.thumb_func
 1742              	xTaskGetTickCount:
 1743              	.LFB21:
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 1744              		.loc 1 2242 0
 1745              		.cfi_startproc
 1746              		@ args = 0, pretend = 0, frame = 0
 1747              		@ frame_needed = 0, uses_anonymous_args = 0
 1748              		@ link register save eliminated.
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccNFblrO.s 			page 127


 1749              		.loc 1 2248 0
 1750 0000 014B     		ldr	r3, .L144
 1751 0002 1868     		ldr	r0, [r3]
 1752              	.LVL150:
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1753              		.loc 1 2253 0
 1754 0004 7047     		bx	lr
 1755              	.L145:
 1756 0006 00BF     		.align	2
 1757              	.L144:
 1758 0008 00000000 		.word	.LANCHOR15
 1759              		.cfi_endproc
 1760              	.LFE21:
 1762              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1763              		.align	2
 1764              		.global	xTaskGetTickCountFromISR
 1765              		.thumb
 1766              		.thumb_func
 1768              	xTaskGetTickCountFromISR:
 1769              	.LFB22:
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 1770              		.loc 1 2257 0
 1771              		.cfi_startproc
 1772              		@ args = 0, pretend = 0, frame = 0
 1773              		@ frame_needed = 0, uses_anonymous_args = 0
 1774 0000 08B5     		push	{r3, lr}
 1775              	.LCFI20:
 1776              		.cfi_def_cfa_offset 8
 1777              		.cfi_offset 3, -8
 1778              		.cfi_offset 14, -4
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1779              		.loc 1 2275 0
 1780 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1781              	.LVL151:
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1782              		.loc 1 2279 0
 1783 0006 014B     		ldr	r3, .L148
 1784 0008 1868     		ldr	r0, [r3]
 1785              	.LVL152:
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1786              		.loc 1 2284 0
 1787 000a 08BD     		pop	{r3, pc}
 1788              	.L149:
 1789              		.align	2
 1790              	.L148:
 1791 000c 00000000 		.word	.LANCHOR15
 1792              		.cfi_endproc
 1793              	.LFE22:
 1795              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1796              		.align	2
 1797              		.global	uxTaskGetNumberOfTasks
 1798              		.thumb
 1799              		.thumb_func
 1801              	uxTaskGetNumberOfTasks:
 1802              	.LFB23:
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 1803              		.loc 1 2288 0
ARM GAS  /tmp/ccNFblrO.s 			page 128


 1804              		.cfi_startproc
 1805              		@ args = 0, pretend = 0, frame = 0
 1806              		@ frame_needed = 0, uses_anonymous_args = 0
 1807              		@ link register save eliminated.
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1808              		.loc 1 2291 0
 1809 0000 014B     		ldr	r3, .L151
 1810 0002 1868     		ldr	r0, [r3]
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1811              		.loc 1 2292 0
 1812 0004 7047     		bx	lr
 1813              	.L152:
 1814 0006 00BF     		.align	2
 1815              	.L151:
 1816 0008 00000000 		.word	.LANCHOR9
 1817              		.cfi_endproc
 1818              	.LFE23:
 1820              		.section	.text.pcTaskGetName,"ax",%progbits
 1821              		.align	2
 1822              		.global	pcTaskGetName
 1823              		.thumb
 1824              		.thumb_func
 1826              	pcTaskGetName:
 1827              	.LFB24:
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 1828              		.loc 1 2296 0
 1829              		.cfi_startproc
 1830              		@ args = 0, pretend = 0, frame = 0
 1831              		@ frame_needed = 0, uses_anonymous_args = 0
 1832              		@ link register save eliminated.
 1833              	.LVL153:
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1834              		.loc 1 2301 0
 1835 0000 0346     		mov	r3, r0
 1836 0002 08B9     		cbnz	r0, .L154
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1837              		.loc 1 2301 0 is_stmt 0 discriminator 1
 1838 0004 074B     		ldr	r3, .L157
 1839 0006 1B68     		ldr	r3, [r3]
 1840              	.LVL154:
 1841              	.L154:
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 1842              		.loc 1 2302 0 is_stmt 1 discriminator 4
 1843 0008 43B9     		cbnz	r3, .L155
 1844              	.LBB128:
 1845              	.LBB129:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1846              		.loc 2 195 0
 1847              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1848 000a 4FF05003 			mov r3, #80												
 1849 000e 83F31188 		msr basepri, r3											
 1850 0012 BFF36F8F 		isb														
 1851 0016 BFF34F8F 		dsb														
 1852              	
 1853              	@ 0 "" 2
 1854              	.LVL155:
 1855              		.thumb
ARM GAS  /tmp/ccNFblrO.s 			page 129


 1856              	.L156:
 1857              	.LBE129:
 1858              	.LBE128:
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 1859              		.loc 1 2302 0 discriminator 1
 1860 001a FEE7     		b	.L156
 1861              	.LVL156:
 1862              	.L155:
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1863              		.loc 1 2304 0
 1864 001c 03F13400 		add	r0, r3, #52
 1865 0020 7047     		bx	lr
 1866              	.L158:
 1867 0022 00BF     		.align	2
 1868              	.L157:
 1869 0024 00000000 		.word	.LANCHOR10
 1870              		.cfi_endproc
 1871              	.LFE24:
 1873              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1874              		.align	2
 1875              		.global	xTaskIncrementTick
 1876              		.thumb
 1877              		.thumb_func
 1879              	xTaskIncrementTick:
 1880              	.LFB25:
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 1881              		.loc 1 2623 0
 1882              		.cfi_startproc
 1883              		@ args = 0, pretend = 0, frame = 0
 1884              		@ frame_needed = 0, uses_anonymous_args = 0
 1885 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1886              	.LCFI21:
 1887              		.cfi_def_cfa_offset 24
 1888              		.cfi_offset 3, -24
 1889              		.cfi_offset 4, -20
 1890              		.cfi_offset 5, -16
 1891              		.cfi_offset 6, -12
 1892              		.cfi_offset 7, -8
 1893              		.cfi_offset 14, -4
 1894              	.LVL157:
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1895              		.loc 1 2632 0
 1896 0002 3B4B     		ldr	r3, .L178
 1897 0004 1B68     		ldr	r3, [r3]
 1898 0006 002B     		cmp	r3, #0
 1899 0008 65D1     		bne	.L160
 1900              	.LBB130:
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1901              		.loc 1 2636 0
 1902 000a 3A4B     		ldr	r3, .L178+4
 1903 000c 1D68     		ldr	r5, [r3]
 1904 000e 0135     		adds	r5, r5, #1
 1905              	.LVL158:
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1906              		.loc 1 2640 0
 1907 0010 1D60     		str	r5, [r3]
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccNFblrO.s 			page 130


 1908              		.loc 1 2642 0
 1909 0012 C5B9     		cbnz	r5, .L161
 1910              	.LBB131:
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1911              		.loc 1 2644 0
 1912 0014 384B     		ldr	r3, .L178+8
 1913 0016 1B68     		ldr	r3, [r3]
 1914 0018 1B68     		ldr	r3, [r3]
 1915 001a 43B1     		cbz	r3, .L162
 1916              	.LBB132:
 1917              	.LBB133:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1918              		.loc 2 195 0
 1919              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1920 001c 4FF05003 			mov r3, #80												
 1921 0020 83F31188 		msr basepri, r3											
 1922 0024 BFF36F8F 		isb														
 1923 0028 BFF34F8F 		dsb														
 1924              	
 1925              	@ 0 "" 2
 1926              	.LVL159:
 1927              		.thumb
 1928              	.L163:
 1929              	.LBE133:
 1930              	.LBE132:
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1931              		.loc 1 2644 0 discriminator 1
 1932 002c FEE7     		b	.L163
 1933              	.L162:
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1934              		.loc 1 2644 0 is_stmt 0 discriminator 2
 1935 002e 324A     		ldr	r2, .L178+8
 1936 0030 1168     		ldr	r1, [r2]
 1937              	.LVL160:
 1938 0032 324B     		ldr	r3, .L178+12
 1939 0034 1868     		ldr	r0, [r3]
 1940 0036 1060     		str	r0, [r2]
 1941 0038 1960     		str	r1, [r3]
 1942 003a 314A     		ldr	r2, .L178+16
 1943 003c 1368     		ldr	r3, [r2]
 1944 003e 0133     		adds	r3, r3, #1
 1945 0040 1360     		str	r3, [r2]
 1946 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1947              	.LVL161:
 1948              	.L161:
 1949              	.LBE131:
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1950              		.loc 1 2655 0 is_stmt 1
 1951 0046 2F4B     		ldr	r3, .L178+20
 1952 0048 1B68     		ldr	r3, [r3]
 1953 004a 9D42     		cmp	r5, r3
 1954 004c 03D2     		bcs	.L173
 1955              	.LBE130:
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1956              		.loc 1 2626 0
 1957 004e 0024     		movs	r4, #0
 1958 0050 36E0     		b	.L165
ARM GAS  /tmp/ccNFblrO.s 			page 131


 1959              	.LVL162:
 1960              	.L174:
 1961              	.LBB134:
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1962              		.loc 1 2721 0
 1963 0052 0124     		movs	r4, #1
 1964              	.LVL163:
 1965 0054 00E0     		b	.L164
 1966              	.LVL164:
 1967              	.L173:
 1968 0056 0024     		movs	r4, #0
 1969              	.LVL165:
 1970              	.L164:
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1971              		.loc 1 2659 0
 1972 0058 274B     		ldr	r3, .L178+8
 1973 005a 1B68     		ldr	r3, [r3]
 1974 005c 1B68     		ldr	r3, [r3]
 1975 005e 23B9     		cbnz	r3, .L166
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 1976              		.loc 1 2666 0
 1977 0060 4FF0FF32 		mov	r2, #-1
 1978 0064 274B     		ldr	r3, .L178+20
 1979 0066 1A60     		str	r2, [r3]
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1980              		.loc 1 2667 0
 1981 0068 2AE0     		b	.L165
 1982              	.L166:
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1983              		.loc 1 2675 0
 1984 006a 234B     		ldr	r3, .L178+8
 1985 006c 1B68     		ldr	r3, [r3]
 1986 006e DB68     		ldr	r3, [r3, #12]
 1987 0070 DE68     		ldr	r6, [r3, #12]
 1988              	.LVL166:
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1989              		.loc 1 2676 0
 1990 0072 7368     		ldr	r3, [r6, #4]
 1991              	.LVL167:
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1992              		.loc 1 2678 0
 1993 0074 9D42     		cmp	r5, r3
 1994 0076 02D2     		bcs	.L167
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 1995              		.loc 1 2685 0
 1996 0078 224A     		ldr	r2, .L178+20
 1997 007a 1360     		str	r3, [r2]
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1998              		.loc 1 2686 0
 1999 007c 20E0     		b	.L165
 2000              	.L167:
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2001              		.loc 1 2694 0
 2002 007e 371D     		adds	r7, r6, #4
 2003 0080 3846     		mov	r0, r7
 2004 0082 FFF7FEFF 		bl	uxListRemove
 2005              	.LVL168:
ARM GAS  /tmp/ccNFblrO.s 			page 132


2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2006              		.loc 1 2698 0
 2007 0086 B36A     		ldr	r3, [r6, #40]
 2008 0088 1BB1     		cbz	r3, .L168
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2009              		.loc 1 2700 0
 2010 008a 06F11800 		add	r0, r6, #24
 2011 008e FFF7FEFF 		bl	uxListRemove
 2012              	.LVL169:
 2013              	.L168:
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2014              		.loc 1 2709 0
 2015 0092 F36A     		ldr	r3, [r6, #44]
 2016 0094 0122     		movs	r2, #1
 2017 0096 02FA03F1 		lsl	r1, r2, r3
 2018 009a 1B48     		ldr	r0, .L178+24
 2019 009c 0268     		ldr	r2, [r0]
 2020 009e 0A43     		orrs	r2, r2, r1
 2021 00a0 0260     		str	r2, [r0]
 2022 00a2 03EB8303 		add	r3, r3, r3, lsl #2
 2023 00a6 9B00     		lsls	r3, r3, #2
 2024 00a8 1848     		ldr	r0, .L178+28
 2025 00aa 1844     		add	r0, r0, r3
 2026 00ac 3946     		mov	r1, r7
 2027 00ae FFF7FEFF 		bl	vListInsertEnd
 2028              	.LVL170:
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2029              		.loc 1 2719 0
 2030 00b2 F26A     		ldr	r2, [r6, #44]
 2031 00b4 164B     		ldr	r3, .L178+32
 2032 00b6 1B68     		ldr	r3, [r3]
 2033 00b8 DB6A     		ldr	r3, [r3, #44]
 2034 00ba 9A42     		cmp	r2, r3
 2035 00bc C9D2     		bcs	.L174
 2036 00be CBE7     		b	.L164
 2037              	.LVL171:
 2038              	.L165:
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2039              		.loc 1 2738 0
 2040 00c0 134B     		ldr	r3, .L178+32
 2041 00c2 1B68     		ldr	r3, [r3]
 2042 00c4 DB6A     		ldr	r3, [r3, #44]
 2043 00c6 03EB8303 		add	r3, r3, r3, lsl #2
 2044 00ca 9B00     		lsls	r3, r3, #2
 2045 00cc 0F4A     		ldr	r2, .L178+28
 2046 00ce D358     		ldr	r3, [r2, r3]
 2047 00d0 012B     		cmp	r3, #1
 2048 00d2 06D8     		bhi	.L175
 2049 00d4 06E0     		b	.L171
 2050              	.LVL172:
 2051              	.L160:
 2052              	.LBE134:
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2053              		.loc 1 2766 0
 2054 00d6 0F4A     		ldr	r2, .L178+36
 2055 00d8 1368     		ldr	r3, [r2]
 2056 00da 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccNFblrO.s 			page 133


 2057 00dc 1360     		str	r3, [r2]
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2058              		.loc 1 2626 0
 2059 00de 0024     		movs	r4, #0
 2060 00e0 00E0     		b	.L171
 2061              	.LVL173:
 2062              	.L175:
 2063              	.LBB135:
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2064              		.loc 1 2740 0
 2065 00e2 0124     		movs	r4, #1
 2066              	.LVL174:
 2067              	.L171:
 2068              	.LBE135:
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2069              		.loc 1 2779 0
 2070 00e4 0C4B     		ldr	r3, .L178+40
 2071 00e6 1B68     		ldr	r3, [r3]
 2072 00e8 03B1     		cbz	r3, .L172
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2073              		.loc 1 2781 0
 2074 00ea 0124     		movs	r4, #1
 2075              	.LVL175:
 2076              	.L172:
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2077              		.loc 1 2791 0
 2078 00ec 2046     		mov	r0, r4
 2079 00ee F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2080              	.LVL176:
 2081              	.L179:
 2082              		.align	2
 2083              	.L178:
 2084 00f0 00000000 		.word	.LANCHOR16
 2085 00f4 00000000 		.word	.LANCHOR15
 2086 00f8 00000000 		.word	.LANCHOR2
 2087 00fc 00000000 		.word	.LANCHOR8
 2088 0100 00000000 		.word	.LANCHOR18
 2089 0104 00000000 		.word	.LANCHOR3
 2090 0108 00000000 		.word	.LANCHOR13
 2091 010c 00000000 		.word	.LANCHOR4
 2092 0110 00000000 		.word	.LANCHOR10
 2093 0114 00000000 		.word	.LANCHOR19
 2094 0118 00000000 		.word	.LANCHOR20
 2095              		.cfi_endproc
 2096              	.LFE25:
 2098              		.section	.text.xTaskResumeAll,"ax",%progbits
 2099              		.align	2
 2100              		.global	xTaskResumeAll
 2101              		.thumb
 2102              		.thumb_func
 2104              	xTaskResumeAll:
 2105              	.LFB20:
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2106              		.loc 1 2132 0
 2107              		.cfi_startproc
 2108              		@ args = 0, pretend = 0, frame = 0
 2109              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccNFblrO.s 			page 134


 2110 0000 38B5     		push	{r3, r4, r5, lr}
 2111              	.LCFI22:
 2112              		.cfi_def_cfa_offset 16
 2113              		.cfi_offset 3, -16
 2114              		.cfi_offset 4, -12
 2115              		.cfi_offset 5, -8
 2116              		.cfi_offset 14, -4
 2117              	.LVL177:
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2118              		.loc 1 2138 0
 2119 0002 344B     		ldr	r3, .L195
 2120 0004 1B68     		ldr	r3, [r3]
 2121 0006 43B9     		cbnz	r3, .L181
 2122              	.LBB136:
 2123              	.LBB137:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2124              		.loc 2 195 0
 2125              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2126 0008 4FF05003 			mov r3, #80												
 2127 000c 83F31188 		msr basepri, r3											
 2128 0010 BFF36F8F 		isb														
 2129 0014 BFF34F8F 		dsb														
 2130              	
 2131              	@ 0 "" 2
 2132              	.LVL178:
 2133              		.thumb
 2134              	.L182:
 2135              	.LBE137:
 2136              	.LBE136:
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2137              		.loc 1 2138 0 discriminator 1
 2138 0018 FEE7     		b	.L182
 2139              	.L181:
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2140              		.loc 1 2145 0
 2141 001a FFF7FEFF 		bl	vPortEnterCritical
 2142              	.LVL179:
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2143              		.loc 1 2147 0
 2144 001e 2D4B     		ldr	r3, .L195
 2145 0020 1A68     		ldr	r2, [r3]
 2146 0022 013A     		subs	r2, r2, #1
 2147 0024 1A60     		str	r2, [r3]
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2148              		.loc 1 2149 0
 2149 0026 1B68     		ldr	r3, [r3]
 2150 0028 002B     		cmp	r3, #0
 2151 002a 4CD1     		bne	.L191
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2152              		.loc 1 2151 0
 2153 002c 2A4B     		ldr	r3, .L195+4
 2154 002e 1B68     		ldr	r3, [r3]
 2155 0030 33BB     		cbnz	r3, .L192
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2156              		.loc 1 2134 0
 2157 0032 0024     		movs	r4, #0
 2158 0034 4AE0     		b	.L183
ARM GAS  /tmp/ccNFblrO.s 			page 135


 2159              	.LVL180:
 2160              	.L186:
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2161              		.loc 1 2157 0
 2162 0036 294B     		ldr	r3, .L195+8
 2163 0038 DB68     		ldr	r3, [r3, #12]
 2164 003a DC68     		ldr	r4, [r3, #12]
 2165              	.LVL181:
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2166              		.loc 1 2158 0
 2167 003c 04F11800 		add	r0, r4, #24
 2168 0040 FFF7FEFF 		bl	uxListRemove
 2169              	.LVL182:
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2170              		.loc 1 2159 0
 2171 0044 251D     		adds	r5, r4, #4
 2172 0046 2846     		mov	r0, r5
 2173 0048 FFF7FEFF 		bl	uxListRemove
 2174              	.LVL183:
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2175              		.loc 1 2160 0
 2176 004c E36A     		ldr	r3, [r4, #44]
 2177 004e 0122     		movs	r2, #1
 2178 0050 02FA03F1 		lsl	r1, r2, r3
 2179 0054 2248     		ldr	r0, .L195+12
 2180 0056 0268     		ldr	r2, [r0]
 2181 0058 0A43     		orrs	r2, r2, r1
 2182 005a 0260     		str	r2, [r0]
 2183 005c 03EB8303 		add	r3, r3, r3, lsl #2
 2184 0060 9B00     		lsls	r3, r3, #2
 2185 0062 2048     		ldr	r0, .L195+16
 2186 0064 1844     		add	r0, r0, r3
 2187 0066 2946     		mov	r1, r5
 2188 0068 FFF7FEFF 		bl	vListInsertEnd
 2189              	.LVL184:
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2190              		.loc 1 2164 0
 2191 006c E26A     		ldr	r2, [r4, #44]
 2192 006e 1E4B     		ldr	r3, .L195+20
 2193 0070 1B68     		ldr	r3, [r3]
 2194 0072 DB6A     		ldr	r3, [r3, #44]
 2195 0074 9A42     		cmp	r2, r3
 2196 0076 04D3     		bcc	.L184
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2197              		.loc 1 2166 0
 2198 0078 0122     		movs	r2, #1
 2199 007a 1C4B     		ldr	r3, .L195+24
 2200 007c 1A60     		str	r2, [r3]
 2201 007e 00E0     		b	.L184
 2202              	.LVL185:
 2203              	.L192:
 2204 0080 0024     		movs	r4, #0
 2205              	.LVL186:
 2206              	.L184:
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2207              		.loc 1 2155 0
 2208 0082 164B     		ldr	r3, .L195+8
ARM GAS  /tmp/ccNFblrO.s 			page 136


 2209 0084 1B68     		ldr	r3, [r3]
 2210 0086 002B     		cmp	r3, #0
 2211 0088 D5D1     		bne	.L186
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2212              		.loc 1 2174 0
 2213 008a 0CB1     		cbz	r4, .L187
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2214              		.loc 1 2182 0
 2215 008c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2216              	.LVL187:
 2217              	.L187:
 2218              	.LBB138:
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2219              		.loc 1 2190 0
 2220 0090 174B     		ldr	r3, .L195+28
 2221 0092 1C68     		ldr	r4, [r3]
 2222              	.LVL188:
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2223              		.loc 1 2192 0
 2224 0094 54B1     		cbz	r4, .L188
 2225              	.L190:
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2226              		.loc 1 2196 0
 2227 0096 FFF7FEFF 		bl	xTaskIncrementTick
 2228              	.LVL189:
 2229 009a 10B1     		cbz	r0, .L189
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2230              		.loc 1 2198 0
 2231 009c 0122     		movs	r2, #1
 2232 009e 134B     		ldr	r3, .L195+24
 2233 00a0 1A60     		str	r2, [r3]
 2234              	.L189:
 2235              	.LVL190:
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2236              		.loc 1 2205 0
 2237 00a2 013C     		subs	r4, r4, #1
 2238              	.LVL191:
 2239 00a4 F7D1     		bne	.L190
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2240              		.loc 1 2207 0
 2241 00a6 0022     		movs	r2, #0
 2242 00a8 114B     		ldr	r3, .L195+28
 2243 00aa 1A60     		str	r2, [r3]
 2244              	.L188:
 2245              	.LBE138:
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2246              		.loc 1 2215 0
 2247 00ac 0F4B     		ldr	r3, .L195+24
 2248 00ae 1B68     		ldr	r3, [r3]
 2249 00b0 5BB1     		cbz	r3, .L193
 2250              	.LVL192:
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2251              		.loc 1 2222 0
 2252 00b2 4FF08052 		mov	r2, #268435456
 2253 00b6 0F4B     		ldr	r3, .L195+32
 2254 00b8 1A60     		str	r2, [r3]
 2255              	@ 2222 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
ARM GAS  /tmp/ccNFblrO.s 			page 137


 2256 00ba BFF34F8F 		dsb
 2257              	@ 0 "" 2
 2258              	@ 2222 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2259 00be BFF36F8F 		isb
 2260              	@ 0 "" 2
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2261              		.loc 1 2219 0
 2262              		.thumb
 2263 00c2 0124     		movs	r4, #1
 2264              	.LVL193:
 2265 00c4 02E0     		b	.L183
 2266              	.LVL194:
 2267              	.L191:
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2268              		.loc 1 2134 0
 2269 00c6 0024     		movs	r4, #0
 2270 00c8 00E0     		b	.L183
 2271              	.LVL195:
 2272              	.L193:
 2273 00ca 0024     		movs	r4, #0
 2274              	.LVL196:
 2275              	.L183:
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2276              		.loc 1 2235 0
 2277 00cc FFF7FEFF 		bl	vPortExitCritical
 2278              	.LVL197:
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2279              		.loc 1 2238 0
 2280 00d0 2046     		mov	r0, r4
 2281 00d2 38BD     		pop	{r3, r4, r5, pc}
 2282              	.LVL198:
 2283              	.L196:
 2284              		.align	2
 2285              	.L195:
 2286 00d4 00000000 		.word	.LANCHOR16
 2287 00d8 00000000 		.word	.LANCHOR9
 2288 00dc 00000000 		.word	.LANCHOR1
 2289 00e0 00000000 		.word	.LANCHOR13
 2290 00e4 00000000 		.word	.LANCHOR4
 2291 00e8 00000000 		.word	.LANCHOR10
 2292 00ec 00000000 		.word	.LANCHOR20
 2293 00f0 00000000 		.word	.LANCHOR19
 2294 00f4 04ED00E0 		.word	-536810236
 2295              		.cfi_endproc
 2296              	.LFE20:
 2298              		.section	.text.vTaskDelay,"ax",%progbits
 2299              		.align	2
 2300              		.global	vTaskDelay
 2301              		.thumb
 2302              		.thumb_func
 2304              	vTaskDelay:
 2305              	.LFB9:
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2306              		.loc 1 1292 0
 2307              		.cfi_startproc
 2308              		@ args = 0, pretend = 0, frame = 0
 2309              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccNFblrO.s 			page 138


 2310              	.LVL199:
 2311 0000 10B5     		push	{r4, lr}
 2312              	.LCFI23:
 2313              		.cfi_def_cfa_offset 8
 2314              		.cfi_offset 4, -8
 2315              		.cfi_offset 14, -4
 2316              	.LVL200:
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2317              		.loc 1 1296 0
 2318 0002 A8B1     		cbz	r0, .L202
 2319 0004 0446     		mov	r4, r0
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2320              		.loc 1 1298 0
 2321 0006 104B     		ldr	r3, .L204
 2322 0008 1B68     		ldr	r3, [r3]
 2323 000a 43B1     		cbz	r3, .L199
 2324              	.LBB139:
 2325              	.LBB140:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2326              		.loc 2 195 0
 2327              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2328 000c 4FF05003 			mov r3, #80												
 2329 0010 83F31188 		msr basepri, r3											
 2330 0014 BFF36F8F 		isb														
 2331 0018 BFF34F8F 		dsb														
 2332              	
 2333              	@ 0 "" 2
 2334              	.LVL201:
 2335              		.thumb
 2336              	.L200:
 2337              	.LBE140:
 2338              	.LBE139:
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2339              		.loc 1 1298 0 discriminator 1
 2340 001c FEE7     		b	.L200
 2341              	.L199:
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2342              		.loc 1 1299 0
 2343 001e FFF7FEFF 		bl	vTaskSuspendAll
 2344              	.LVL202:
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2345              		.loc 1 1310 0
 2346 0022 2046     		mov	r0, r4
 2347 0024 0021     		movs	r1, #0
 2348 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2349              	.LVL203:
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2350              		.loc 1 1312 0
 2351 002a FFF7FEFF 		bl	xTaskResumeAll
 2352              	.LVL204:
 2353 002e 00E0     		b	.L198
 2354              	.LVL205:
 2355              	.L202:
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2356              		.loc 1 1293 0
 2357 0030 0020     		movs	r0, #0
 2358              	.LVL206:
ARM GAS  /tmp/ccNFblrO.s 			page 139


 2359              	.L198:
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2360              		.loc 1 1321 0
 2361 0032 38B9     		cbnz	r0, .L197
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2362              		.loc 1 1323 0
 2363 0034 4FF08052 		mov	r2, #268435456
 2364 0038 044B     		ldr	r3, .L204+4
 2365 003a 1A60     		str	r2, [r3]
 2366              	@ 1323 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2367 003c BFF34F8F 		dsb
 2368              	@ 0 "" 2
 2369              	@ 1323 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2370 0040 BFF36F8F 		isb
 2371              	@ 0 "" 2
 2372              		.thumb
 2373              	.L197:
 2374 0044 10BD     		pop	{r4, pc}
 2375              	.L205:
 2376 0046 00BF     		.align	2
 2377              	.L204:
 2378 0048 00000000 		.word	.LANCHOR16
 2379 004c 04ED00E0 		.word	-536810236
 2380              		.cfi_endproc
 2381              	.LFE9:
 2383              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2384              		.align	2
 2385              		.global	vTaskSwitchContext
 2386              		.thumb
 2387              		.thumb_func
 2389              	vTaskSwitchContext:
 2390              	.LFB26:
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2391              		.loc 1 2887 0
 2392              		.cfi_startproc
 2393              		@ args = 0, pretend = 0, frame = 0
 2394              		@ frame_needed = 0, uses_anonymous_args = 0
 2395              		@ link register save eliminated.
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2396              		.loc 1 2888 0
 2397 0000 204B     		ldr	r3, .L213
 2398 0002 1B68     		ldr	r3, [r3]
 2399 0004 1BB1     		cbz	r3, .L207
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2400              		.loc 1 2892 0
 2401 0006 0122     		movs	r2, #1
 2402 0008 1F4B     		ldr	r3, .L213+4
 2403 000a 1A60     		str	r2, [r3]
 2404 000c 7047     		bx	lr
 2405              	.L207:
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2406              		.loc 1 2896 0
 2407 000e 0022     		movs	r2, #0
 2408 0010 1D4B     		ldr	r3, .L213+4
 2409 0012 1A60     		str	r2, [r3]
 2410              	.LBB141:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
ARM GAS  /tmp/ccNFblrO.s 			page 140


 2411              		.loc 1 2941 0
 2412 0014 1D4B     		ldr	r3, .L213+8
 2413 0016 1B68     		ldr	r3, [r3]
 2414              	.LVL207:
 2415              	.LBB142:
 2416              	.LBB143:
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 2417              		.loc 2 134 0
 2418              	@ 134 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2419 0018 B3FA83F3 		clz r3, r3
 2420              	@ 0 "" 2
 2421              	.LVL208:
 2422              		.thumb
 2423 001c DBB2     		uxtb	r3, r3
 2424              	.LVL209:
 2425              	.LBE143:
 2426              	.LBE142:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2427              		.loc 1 2941 0
 2428 001e C3F11F03 		rsb	r3, r3, #31
 2429              	.LVL210:
 2430 0022 03EB8302 		add	r2, r3, r3, lsl #2
 2431 0026 9200     		lsls	r2, r2, #2
 2432 0028 1949     		ldr	r1, .L213+12
 2433 002a 8A58     		ldr	r2, [r1, r2]
 2434 002c 42B9     		cbnz	r2, .L209
 2435              	.LBB144:
 2436              	.LBB145:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2437              		.loc 2 195 0
 2438              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2439 002e 4FF05003 			mov r3, #80												
 2440 0032 83F31188 		msr basepri, r3											
 2441 0036 BFF36F8F 		isb														
 2442 003a BFF34F8F 		dsb														
 2443              	
 2444              	@ 0 "" 2
 2445              	.LVL211:
 2446              		.thumb
 2447              	.L210:
 2448              	.LBE145:
 2449              	.LBE144:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2450              		.loc 1 2941 0 discriminator 1
 2451 003e FEE7     		b	.L210
 2452              	.LVL212:
 2453              	.L209:
 2454              	.LBE141:
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2455              		.loc 1 2887 0 discriminator 2
 2456 0040 10B4     		push	{r4}
 2457              	.LCFI24:
 2458              		.cfi_def_cfa_offset 4
 2459              		.cfi_offset 4, -4
 2460              	.LVL213:
 2461              	.LBB147:
 2462              	.LBB146:
ARM GAS  /tmp/ccNFblrO.s 			page 141


2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2463              		.loc 1 2941 0 discriminator 2
 2464 0042 134C     		ldr	r4, .L213+12
 2465 0044 9A00     		lsls	r2, r3, #2
 2466 0046 D118     		adds	r1, r2, r3
 2467 0048 8900     		lsls	r1, r1, #2
 2468 004a 2144     		add	r1, r1, r4
 2469 004c 4868     		ldr	r0, [r1, #4]
 2470 004e 4068     		ldr	r0, [r0, #4]
 2471 0050 4860     		str	r0, [r1, #4]
 2472 0052 1A44     		add	r2, r2, r3
 2473 0054 9200     		lsls	r2, r2, #2
 2474 0056 0832     		adds	r2, r2, #8
 2475 0058 2244     		add	r2, r2, r4
 2476 005a 9042     		cmp	r0, r2
 2477 005c 05D1     		bne	.L211
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2478              		.loc 1 2941 0 is_stmt 0 discriminator 3
 2479 005e 4168     		ldr	r1, [r0, #4]
 2480 0060 03EB8302 		add	r2, r3, r3, lsl #2
 2481 0064 9200     		lsls	r2, r2, #2
 2482 0066 2244     		add	r2, r2, r4
 2483 0068 5160     		str	r1, [r2, #4]
 2484              	.L211:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2485              		.loc 1 2941 0 discriminator 5
 2486 006a 03EB8303 		add	r3, r3, r3, lsl #2
 2487              	.LVL214:
 2488 006e 9B00     		lsls	r3, r3, #2
 2489 0070 074A     		ldr	r2, .L213+12
 2490 0072 1344     		add	r3, r3, r2
 2491 0074 5B68     		ldr	r3, [r3, #4]
 2492 0076 DA68     		ldr	r2, [r3, #12]
 2493 0078 064B     		ldr	r3, .L213+16
 2494 007a 1A60     		str	r2, [r3]
 2495              	.LBE146:
 2496              	.LBE147:
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2497              		.loc 1 2959 0 is_stmt 1 discriminator 5
 2498 007c 5DF8044B 		ldr	r4, [sp], #4
 2499              	.LCFI25:
 2500              		.cfi_restore 4
 2501              		.cfi_def_cfa_offset 0
 2502 0080 7047     		bx	lr
 2503              	.L214:
 2504 0082 00BF     		.align	2
 2505              	.L213:
 2506 0084 00000000 		.word	.LANCHOR16
 2507 0088 00000000 		.word	.LANCHOR20
 2508 008c 00000000 		.word	.LANCHOR13
 2509 0090 00000000 		.word	.LANCHOR4
 2510 0094 00000000 		.word	.LANCHOR10
 2511              		.cfi_endproc
 2512              	.LFE26:
 2514              		.section	.text.vTaskSuspend,"ax",%progbits
 2515              		.align	2
 2516              		.global	vTaskSuspend
ARM GAS  /tmp/ccNFblrO.s 			page 142


 2517              		.thumb
 2518              		.thumb_func
 2520              	vTaskSuspend:
 2521              	.LFB13:
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2522              		.loc 1 1655 0
 2523              		.cfi_startproc
 2524              		@ args = 0, pretend = 0, frame = 0
 2525              		@ frame_needed = 0, uses_anonymous_args = 0
 2526              	.LVL215:
 2527 0000 38B5     		push	{r3, r4, r5, lr}
 2528              	.LCFI26:
 2529              		.cfi_def_cfa_offset 16
 2530              		.cfi_offset 3, -16
 2531              		.cfi_offset 4, -12
 2532              		.cfi_offset 5, -8
 2533              		.cfi_offset 14, -4
 2534 0002 0446     		mov	r4, r0
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2535              		.loc 1 1658 0
 2536 0004 FFF7FEFF 		bl	vPortEnterCritical
 2537              	.LVL216:
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2538              		.loc 1 1662 0
 2539 0008 0CB9     		cbnz	r4, .L216
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2540              		.loc 1 1662 0 is_stmt 0 discriminator 1
 2541 000a 2E4B     		ldr	r3, .L227
 2542 000c 1C68     		ldr	r4, [r3]
 2543              	.LVL217:
 2544              	.L216:
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2545              		.loc 1 1668 0 is_stmt 1 discriminator 4
 2546 000e 251D     		adds	r5, r4, #4
 2547 0010 2846     		mov	r0, r5
 2548 0012 FFF7FEFF 		bl	uxListRemove
 2549              	.LVL218:
 2550 0016 70B9     		cbnz	r0, .L217
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2551              		.loc 1 1670 0
 2552 0018 E26A     		ldr	r2, [r4, #44]
 2553 001a 02EB8203 		add	r3, r2, r2, lsl #2
 2554 001e 9B00     		lsls	r3, r3, #2
 2555 0020 2949     		ldr	r1, .L227+4
 2556 0022 CB58     		ldr	r3, [r1, r3]
 2557 0024 3BB9     		cbnz	r3, .L217
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2558              		.loc 1 1670 0 is_stmt 0 discriminator 1
 2559 0026 0123     		movs	r3, #1
 2560 0028 03FA02F2 		lsl	r2, r3, r2
 2561 002c 2749     		ldr	r1, .L227+8
 2562 002e 0B68     		ldr	r3, [r1]
 2563 0030 23EA0203 		bic	r3, r3, r2
 2564 0034 0B60     		str	r3, [r1]
 2565              	.L217:
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2566              		.loc 1 1678 0 is_stmt 1
ARM GAS  /tmp/ccNFblrO.s 			page 143


 2567 0036 A36A     		ldr	r3, [r4, #40]
 2568 0038 1BB1     		cbz	r3, .L218
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2569              		.loc 1 1680 0
 2570 003a 04F11800 		add	r0, r4, #24
 2571 003e FFF7FEFF 		bl	uxListRemove
 2572              	.LVL219:
 2573              	.L218:
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2574              		.loc 1 1687 0
 2575 0042 2348     		ldr	r0, .L227+12
 2576 0044 2946     		mov	r1, r5
 2577 0046 FFF7FEFF 		bl	vListInsertEnd
 2578              	.LVL220:
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2579              		.loc 1 1691 0
 2580 004a 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 2581 004e DBB2     		uxtb	r3, r3
 2582 0050 012B     		cmp	r3, #1
 2583 0052 02D1     		bne	.L219
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2584              		.loc 1 1695 0
 2585 0054 0023     		movs	r3, #0
 2586 0056 84F85030 		strb	r3, [r4, #80]
 2587              	.L219:
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2588              		.loc 1 1700 0
 2589 005a FFF7FEFF 		bl	vPortExitCritical
 2590              	.LVL221:
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2591              		.loc 1 1702 0
 2592 005e 1D4B     		ldr	r3, .L227+16
 2593 0060 1B68     		ldr	r3, [r3]
 2594 0062 2BB1     		cbz	r3, .L220
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2595              		.loc 1 1706 0
 2596 0064 FFF7FEFF 		bl	vPortEnterCritical
 2597              	.LVL222:
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2598              		.loc 1 1708 0
 2599 0068 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2600              	.LVL223:
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2601              		.loc 1 1710 0
 2602 006c FFF7FEFF 		bl	vPortExitCritical
 2603              	.LVL224:
 2604              	.L220:
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2605              		.loc 1 1717 0
 2606 0070 144B     		ldr	r3, .L227
 2607 0072 1B68     		ldr	r3, [r3]
 2608 0074 9C42     		cmp	r4, r3
 2609 0076 23D1     		bne	.L215
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2610              		.loc 1 1719 0
 2611 0078 164B     		ldr	r3, .L227+16
 2612 007a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccNFblrO.s 			page 144


 2613 007c A3B1     		cbz	r3, .L222
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2614              		.loc 1 1722 0
 2615 007e 164B     		ldr	r3, .L227+20
 2616 0080 1B68     		ldr	r3, [r3]
 2617 0082 43B1     		cbz	r3, .L223
 2618              	.LBB148:
 2619              	.LBB149:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2620              		.loc 2 195 0
 2621              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2622 0084 4FF05003 			mov r3, #80												
 2623 0088 83F31188 		msr basepri, r3											
 2624 008c BFF36F8F 		isb														
 2625 0090 BFF34F8F 		dsb														
 2626              	
 2627              	@ 0 "" 2
 2628              	.LVL225:
 2629              		.thumb
 2630              	.L224:
 2631              	.LBE149:
 2632              	.LBE148:
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2633              		.loc 1 1722 0 discriminator 1
 2634 0094 FEE7     		b	.L224
 2635              	.L223:
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2636              		.loc 1 1723 0
 2637 0096 4FF08052 		mov	r2, #268435456
 2638 009a 104B     		ldr	r3, .L227+24
 2639 009c 1A60     		str	r2, [r3]
 2640              	@ 1723 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2641 009e BFF34F8F 		dsb
 2642              	@ 0 "" 2
 2643              	@ 1723 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2644 00a2 BFF36F8F 		isb
 2645              	@ 0 "" 2
 2646              		.thumb
 2647 00a6 38BD     		pop	{r3, r4, r5, pc}
 2648              	.LVL226:
 2649              	.L222:
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2650              		.loc 1 1730 0
 2651 00a8 094B     		ldr	r3, .L227+12
 2652 00aa 1A68     		ldr	r2, [r3]
 2653 00ac 0C4B     		ldr	r3, .L227+28
 2654 00ae 1B68     		ldr	r3, [r3]
 2655 00b0 9A42     		cmp	r2, r3
 2656 00b2 03D1     		bne	.L225
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2657              		.loc 1 1736 0
 2658 00b4 0022     		movs	r2, #0
 2659 00b6 034B     		ldr	r3, .L227
 2660 00b8 1A60     		str	r2, [r3]
 2661 00ba 38BD     		pop	{r3, r4, r5, pc}
 2662              	.LVL227:
 2663              	.L225:
ARM GAS  /tmp/ccNFblrO.s 			page 145


1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2664              		.loc 1 1740 0
 2665 00bc FFF7FEFF 		bl	vTaskSwitchContext
 2666              	.LVL228:
 2667              	.L215:
 2668 00c0 38BD     		pop	{r3, r4, r5, pc}
 2669              	.LVL229:
 2670              	.L228:
 2671 00c2 00BF     		.align	2
 2672              	.L227:
 2673 00c4 00000000 		.word	.LANCHOR10
 2674 00c8 00000000 		.word	.LANCHOR4
 2675 00cc 00000000 		.word	.LANCHOR13
 2676 00d0 00000000 		.word	.LANCHOR0
 2677 00d4 00000000 		.word	.LANCHOR11
 2678 00d8 00000000 		.word	.LANCHOR16
 2679 00dc 04ED00E0 		.word	-536810236
 2680 00e0 00000000 		.word	.LANCHOR9
 2681              		.cfi_endproc
 2682              	.LFE13:
 2684              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2685              		.align	2
 2686              		.global	vTaskPlaceOnEventList
 2687              		.thumb
 2688              		.thumb_func
 2690              	vTaskPlaceOnEventList:
 2691              	.LFB27:
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2692              		.loc 1 2963 0
 2693              		.cfi_startproc
 2694              		@ args = 0, pretend = 0, frame = 0
 2695              		@ frame_needed = 0, uses_anonymous_args = 0
 2696              	.LVL230:
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2697              		.loc 1 2964 0
 2698 0000 40B9     		cbnz	r0, .L230
 2699              	.LBB150:
 2700              	.LBB151:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2701              		.loc 2 195 0
 2702              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2703 0002 4FF05003 			mov r3, #80												
 2704 0006 83F31188 		msr basepri, r3											
 2705 000a BFF36F8F 		isb														
 2706 000e BFF34F8F 		dsb														
 2707              	
 2708              	@ 0 "" 2
 2709              	.LVL231:
 2710              		.thumb
 2711              	.L231:
 2712              	.LBE151:
 2713              	.LBE150:
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2714              		.loc 1 2964 0 discriminator 1
 2715 0012 FEE7     		b	.L231
 2716              	.L230:
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
ARM GAS  /tmp/ccNFblrO.s 			page 146


 2717              		.loc 1 2963 0
 2718 0014 10B5     		push	{r4, lr}
 2719              	.LCFI27:
 2720              		.cfi_def_cfa_offset 8
 2721              		.cfi_offset 4, -8
 2722              		.cfi_offset 14, -4
 2723 0016 0C46     		mov	r4, r1
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2724              		.loc 1 2973 0
 2725 0018 044B     		ldr	r3, .L233
 2726 001a 1968     		ldr	r1, [r3]
 2727              	.LVL232:
 2728 001c 1831     		adds	r1, r1, #24
 2729 001e FFF7FEFF 		bl	vListInsert
 2730              	.LVL233:
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2731              		.loc 1 2975 0
 2732 0022 2046     		mov	r0, r4
 2733 0024 0121     		movs	r1, #1
 2734 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2735              	.LVL234:
 2736 002a 10BD     		pop	{r4, pc}
 2737              	.LVL235:
 2738              	.L234:
 2739              		.align	2
 2740              	.L233:
 2741 002c 00000000 		.word	.LANCHOR10
 2742              		.cfi_endproc
 2743              	.LFE27:
 2745              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2746              		.align	2
 2747              		.global	vTaskPlaceOnUnorderedEventList
 2748              		.thumb
 2749              		.thumb_func
 2751              	vTaskPlaceOnUnorderedEventList:
 2752              	.LFB28:
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2753              		.loc 1 2980 0
 2754              		.cfi_startproc
 2755              		@ args = 0, pretend = 0, frame = 0
 2756              		@ frame_needed = 0, uses_anonymous_args = 0
 2757              	.LVL236:
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2758              		.loc 1 2981 0
 2759 0000 40B9     		cbnz	r0, .L236
 2760              	.LBB152:
 2761              	.LBB153:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2762              		.loc 2 195 0
 2763              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2764 0002 4FF05003 			mov r3, #80												
 2765 0006 83F31188 		msr basepri, r3											
 2766 000a BFF36F8F 		isb														
 2767 000e BFF34F8F 		dsb														
 2768              	
 2769              	@ 0 "" 2
 2770              	.LVL237:
ARM GAS  /tmp/ccNFblrO.s 			page 147


 2771              		.thumb
 2772              	.L237:
 2773              	.LBE153:
 2774              	.LBE152:
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2775              		.loc 1 2981 0 discriminator 1
 2776 0012 FEE7     		b	.L237
 2777              	.L236:
 2778 0014 0346     		mov	r3, r0
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2779              		.loc 1 2985 0
 2780 0016 0F48     		ldr	r0, .L241
 2781              	.LVL238:
 2782 0018 0068     		ldr	r0, [r0]
 2783 001a 40B9     		cbnz	r0, .L238
 2784              	.LBB154:
 2785              	.LBB155:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2786              		.loc 2 195 0
 2787              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2788 001c 4FF05003 			mov r3, #80												
 2789 0020 83F31188 		msr basepri, r3											
 2790 0024 BFF36F8F 		isb														
 2791 0028 BFF34F8F 		dsb														
 2792              	
 2793              	@ 0 "" 2
 2794              	.LVL239:
 2795              		.thumb
 2796              	.L239:
 2797              	.LBE155:
 2798              	.LBE154:
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2799              		.loc 1 2985 0 discriminator 2
 2800 002c FEE7     		b	.L239
 2801              	.LVL240:
 2802              	.L238:
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2803              		.loc 1 2980 0
 2804 002e 10B5     		push	{r4, lr}
 2805              	.LCFI28:
 2806              		.cfi_def_cfa_offset 8
 2807              		.cfi_offset 4, -8
 2808              		.cfi_offset 14, -4
 2809 0030 1846     		mov	r0, r3
 2810 0032 1446     		mov	r4, r2
 2811 0034 0B46     		mov	r3, r1
 2812              	.LVL241:
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2813              		.loc 1 2990 0
 2814 0036 084A     		ldr	r2, .L241+4
 2815              	.LVL242:
 2816 0038 1168     		ldr	r1, [r2]
 2817              	.LVL243:
 2818 003a 43F00043 		orr	r3, r3, #-2147483648
 2819              	.LVL244:
 2820 003e 8B61     		str	r3, [r1, #24]
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccNFblrO.s 			page 148


 2821              		.loc 1 2997 0
 2822 0040 1168     		ldr	r1, [r2]
 2823 0042 1831     		adds	r1, r1, #24
 2824 0044 FFF7FEFF 		bl	vListInsertEnd
 2825              	.LVL245:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2826              		.loc 1 2999 0
 2827 0048 2046     		mov	r0, r4
 2828 004a 0121     		movs	r1, #1
 2829 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2830              	.LVL246:
 2831 0050 10BD     		pop	{r4, pc}
 2832              	.LVL247:
 2833              	.L242:
 2834 0052 00BF     		.align	2
 2835              	.L241:
 2836 0054 00000000 		.word	.LANCHOR16
 2837 0058 00000000 		.word	.LANCHOR10
 2838              		.cfi_endproc
 2839              	.LFE28:
 2841              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2842              		.align	2
 2843              		.global	xTaskRemoveFromEventList
 2844              		.thumb
 2845              		.thumb_func
 2847              	xTaskRemoveFromEventList:
 2848              	.LFB29:
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 2849              		.loc 1 3037 0
 2850              		.cfi_startproc
 2851              		@ args = 0, pretend = 0, frame = 0
 2852              		@ frame_needed = 0, uses_anonymous_args = 0
 2853              	.LVL248:
 2854 0000 38B5     		push	{r3, r4, r5, lr}
 2855              	.LCFI29:
 2856              		.cfi_def_cfa_offset 16
 2857              		.cfi_offset 3, -16
 2858              		.cfi_offset 4, -12
 2859              		.cfi_offset 5, -8
 2860              		.cfi_offset 14, -4
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2861              		.loc 1 3054 0
 2862 0002 C368     		ldr	r3, [r0, #12]
 2863 0004 DC68     		ldr	r4, [r3, #12]
 2864              	.LVL249:
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2865              		.loc 1 3055 0
 2866 0006 44B9     		cbnz	r4, .L244
 2867              	.LBB156:
 2868              	.LBB157:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2869              		.loc 2 195 0
 2870              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2871 0008 4FF05003 			mov r3, #80												
 2872 000c 83F31188 		msr basepri, r3											
 2873 0010 BFF36F8F 		isb														
 2874 0014 BFF34F8F 		dsb														
ARM GAS  /tmp/ccNFblrO.s 			page 149


 2875              	
 2876              	@ 0 "" 2
 2877              	.LVL250:
 2878              		.thumb
 2879              	.L245:
 2880              	.LBE157:
 2881              	.LBE156:
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2882              		.loc 1 3055 0 discriminator 1
 2883 0018 FEE7     		b	.L245
 2884              	.L244:
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2885              		.loc 1 3056 0
 2886 001a 04F11805 		add	r5, r4, #24
 2887 001e 2846     		mov	r0, r5
 2888              	.LVL251:
 2889 0020 FFF7FEFF 		bl	uxListRemove
 2890              	.LVL252:
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2891              		.loc 1 3058 0
 2892 0024 134B     		ldr	r3, .L251
 2893 0026 1B68     		ldr	r3, [r3]
 2894 0028 A3B9     		cbnz	r3, .L246
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2895              		.loc 1 3060 0
 2896 002a 251D     		adds	r5, r4, #4
 2897 002c 2846     		mov	r0, r5
 2898 002e FFF7FEFF 		bl	uxListRemove
 2899              	.LVL253:
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2900              		.loc 1 3061 0
 2901 0032 E36A     		ldr	r3, [r4, #44]
 2902 0034 0122     		movs	r2, #1
 2903 0036 02FA03F1 		lsl	r1, r2, r3
 2904 003a 0F48     		ldr	r0, .L251+4
 2905 003c 0268     		ldr	r2, [r0]
 2906 003e 0A43     		orrs	r2, r2, r1
 2907 0040 0260     		str	r2, [r0]
 2908 0042 03EB8303 		add	r3, r3, r3, lsl #2
 2909 0046 9B00     		lsls	r3, r3, #2
 2910 0048 0C48     		ldr	r0, .L251+8
 2911 004a 1844     		add	r0, r0, r3
 2912 004c 2946     		mov	r1, r5
 2913 004e FFF7FEFF 		bl	vListInsertEnd
 2914              	.LVL254:
 2915 0052 03E0     		b	.L247
 2916              	.L246:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2917              		.loc 1 3067 0
 2918 0054 0A48     		ldr	r0, .L251+12
 2919 0056 2946     		mov	r1, r5
 2920 0058 FFF7FEFF 		bl	vListInsertEnd
 2921              	.LVL255:
 2922              	.L247:
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2923              		.loc 1 3070 0
 2924 005c E26A     		ldr	r2, [r4, #44]
ARM GAS  /tmp/ccNFblrO.s 			page 150


 2925 005e 094B     		ldr	r3, .L251+16
 2926 0060 1B68     		ldr	r3, [r3]
 2927 0062 DB6A     		ldr	r3, [r3, #44]
 2928 0064 9A42     		cmp	r2, r3
 2929 0066 03D9     		bls	.L249
 2930              	.LVL256:
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2931              		.loc 1 3079 0
 2932 0068 0120     		movs	r0, #1
 2933 006a 074B     		ldr	r3, .L251+20
 2934 006c 1860     		str	r0, [r3]
 2935 006e 38BD     		pop	{r3, r4, r5, pc}
 2936              	.LVL257:
 2937              	.L249:
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2938              		.loc 1 3083 0
 2939 0070 0020     		movs	r0, #0
 2940              	.LVL258:
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2941              		.loc 1 3101 0
 2942 0072 38BD     		pop	{r3, r4, r5, pc}
 2943              	.LVL259:
 2944              	.L252:
 2945              		.align	2
 2946              	.L251:
 2947 0074 00000000 		.word	.LANCHOR16
 2948 0078 00000000 		.word	.LANCHOR13
 2949 007c 00000000 		.word	.LANCHOR4
 2950 0080 00000000 		.word	.LANCHOR1
 2951 0084 00000000 		.word	.LANCHOR10
 2952 0088 00000000 		.word	.LANCHOR20
 2953              		.cfi_endproc
 2954              	.LFE29:
 2956              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 2957              		.align	2
 2958              		.global	vTaskRemoveFromUnorderedEventList
 2959              		.thumb
 2960              		.thumb_func
 2962              	vTaskRemoveFromUnorderedEventList:
 2963              	.LFB30:
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 2964              		.loc 1 3105 0
 2965              		.cfi_startproc
 2966              		@ args = 0, pretend = 0, frame = 0
 2967              		@ frame_needed = 0, uses_anonymous_args = 0
 2968              	.LVL260:
 2969 0000 38B5     		push	{r3, r4, r5, lr}
 2970              	.LCFI30:
 2971              		.cfi_def_cfa_offset 16
 2972              		.cfi_offset 3, -16
 2973              		.cfi_offset 4, -12
 2974              		.cfi_offset 5, -8
 2975              		.cfi_offset 14, -4
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2976              		.loc 1 3110 0
 2977 0002 1D4B     		ldr	r3, .L260
 2978 0004 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccNFblrO.s 			page 151


 2979 0006 43B9     		cbnz	r3, .L254
 2980              	.LBB158:
 2981              	.LBB159:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2982              		.loc 2 195 0
 2983              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2984 0008 4FF05003 			mov r3, #80												
 2985 000c 83F31188 		msr basepri, r3											
 2986 0010 BFF36F8F 		isb														
 2987 0014 BFF34F8F 		dsb														
 2988              	
 2989              	@ 0 "" 2
 2990              	.LVL261:
 2991              		.thumb
 2992              	.L255:
 2993              	.LBE159:
 2994              	.LBE158:
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2995              		.loc 1 3110 0 discriminator 1
 2996 0018 FEE7     		b	.L255
 2997              	.L254:
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2998              		.loc 1 3113 0
 2999 001a 41F00043 		orr	r3, r1, #-2147483648
 3000 001e 0360     		str	r3, [r0]
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3001              		.loc 1 3117 0
 3002 0020 C468     		ldr	r4, [r0, #12]
 3003              	.LVL262:
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3004              		.loc 1 3118 0
 3005 0022 44B9     		cbnz	r4, .L256
 3006              	.LBB160:
 3007              	.LBB161:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3008              		.loc 2 195 0
 3009              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3010 0024 4FF05003 			mov r3, #80												
 3011 0028 83F31188 		msr basepri, r3											
 3012 002c BFF36F8F 		isb														
 3013 0030 BFF34F8F 		dsb														
 3014              	
 3015              	@ 0 "" 2
 3016              	.LVL263:
 3017              		.thumb
 3018              	.L257:
 3019              	.LBE161:
 3020              	.LBE160:
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3021              		.loc 1 3118 0 discriminator 2
 3022 0034 FEE7     		b	.L257
 3023              	.L256:
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3024              		.loc 1 3119 0
 3025 0036 FFF7FEFF 		bl	uxListRemove
 3026              	.LVL264:
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
ARM GAS  /tmp/ccNFblrO.s 			page 152


 3027              		.loc 1 3124 0
 3028 003a 251D     		adds	r5, r4, #4
 3029 003c 2846     		mov	r0, r5
 3030 003e FFF7FEFF 		bl	uxListRemove
 3031              	.LVL265:
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3032              		.loc 1 3125 0
 3033 0042 E36A     		ldr	r3, [r4, #44]
 3034 0044 0122     		movs	r2, #1
 3035 0046 02FA03F1 		lsl	r1, r2, r3
 3036 004a 0C48     		ldr	r0, .L260+4
 3037 004c 0268     		ldr	r2, [r0]
 3038 004e 0A43     		orrs	r2, r2, r1
 3039 0050 0260     		str	r2, [r0]
 3040 0052 03EB8303 		add	r3, r3, r3, lsl #2
 3041 0056 9B00     		lsls	r3, r3, #2
 3042 0058 0948     		ldr	r0, .L260+8
 3043 005a 1844     		add	r0, r0, r3
 3044 005c 2946     		mov	r1, r5
 3045 005e FFF7FEFF 		bl	vListInsertEnd
 3046              	.LVL266:
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3047              		.loc 1 3127 0
 3048 0062 E26A     		ldr	r2, [r4, #44]
 3049 0064 074B     		ldr	r3, .L260+12
 3050 0066 1B68     		ldr	r3, [r3]
 3051 0068 DB6A     		ldr	r3, [r3, #44]
 3052 006a 9A42     		cmp	r2, r3
 3053 006c 02D9     		bls	.L253
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3054              		.loc 1 3133 0
 3055 006e 0122     		movs	r2, #1
 3056 0070 054B     		ldr	r3, .L260+16
 3057 0072 1A60     		str	r2, [r3]
 3058              	.L253:
 3059 0074 38BD     		pop	{r3, r4, r5, pc}
 3060              	.LVL267:
 3061              	.L261:
 3062 0076 00BF     		.align	2
 3063              	.L260:
 3064 0078 00000000 		.word	.LANCHOR16
 3065 007c 00000000 		.word	.LANCHOR13
 3066 0080 00000000 		.word	.LANCHOR4
 3067 0084 00000000 		.word	.LANCHOR10
 3068 0088 00000000 		.word	.LANCHOR20
 3069              		.cfi_endproc
 3070              	.LFE30:
 3072              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3073              		.align	2
 3074              		.global	vTaskSetTimeOutState
 3075              		.thumb
 3076              		.thumb_func
 3078              	vTaskSetTimeOutState:
 3079              	.LFB31:
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3080              		.loc 1 3139 0
 3081              		.cfi_startproc
ARM GAS  /tmp/ccNFblrO.s 			page 153


 3082              		@ args = 0, pretend = 0, frame = 0
 3083              		@ frame_needed = 0, uses_anonymous_args = 0
 3084              	.LVL268:
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3085              		.loc 1 3140 0
 3086 0000 40B9     		cbnz	r0, .L263
 3087              	.LBB162:
 3088              	.LBB163:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3089              		.loc 2 195 0
 3090              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3091 0002 4FF05003 			mov r3, #80												
 3092 0006 83F31188 		msr basepri, r3											
 3093 000a BFF36F8F 		isb														
 3094 000e BFF34F8F 		dsb														
 3095              	
 3096              	@ 0 "" 2
 3097              	.LVL269:
 3098              		.thumb
 3099              	.L264:
 3100              	.LBE163:
 3101              	.LBE162:
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3102              		.loc 1 3140 0 discriminator 1
 3103 0012 FEE7     		b	.L264
 3104              	.L263:
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3105              		.loc 1 3139 0
 3106 0014 10B5     		push	{r4, lr}
 3107              	.LCFI31:
 3108              		.cfi_def_cfa_offset 8
 3109              		.cfi_offset 4, -8
 3110              		.cfi_offset 14, -4
 3111 0016 0446     		mov	r4, r0
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3112              		.loc 1 3141 0
 3113 0018 FFF7FEFF 		bl	vPortEnterCritical
 3114              	.LVL270:
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3115              		.loc 1 3143 0
 3116 001c 044B     		ldr	r3, .L266
 3117 001e 1B68     		ldr	r3, [r3]
 3118 0020 2360     		str	r3, [r4]
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3119              		.loc 1 3144 0
 3120 0022 044B     		ldr	r3, .L266+4
 3121 0024 1B68     		ldr	r3, [r3]
 3122 0026 6360     		str	r3, [r4, #4]
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3123              		.loc 1 3146 0
 3124 0028 FFF7FEFF 		bl	vPortExitCritical
 3125              	.LVL271:
 3126 002c 10BD     		pop	{r4, pc}
 3127              	.LVL272:
 3128              	.L267:
 3129 002e 00BF     		.align	2
 3130              	.L266:
ARM GAS  /tmp/ccNFblrO.s 			page 154


 3131 0030 00000000 		.word	.LANCHOR18
 3132 0034 00000000 		.word	.LANCHOR15
 3133              		.cfi_endproc
 3134              	.LFE31:
 3136              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3137              		.align	2
 3138              		.global	vTaskInternalSetTimeOutState
 3139              		.thumb
 3140              		.thumb_func
 3142              	vTaskInternalSetTimeOutState:
 3143              	.LFB32:
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3144              		.loc 1 3151 0
 3145              		.cfi_startproc
 3146              		@ args = 0, pretend = 0, frame = 0
 3147              		@ frame_needed = 0, uses_anonymous_args = 0
 3148              		@ link register save eliminated.
 3149              	.LVL273:
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3150              		.loc 1 3153 0
 3151 0000 034B     		ldr	r3, .L269
 3152 0002 1B68     		ldr	r3, [r3]
 3153 0004 0360     		str	r3, [r0]
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3154              		.loc 1 3154 0
 3155 0006 034B     		ldr	r3, .L269+4
 3156 0008 1B68     		ldr	r3, [r3]
 3157 000a 4360     		str	r3, [r0, #4]
 3158 000c 7047     		bx	lr
 3159              	.L270:
 3160 000e 00BF     		.align	2
 3161              	.L269:
 3162 0010 00000000 		.word	.LANCHOR18
 3163 0014 00000000 		.word	.LANCHOR15
 3164              		.cfi_endproc
 3165              	.LFE32:
 3167              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3168              		.align	2
 3169              		.global	xTaskCheckForTimeOut
 3170              		.thumb
 3171              		.thumb_func
 3173              	xTaskCheckForTimeOut:
 3174              	.LFB33:
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3175              		.loc 1 3159 0
 3176              		.cfi_startproc
 3177              		@ args = 0, pretend = 0, frame = 0
 3178              		@ frame_needed = 0, uses_anonymous_args = 0
 3179              	.LVL274:
 3180 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3181              	.LCFI32:
 3182              		.cfi_def_cfa_offset 24
 3183              		.cfi_offset 3, -24
 3184              		.cfi_offset 4, -20
 3185              		.cfi_offset 5, -16
 3186              		.cfi_offset 6, -12
 3187              		.cfi_offset 7, -8
ARM GAS  /tmp/ccNFblrO.s 			page 155


 3188              		.cfi_offset 14, -4
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3189              		.loc 1 3162 0
 3190 0002 40B9     		cbnz	r0, .L272
 3191              	.LBB164:
 3192              	.LBB165:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3193              		.loc 2 195 0
 3194              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3195 0004 4FF05003 			mov r3, #80												
 3196 0008 83F31188 		msr basepri, r3											
 3197 000c BFF36F8F 		isb														
 3198 0010 BFF34F8F 		dsb														
 3199              	
 3200              	@ 0 "" 2
 3201              	.LVL275:
 3202              		.thumb
 3203              	.L273:
 3204              	.LBE165:
 3205              	.LBE164:
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3206              		.loc 1 3162 0 discriminator 1
 3207 0014 FEE7     		b	.L273
 3208              	.L272:
 3209 0016 0546     		mov	r5, r0
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3210              		.loc 1 3163 0
 3211 0018 41B9     		cbnz	r1, .L274
 3212              	.LBB166:
 3213              	.LBB167:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3214              		.loc 2 195 0
 3215              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3216 001a 4FF05003 			mov r3, #80												
 3217 001e 83F31188 		msr basepri, r3											
 3218 0022 BFF36F8F 		isb														
 3219 0026 BFF34F8F 		dsb														
 3220              	
 3221              	@ 0 "" 2
 3222              	.LVL276:
 3223              		.thumb
 3224              	.L275:
 3225              	.LBE167:
 3226              	.LBE166:
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3227              		.loc 1 3163 0 discriminator 2
 3228 002a FEE7     		b	.L275
 3229              	.L274:
 3230 002c 0C46     		mov	r4, r1
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3231              		.loc 1 3165 0
 3232 002e FFF7FEFF 		bl	vPortEnterCritical
 3233              	.LVL277:
 3234              	.LBB168:
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3235              		.loc 1 3168 0
 3236 0032 114B     		ldr	r3, .L282
ARM GAS  /tmp/ccNFblrO.s 			page 156


 3237 0034 1868     		ldr	r0, [r3]
 3238              	.LVL278:
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3239              		.loc 1 3169 0
 3240 0036 6968     		ldr	r1, [r5, #4]
 3241 0038 421A     		subs	r2, r0, r1
 3242              	.LVL279:
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3243              		.loc 1 3183 0
 3244 003a 2368     		ldr	r3, [r4]
 3245 003c B3F1FF3F 		cmp	r3, #-1
 3246 0040 13D0     		beq	.L279
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3247              		.loc 1 3193 0
 3248 0042 2F68     		ldr	r7, [r5]
 3249 0044 0D4E     		ldr	r6, .L282+4
 3250 0046 3668     		ldr	r6, [r6]
 3251 0048 B742     		cmp	r7, r6
 3252 004a 01D0     		beq	.L277
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3253              		.loc 1 3193 0 is_stmt 0 discriminator 1
 3254 004c 8842     		cmp	r0, r1
 3255 004e 0ED2     		bcs	.L280
 3256              	.L277:
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3257              		.loc 1 3202 0 is_stmt 1
 3258 0050 9A42     		cmp	r2, r3
 3259 0052 06D2     		bcs	.L278
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3260              		.loc 1 3205 0
 3261 0054 9B1A     		subs	r3, r3, r2
 3262 0056 2360     		str	r3, [r4]
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3263              		.loc 1 3206 0
 3264 0058 2846     		mov	r0, r5
 3265              	.LVL280:
 3266 005a FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3267              	.LVL281:
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3268              		.loc 1 3207 0
 3269 005e 0024     		movs	r4, #0
 3270              	.LVL282:
 3271 0060 06E0     		b	.L276
 3272              	.LVL283:
 3273              	.L278:
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 3274              		.loc 1 3211 0
 3275 0062 0023     		movs	r3, #0
 3276 0064 2360     		str	r3, [r4]
 3277              	.LVL284:
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3278              		.loc 1 3212 0
 3279 0066 0124     		movs	r4, #1
 3280              	.LVL285:
 3281 0068 02E0     		b	.L276
 3282              	.LVL286:
 3283              	.L279:
ARM GAS  /tmp/ccNFblrO.s 			page 157


3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3284              		.loc 1 3188 0
 3285 006a 0024     		movs	r4, #0
 3286              	.LVL287:
 3287 006c 00E0     		b	.L276
 3288              	.LVL288:
 3289              	.L280:
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3290              		.loc 1 3200 0
 3291 006e 0124     		movs	r4, #1
 3292              	.LVL289:
 3293              	.L276:
 3294              	.LBE168:
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3295              		.loc 1 3215 0
 3296 0070 FFF7FEFF 		bl	vPortExitCritical
 3297              	.LVL290:
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3298              		.loc 1 3218 0
 3299 0074 2046     		mov	r0, r4
 3300 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3301              	.LVL291:
 3302              	.L283:
 3303              		.align	2
 3304              	.L282:
 3305 0078 00000000 		.word	.LANCHOR15
 3306 007c 00000000 		.word	.LANCHOR18
 3307              		.cfi_endproc
 3308              	.LFE33:
 3310              		.section	.text.vTaskMissedYield,"ax",%progbits
 3311              		.align	2
 3312              		.global	vTaskMissedYield
 3313              		.thumb
 3314              		.thumb_func
 3316              	vTaskMissedYield:
 3317              	.LFB34:
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3318              		.loc 1 3222 0
 3319              		.cfi_startproc
 3320              		@ args = 0, pretend = 0, frame = 0
 3321              		@ frame_needed = 0, uses_anonymous_args = 0
 3322              		@ link register save eliminated.
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3323              		.loc 1 3223 0
 3324 0000 0122     		movs	r2, #1
 3325 0002 014B     		ldr	r3, .L285
 3326 0004 1A60     		str	r2, [r3]
 3327 0006 7047     		bx	lr
 3328              	.L286:
 3329              		.align	2
 3330              	.L285:
 3331 0008 00000000 		.word	.LANCHOR20
 3332              		.cfi_endproc
 3333              	.LFE34:
 3335              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3336              		.align	2
 3337              		.global	xTaskGetCurrentTaskHandle
ARM GAS  /tmp/ccNFblrO.s 			page 158


 3338              		.thumb
 3339              		.thumb_func
 3341              	xTaskGetCurrentTaskHandle:
 3342              	.LFB40:
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 3343              		.loc 1 3811 0
 3344              		.cfi_startproc
 3345              		@ args = 0, pretend = 0, frame = 0
 3346              		@ frame_needed = 0, uses_anonymous_args = 0
 3347              		@ link register save eliminated.
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3348              		.loc 1 3817 0
 3349 0000 014B     		ldr	r3, .L288
 3350 0002 1868     		ldr	r0, [r3]
 3351              	.LVL292:
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3352              		.loc 1 3820 0
 3353 0004 7047     		bx	lr
 3354              	.L289:
 3355 0006 00BF     		.align	2
 3356              	.L288:
 3357 0008 00000000 		.word	.LANCHOR10
 3358              		.cfi_endproc
 3359              	.LFE40:
 3361              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 3362              		.align	2
 3363              		.global	xTaskGetSchedulerState
 3364              		.thumb
 3365              		.thumb_func
 3367              	xTaskGetSchedulerState:
 3368              	.LFB41:
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 3369              		.loc 1 3828 0
 3370              		.cfi_startproc
 3371              		@ args = 0, pretend = 0, frame = 0
 3372              		@ frame_needed = 0, uses_anonymous_args = 0
 3373              		@ link register save eliminated.
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3374              		.loc 1 3831 0
 3375 0000 054B     		ldr	r3, .L294
 3376 0002 1B68     		ldr	r3, [r3]
 3377 0004 23B1     		cbz	r3, .L292
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3378              		.loc 1 3837 0
 3379 0006 054B     		ldr	r3, .L294+4
 3380 0008 1B68     		ldr	r3, [r3]
 3381 000a 1BB9     		cbnz	r3, .L293
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3382              		.loc 1 3839 0
 3383 000c 0220     		movs	r0, #2
 3384 000e 7047     		bx	lr
 3385              	.L292:
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3386              		.loc 1 3833 0
 3387 0010 0120     		movs	r0, #1
 3388 0012 7047     		bx	lr
 3389              	.L293:
ARM GAS  /tmp/ccNFblrO.s 			page 159


3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3390              		.loc 1 3843 0
 3391 0014 0020     		movs	r0, #0
 3392              	.LVL293:
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3393              		.loc 1 3848 0
 3394 0016 7047     		bx	lr
 3395              	.L295:
 3396              		.align	2
 3397              	.L294:
 3398 0018 00000000 		.word	.LANCHOR11
 3399 001c 00000000 		.word	.LANCHOR16
 3400              		.cfi_endproc
 3401              	.LFE41:
 3403              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 3404              		.align	2
 3405              		.global	xTaskPriorityInherit
 3406              		.thumb
 3407              		.thumb_func
 3409              	xTaskPriorityInherit:
 3410              	.LFB42:
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3411              		.loc 1 3856 0
 3412              		.cfi_startproc
 3413              		@ args = 0, pretend = 0, frame = 0
 3414              		@ frame_needed = 0, uses_anonymous_args = 0
 3415              	.LVL294:
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3416              		.loc 1 3863 0
 3417 0000 0028     		cmp	r0, #0
 3418 0002 50D0     		beq	.L302
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3419              		.loc 1 3856 0
 3420 0004 38B5     		push	{r3, r4, r5, lr}
 3421              	.LCFI33:
 3422              		.cfi_def_cfa_offset 16
 3423              		.cfi_offset 3, -16
 3424              		.cfi_offset 4, -12
 3425              		.cfi_offset 5, -8
 3426              		.cfi_offset 14, -4
 3427 0006 0346     		mov	r3, r0
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3428              		.loc 1 3868 0
 3429 0008 C16A     		ldr	r1, [r0, #44]
 3430 000a 294A     		ldr	r2, .L305
 3431 000c 1268     		ldr	r2, [r2]
 3432 000e D26A     		ldr	r2, [r2, #44]
 3433 0010 9142     		cmp	r1, r2
 3434 0012 40D2     		bcs	.L298
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3435              		.loc 1 3873 0
 3436 0014 8269     		ldr	r2, [r0, #24]
 3437 0016 002A     		cmp	r2, #0
 3438 0018 05DB     		blt	.L299
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3439              		.loc 1 3875 0
 3440 001a 254A     		ldr	r2, .L305
ARM GAS  /tmp/ccNFblrO.s 			page 160


 3441 001c 1268     		ldr	r2, [r2]
 3442 001e D26A     		ldr	r2, [r2, #44]
 3443 0020 C2F10702 		rsb	r2, r2, #7
 3444 0024 8261     		str	r2, [r0, #24]
 3445              	.L299:
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3446              		.loc 1 3884 0
 3447 0026 5969     		ldr	r1, [r3, #20]
 3448 0028 DA6A     		ldr	r2, [r3, #44]
 3449 002a 02EB8202 		add	r2, r2, r2, lsl #2
 3450 002e 9200     		lsls	r2, r2, #2
 3451 0030 2048     		ldr	r0, .L305+4
 3452              	.LVL295:
 3453 0032 0244     		add	r2, r2, r0
 3454 0034 9142     		cmp	r1, r2
 3455 0036 28D1     		bne	.L300
 3456 0038 1C46     		mov	r4, r3
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3457              		.loc 1 3886 0
 3458 003a 1D1D     		adds	r5, r3, #4
 3459 003c 2846     		mov	r0, r5
 3460 003e FFF7FEFF 		bl	uxListRemove
 3461              	.LVL296:
 3462 0042 68B9     		cbnz	r0, .L301
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3463              		.loc 1 3888 0
 3464 0044 E26A     		ldr	r2, [r4, #44]
 3465 0046 02EB8203 		add	r3, r2, r2, lsl #2
 3466 004a 9B00     		lsls	r3, r3, #2
 3467 004c 1949     		ldr	r1, .L305+4
 3468 004e CB58     		ldr	r3, [r1, r3]
 3469 0050 33B9     		cbnz	r3, .L301
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3470              		.loc 1 3888 0 is_stmt 0 discriminator 1
 3471 0052 0123     		movs	r3, #1
 3472 0054 9340     		lsls	r3, r3, r2
 3473 0056 1849     		ldr	r1, .L305+8
 3474 0058 0A68     		ldr	r2, [r1]
 3475 005a 22EA0303 		bic	r3, r2, r3
 3476 005e 0B60     		str	r3, [r1]
 3477              	.L301:
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 3478              		.loc 1 3896 0 is_stmt 1
 3479 0060 134B     		ldr	r3, .L305
 3480 0062 1B68     		ldr	r3, [r3]
 3481 0064 D86A     		ldr	r0, [r3, #44]
 3482 0066 E062     		str	r0, [r4, #44]
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3483              		.loc 1 3897 0
 3484 0068 0124     		movs	r4, #1
 3485              	.LVL297:
 3486 006a 04FA00F1 		lsl	r1, r4, r0
 3487 006e 124A     		ldr	r2, .L305+8
 3488 0070 1368     		ldr	r3, [r2]
 3489 0072 0B43     		orrs	r3, r3, r1
 3490 0074 1360     		str	r3, [r2]
 3491 0076 00EB8000 		add	r0, r0, r0, lsl #2
ARM GAS  /tmp/ccNFblrO.s 			page 161


 3492 007a 8000     		lsls	r0, r0, #2
 3493 007c 0D4B     		ldr	r3, .L305+4
 3494 007e 1844     		add	r0, r0, r3
 3495 0080 2946     		mov	r1, r5
 3496 0082 FFF7FEFF 		bl	vListInsertEnd
 3497              	.LVL298:
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3498              		.loc 1 3908 0
 3499 0086 2046     		mov	r0, r4
 3500 0088 38BD     		pop	{r3, r4, r5, pc}
 3501              	.LVL299:
 3502              	.L300:
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3503              		.loc 1 3902 0
 3504 008a 094A     		ldr	r2, .L305
 3505 008c 1268     		ldr	r2, [r2]
 3506 008e D26A     		ldr	r2, [r2, #44]
 3507 0090 DA62     		str	r2, [r3, #44]
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3508              		.loc 1 3908 0
 3509 0092 0120     		movs	r0, #1
 3510 0094 38BD     		pop	{r3, r4, r5, pc}
 3511              	.LVL300:
 3512              	.L298:
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3513              		.loc 1 3912 0
 3514 0096 426C     		ldr	r2, [r0, #68]
 3515 0098 054B     		ldr	r3, .L305
 3516 009a 1B68     		ldr	r3, [r3]
 3517 009c DB6A     		ldr	r3, [r3, #44]
 3518 009e 9A42     		cmp	r2, r3
 3519 00a0 03D3     		bcc	.L303
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3520              		.loc 1 3858 0
 3521 00a2 0020     		movs	r0, #0
 3522              	.LVL301:
 3523 00a4 38BD     		pop	{r3, r4, r5, pc}
 3524              	.LVL302:
 3525              	.L302:
 3526              	.LCFI34:
 3527              		.cfi_def_cfa_offset 0
 3528              		.cfi_restore 3
 3529              		.cfi_restore 4
 3530              		.cfi_restore 5
 3531              		.cfi_restore 14
 3532 00a6 0020     		movs	r0, #0
 3533              	.LVL303:
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3534              		.loc 1 3935 0
 3535 00a8 7047     		bx	lr
 3536              	.LVL304:
 3537              	.L303:
 3538              	.LCFI35:
 3539              		.cfi_def_cfa_offset 16
 3540              		.cfi_offset 3, -16
 3541              		.cfi_offset 4, -12
 3542              		.cfi_offset 5, -8
ARM GAS  /tmp/ccNFblrO.s 			page 162


 3543              		.cfi_offset 14, -4
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3544              		.loc 1 3921 0
 3545 00aa 0120     		movs	r0, #1
 3546              	.LVL305:
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3547              		.loc 1 3935 0
 3548 00ac 38BD     		pop	{r3, r4, r5, pc}
 3549              	.L306:
 3550 00ae 00BF     		.align	2
 3551              	.L305:
 3552 00b0 00000000 		.word	.LANCHOR10
 3553 00b4 00000000 		.word	.LANCHOR4
 3554 00b8 00000000 		.word	.LANCHOR13
 3555              		.cfi_endproc
 3556              	.LFE42:
 3558              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3559              		.align	2
 3560              		.global	xTaskPriorityDisinherit
 3561              		.thumb
 3562              		.thumb_func
 3564              	xTaskPriorityDisinherit:
 3565              	.LFB43:
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3566              		.loc 1 3943 0
 3567              		.cfi_startproc
 3568              		@ args = 0, pretend = 0, frame = 0
 3569              		@ frame_needed = 0, uses_anonymous_args = 0
 3570              	.LVL306:
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3571              		.loc 1 3947 0
 3572 0000 0028     		cmp	r0, #0
 3573 0002 4BD0     		beq	.L314
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3574              		.loc 1 3943 0
 3575 0004 38B5     		push	{r3, r4, r5, lr}
 3576              	.LCFI36:
 3577              		.cfi_def_cfa_offset 16
 3578              		.cfi_offset 3, -16
 3579              		.cfi_offset 4, -12
 3580              		.cfi_offset 5, -8
 3581              		.cfi_offset 14, -4
 3582 0006 0346     		mov	r3, r0
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 3583              		.loc 1 3953 0
 3584 0008 274A     		ldr	r2, .L318
 3585 000a 1268     		ldr	r2, [r2]
 3586 000c 9042     		cmp	r0, r2
 3587 000e 08D0     		beq	.L309
 3588              	.LBB169:
 3589              	.LBB170:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3590              		.loc 2 195 0
 3591              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3592 0010 4FF05003 			mov r3, #80												
 3593 0014 83F31188 		msr basepri, r3											
 3594 0018 BFF36F8F 		isb														
ARM GAS  /tmp/ccNFblrO.s 			page 163


 3595 001c BFF34F8F 		dsb														
 3596              	
 3597              	@ 0 "" 2
 3598              	.LVL307:
 3599              		.thumb
 3600              	.L310:
 3601              	.LBE170:
 3602              	.LBE169:
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 3603              		.loc 1 3953 0 discriminator 1
 3604 0020 FEE7     		b	.L310
 3605              	.L309:
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3606              		.loc 1 3954 0
 3607 0022 826C     		ldr	r2, [r0, #72]
 3608 0024 42B9     		cbnz	r2, .L311
 3609              	.LBB171:
 3610              	.LBB172:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3611              		.loc 2 195 0
 3612              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3613 0026 4FF05003 			mov r3, #80												
 3614 002a 83F31188 		msr basepri, r3											
 3615 002e BFF36F8F 		isb														
 3616 0032 BFF34F8F 		dsb														
 3617              	
 3618              	@ 0 "" 2
 3619              	.LVL308:
 3620              		.thumb
 3621              	.L312:
 3622              	.LBE172:
 3623              	.LBE171:
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3624              		.loc 1 3954 0 discriminator 2
 3625 0036 FEE7     		b	.L312
 3626              	.L311:
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3627              		.loc 1 3955 0
 3628 0038 013A     		subs	r2, r2, #1
 3629 003a 8264     		str	r2, [r0, #72]
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3630              		.loc 1 3959 0
 3631 003c C06A     		ldr	r0, [r0, #44]
 3632              	.LVL309:
 3633 003e 596C     		ldr	r1, [r3, #68]
 3634 0040 8842     		cmp	r0, r1
 3635 0042 2DD0     		beq	.L315
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3636              		.loc 1 3962 0
 3637 0044 72BB     		cbnz	r2, .L316
 3638 0046 1C46     		mov	r4, r3
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3639              		.loc 1 3969 0
 3640 0048 1D1D     		adds	r5, r3, #4
 3641 004a 2846     		mov	r0, r5
 3642 004c FFF7FEFF 		bl	uxListRemove
 3643              	.LVL310:
ARM GAS  /tmp/ccNFblrO.s 			page 164


 3644 0050 70B9     		cbnz	r0, .L313
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3645              		.loc 1 3971 0
 3646 0052 E26A     		ldr	r2, [r4, #44]
 3647 0054 02EB8203 		add	r3, r2, r2, lsl #2
 3648 0058 9B00     		lsls	r3, r3, #2
 3649 005a 1449     		ldr	r1, .L318+4
 3650 005c CB58     		ldr	r3, [r1, r3]
 3651 005e 3BB9     		cbnz	r3, .L313
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3652              		.loc 1 3971 0 is_stmt 0 discriminator 1
 3653 0060 0123     		movs	r3, #1
 3654 0062 03FA02F2 		lsl	r2, r3, r2
 3655 0066 1249     		ldr	r1, .L318+8
 3656 0068 0B68     		ldr	r3, [r1]
 3657 006a 23EA0203 		bic	r3, r3, r2
 3658 006e 0B60     		str	r3, [r1]
 3659              	.L313:
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3660              		.loc 1 3981 0 is_stmt 1
 3661 0070 606C     		ldr	r0, [r4, #68]
 3662 0072 E062     		str	r0, [r4, #44]
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3663              		.loc 1 3986 0
 3664 0074 C0F10703 		rsb	r3, r0, #7
 3665 0078 A361     		str	r3, [r4, #24]
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3666              		.loc 1 3987 0
 3667 007a 0124     		movs	r4, #1
 3668              	.LVL311:
 3669 007c 04FA00F1 		lsl	r1, r4, r0
 3670 0080 0B4A     		ldr	r2, .L318+8
 3671 0082 1368     		ldr	r3, [r2]
 3672 0084 0B43     		orrs	r3, r3, r1
 3673 0086 1360     		str	r3, [r2]
 3674 0088 00EB8000 		add	r0, r0, r0, lsl #2
 3675 008c 8000     		lsls	r0, r0, #2
 3676 008e 074B     		ldr	r3, .L318+4
 3677 0090 1844     		add	r0, r0, r3
 3678 0092 2946     		mov	r1, r5
 3679 0094 FFF7FEFF 		bl	vListInsertEnd
 3680              	.LVL312:
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3681              		.loc 1 3997 0
 3682 0098 2046     		mov	r0, r4
 3683 009a 38BD     		pop	{r3, r4, r5, pc}
 3684              	.LVL313:
 3685              	.L314:
 3686              	.LCFI37:
 3687              		.cfi_def_cfa_offset 0
 3688              		.cfi_restore 3
 3689              		.cfi_restore 4
 3690              		.cfi_restore 5
 3691              		.cfi_restore 14
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3692              		.loc 1 3945 0
 3693 009c 0020     		movs	r0, #0
ARM GAS  /tmp/ccNFblrO.s 			page 165


 3694              	.LVL314:
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3695              		.loc 1 4015 0
 3696 009e 7047     		bx	lr
 3697              	.LVL315:
 3698              	.L315:
 3699              	.LCFI38:
 3700              		.cfi_def_cfa_offset 16
 3701              		.cfi_offset 3, -16
 3702              		.cfi_offset 4, -12
 3703              		.cfi_offset 5, -8
 3704              		.cfi_offset 14, -4
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3705              		.loc 1 3945 0
 3706 00a0 0020     		movs	r0, #0
 3707 00a2 38BD     		pop	{r3, r4, r5, pc}
 3708              	.LVL316:
 3709              	.L316:
 3710 00a4 0020     		movs	r0, #0
 3711              	.LVL317:
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3712              		.loc 1 4015 0
 3713 00a6 38BD     		pop	{r3, r4, r5, pc}
 3714              	.LVL318:
 3715              	.L319:
 3716              		.align	2
 3717              	.L318:
 3718 00a8 00000000 		.word	.LANCHOR10
 3719 00ac 00000000 		.word	.LANCHOR4
 3720 00b0 00000000 		.word	.LANCHOR13
 3721              		.cfi_endproc
 3722              	.LFE43:
 3724              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 3725              		.align	2
 3726              		.global	vTaskPriorityDisinheritAfterTimeout
 3727              		.thumb
 3728              		.thumb_func
 3730              	vTaskPriorityDisinheritAfterTimeout:
 3731              	.LFB44:
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3732              		.loc 1 4023 0
 3733              		.cfi_startproc
 3734              		@ args = 0, pretend = 0, frame = 0
 3735              		@ frame_needed = 0, uses_anonymous_args = 0
 3736              	.LVL319:
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3737              		.loc 1 4028 0
 3738 0000 0028     		cmp	r0, #0
 3739 0002 57D0     		beq	.L330
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3740              		.loc 1 4023 0
 3741 0004 38B5     		push	{r3, r4, r5, lr}
 3742              	.LCFI39:
 3743              		.cfi_def_cfa_offset 16
 3744              		.cfi_offset 3, -16
 3745              		.cfi_offset 4, -12
 3746              		.cfi_offset 5, -8
ARM GAS  /tmp/ccNFblrO.s 			page 166


 3747              		.cfi_offset 14, -4
 3748 0006 0346     		mov	r3, r0
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3749              		.loc 1 4032 0
 3750 0008 846C     		ldr	r4, [r0, #72]
 3751 000a 44B9     		cbnz	r4, .L322
 3752              	.LBB173:
 3753              	.LBB174:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3754              		.loc 2 195 0
 3755              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3756 000c 4FF05003 			mov r3, #80												
 3757 0010 83F31188 		msr basepri, r3											
 3758 0014 BFF36F8F 		isb														
 3759 0018 BFF34F8F 		dsb														
 3760              	
 3761              	@ 0 "" 2
 3762              	.LVL320:
 3763              		.thumb
 3764              	.L323:
 3765              	.LBE174:
 3766              	.LBE173:
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3767              		.loc 1 4032 0 discriminator 1
 3768 001c FEE7     		b	.L323
 3769              	.L322:
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3770              		.loc 1 4038 0
 3771 001e 406C     		ldr	r0, [r0, #68]
 3772              	.LVL321:
 3773 0020 8842     		cmp	r0, r1
 3774 0022 00D2     		bcs	.L324
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3775              		.loc 1 4040 0
 3776 0024 0846     		mov	r0, r1
 3777              	.L324:
 3778              	.LVL322:
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3779              		.loc 1 4048 0
 3780 0026 DA6A     		ldr	r2, [r3, #44]
 3781 0028 8242     		cmp	r2, r0
 3782 002a 42D0     		beq	.L320
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3783              		.loc 1 4054 0
 3784 002c 012C     		cmp	r4, #1
 3785 002e 40D1     		bne	.L320
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3786              		.loc 1 4059 0
 3787 0030 2149     		ldr	r1, .L331
 3788              	.LVL323:
 3789 0032 0968     		ldr	r1, [r1]
 3790 0034 8B42     		cmp	r3, r1
 3791 0036 08D1     		bne	.L325
 3792              	.LBB175:
 3793              	.LBB176:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3794              		.loc 2 195 0
ARM GAS  /tmp/ccNFblrO.s 			page 167


 3795              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3796 0038 4FF05003 			mov r3, #80												
 3797 003c 83F31188 		msr basepri, r3											
 3798 0040 BFF36F8F 		isb														
 3799 0044 BFF34F8F 		dsb														
 3800              	
 3801              	@ 0 "" 2
 3802              	.LVL324:
 3803              		.thumb
 3804              	.L326:
 3805              	.LBE176:
 3806              	.LBE175:
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3807              		.loc 1 4059 0 discriminator 2
 3808 0048 FEE7     		b	.L326
 3809              	.LVL325:
 3810              	.L325:
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3811              		.loc 1 4066 0
 3812 004a D862     		str	r0, [r3, #44]
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3813              		.loc 1 4070 0
 3814 004c 9969     		ldr	r1, [r3, #24]
 3815 004e 0029     		cmp	r1, #0
 3816 0050 02DB     		blt	.L327
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3817              		.loc 1 4072 0
 3818 0052 C0F10700 		rsb	r0, r0, #7
 3819              	.LVL326:
 3820 0056 9861     		str	r0, [r3, #24]
 3821              	.L327:
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3822              		.loc 1 4085 0
 3823 0058 5969     		ldr	r1, [r3, #20]
 3824 005a 02EB8202 		add	r2, r2, r2, lsl #2
 3825              	.LVL327:
 3826 005e 9200     		lsls	r2, r2, #2
 3827 0060 1648     		ldr	r0, .L331+4
 3828 0062 0244     		add	r2, r2, r0
 3829 0064 9142     		cmp	r1, r2
 3830 0066 24D1     		bne	.L320
 3831 0068 1C46     		mov	r4, r3
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 3832              		.loc 1 4087 0
 3833 006a 1D1D     		adds	r5, r3, #4
 3834 006c 2846     		mov	r0, r5
 3835 006e FFF7FEFF 		bl	uxListRemove
 3836              	.LVL328:
 3837 0072 70B9     		cbnz	r0, .L328
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 3838              		.loc 1 4089 0
 3839 0074 E26A     		ldr	r2, [r4, #44]
 3840 0076 02EB8203 		add	r3, r2, r2, lsl #2
 3841 007a 9B00     		lsls	r3, r3, #2
 3842 007c 0F49     		ldr	r1, .L331+4
 3843 007e CB58     		ldr	r3, [r1, r3]
 3844 0080 3BB9     		cbnz	r3, .L328
ARM GAS  /tmp/ccNFblrO.s 			page 168


4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 3845              		.loc 1 4089 0 is_stmt 0 discriminator 1
 3846 0082 0123     		movs	r3, #1
 3847 0084 03FA02F2 		lsl	r2, r3, r2
 3848 0088 0D49     		ldr	r1, .L331+8
 3849 008a 0B68     		ldr	r3, [r1]
 3850 008c 23EA0203 		bic	r3, r3, r2
 3851 0090 0B60     		str	r3, [r1]
 3852              	.L328:
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3853              		.loc 1 4096 0 is_stmt 1
 3854 0092 E36A     		ldr	r3, [r4, #44]
 3855 0094 0122     		movs	r2, #1
 3856 0096 02FA03F1 		lsl	r1, r2, r3
 3857 009a 0948     		ldr	r0, .L331+8
 3858 009c 0268     		ldr	r2, [r0]
 3859 009e 0A43     		orrs	r2, r2, r1
 3860 00a0 0260     		str	r2, [r0]
 3861 00a2 03EB8303 		add	r3, r3, r3, lsl #2
 3862 00a6 9B00     		lsls	r3, r3, #2
 3863 00a8 0448     		ldr	r0, .L331+4
 3864 00aa 1844     		add	r0, r0, r3
 3865 00ac 2946     		mov	r1, r5
 3866 00ae FFF7FEFF 		bl	vListInsertEnd
 3867              	.LVL329:
 3868              	.L320:
 3869 00b2 38BD     		pop	{r3, r4, r5, pc}
 3870              	.LVL330:
 3871              	.L330:
 3872              	.LCFI40:
 3873              		.cfi_def_cfa_offset 0
 3874              		.cfi_restore 3
 3875              		.cfi_restore 4
 3876              		.cfi_restore 5
 3877              		.cfi_restore 14
 3878 00b4 7047     		bx	lr
 3879              	.L332:
 3880 00b6 00BF     		.align	2
 3881              	.L331:
 3882 00b8 00000000 		.word	.LANCHOR10
 3883 00bc 00000000 		.word	.LANCHOR4
 3884 00c0 00000000 		.word	.LANCHOR13
 3885              		.cfi_endproc
 3886              	.LFE44:
 3888              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 3889              		.align	2
 3890              		.global	uxTaskResetEventItemValue
 3891              		.thumb
 3892              		.thumb_func
 3894              	uxTaskResetEventItemValue:
 3895              	.LFB45:
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 3896              		.loc 1 4438 0
 3897              		.cfi_startproc
 3898              		@ args = 0, pretend = 0, frame = 0
 3899              		@ frame_needed = 0, uses_anonymous_args = 0
 3900              		@ link register save eliminated.
ARM GAS  /tmp/ccNFblrO.s 			page 169


4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3901              		.loc 1 4441 0
 3902 0000 044B     		ldr	r3, .L334
 3903 0002 1A68     		ldr	r2, [r3]
 3904 0004 9069     		ldr	r0, [r2, #24]
 3905              	.LVL331:
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3906              		.loc 1 4445 0
 3907 0006 1A68     		ldr	r2, [r3]
 3908 0008 1B68     		ldr	r3, [r3]
 3909 000a DB6A     		ldr	r3, [r3, #44]
 3910 000c C3F10703 		rsb	r3, r3, #7
 3911 0010 9361     		str	r3, [r2, #24]
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3912              		.loc 1 4448 0
 3913 0012 7047     		bx	lr
 3914              	.L335:
 3915              		.align	2
 3916              	.L334:
 3917 0014 00000000 		.word	.LANCHOR10
 3918              		.cfi_endproc
 3919              	.LFE45:
 3921              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 3922              		.align	2
 3923              		.global	pvTaskIncrementMutexHeldCount
 3924              		.thumb
 3925              		.thumb_func
 3927              	pvTaskIncrementMutexHeldCount:
 3928              	.LFB46:
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 3929              		.loc 1 4454 0
 3930              		.cfi_startproc
 3931              		@ args = 0, pretend = 0, frame = 0
 3932              		@ frame_needed = 0, uses_anonymous_args = 0
 3933              		@ link register save eliminated.
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3934              		.loc 1 4457 0
 3935 0000 054B     		ldr	r3, .L338
 3936 0002 1B68     		ldr	r3, [r3]
 3937 0004 23B1     		cbz	r3, .L337
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3938              		.loc 1 4459 0
 3939 0006 044B     		ldr	r3, .L338
 3940 0008 1A68     		ldr	r2, [r3]
 3941 000a 936C     		ldr	r3, [r2, #72]
 3942 000c 0133     		adds	r3, r3, #1
 3943 000e 9364     		str	r3, [r2, #72]
 3944              	.L337:
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3945              		.loc 1 4462 0
 3946 0010 014B     		ldr	r3, .L338
 3947 0012 1868     		ldr	r0, [r3]
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3948              		.loc 1 4463 0
 3949 0014 7047     		bx	lr
 3950              	.L339:
 3951 0016 00BF     		.align	2
ARM GAS  /tmp/ccNFblrO.s 			page 170


 3952              	.L338:
 3953 0018 00000000 		.word	.LANCHOR10
 3954              		.cfi_endproc
 3955              	.LFE46:
 3957              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 3958              		.align	2
 3959              		.global	ulTaskNotifyTake
 3960              		.thumb
 3961              		.thumb_func
 3963              	ulTaskNotifyTake:
 3964              	.LFB47:
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 3965              		.loc 1 4471 0
 3966              		.cfi_startproc
 3967              		@ args = 0, pretend = 0, frame = 0
 3968              		@ frame_needed = 0, uses_anonymous_args = 0
 3969              	.LVL332:
 3970 0000 38B5     		push	{r3, r4, r5, lr}
 3971              	.LCFI41:
 3972              		.cfi_def_cfa_offset 16
 3973              		.cfi_offset 3, -16
 3974              		.cfi_offset 4, -12
 3975              		.cfi_offset 5, -8
 3976              		.cfi_offset 14, -4
 3977 0002 0546     		mov	r5, r0
 3978 0004 0C46     		mov	r4, r1
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3979              		.loc 1 4474 0
 3980 0006 FFF7FEFF 		bl	vPortEnterCritical
 3981              	.LVL333:
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3982              		.loc 1 4477 0
 3983 000a 184B     		ldr	r3, .L345
 3984 000c 1B68     		ldr	r3, [r3]
 3985 000e DB6C     		ldr	r3, [r3, #76]
 3986 0010 8BB9     		cbnz	r3, .L341
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3987              		.loc 1 4480 0
 3988 0012 164B     		ldr	r3, .L345
 3989 0014 1B68     		ldr	r3, [r3]
 3990 0016 0122     		movs	r2, #1
 3991 0018 83F85020 		strb	r2, [r3, #80]
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3992              		.loc 1 4482 0
 3993 001c 5CB1     		cbz	r4, .L341
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 3994              		.loc 1 4484 0
 3995 001e 2046     		mov	r0, r4
 3996 0020 1146     		mov	r1, r2
 3997 0022 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3998              	.LVL334:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3999              		.loc 1 4491 0
 4000 0026 4FF08052 		mov	r2, #268435456
 4001 002a 114B     		ldr	r3, .L345+4
 4002 002c 1A60     		str	r2, [r3]
 4003              	@ 4491 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
ARM GAS  /tmp/ccNFblrO.s 			page 171


 4004 002e BFF34F8F 		dsb
 4005              	@ 0 "" 2
 4006              	@ 4491 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4007 0032 BFF36F8F 		isb
 4008              	@ 0 "" 2
 4009              		.thumb
 4010              	.L341:
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4011              		.loc 1 4503 0
 4012 0036 FFF7FEFF 		bl	vPortExitCritical
 4013              	.LVL335:
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4014              		.loc 1 4505 0
 4015 003a FFF7FEFF 		bl	vPortEnterCritical
 4016              	.LVL336:
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4017              		.loc 1 4508 0
 4018 003e 0B4B     		ldr	r3, .L345
 4019 0040 1B68     		ldr	r3, [r3]
 4020 0042 DC6C     		ldr	r4, [r3, #76]
 4021              	.LVL337:
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4022              		.loc 1 4510 0
 4023 0044 4CB1     		cbz	r4, .L342
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4024              		.loc 1 4512 0
 4025 0046 25B1     		cbz	r5, .L343
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4026              		.loc 1 4514 0
 4027 0048 084B     		ldr	r3, .L345
 4028 004a 1B68     		ldr	r3, [r3]
 4029 004c 0022     		movs	r2, #0
 4030 004e DA64     		str	r2, [r3, #76]
 4031 0050 03E0     		b	.L342
 4032              	.L343:
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4033              		.loc 1 4518 0
 4034 0052 064B     		ldr	r3, .L345
 4035 0054 1B68     		ldr	r3, [r3]
 4036 0056 621E     		subs	r2, r4, #1
 4037 0058 DA64     		str	r2, [r3, #76]
 4038              	.L342:
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4039              		.loc 1 4526 0
 4040 005a 044B     		ldr	r3, .L345
 4041 005c 1B68     		ldr	r3, [r3]
 4042 005e 0022     		movs	r2, #0
 4043 0060 83F85020 		strb	r2, [r3, #80]
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4044              		.loc 1 4528 0
 4045 0064 FFF7FEFF 		bl	vPortExitCritical
 4046              	.LVL338:
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4047              		.loc 1 4531 0
 4048 0068 2046     		mov	r0, r4
 4049 006a 38BD     		pop	{r3, r4, r5, pc}
 4050              	.LVL339:
ARM GAS  /tmp/ccNFblrO.s 			page 172


 4051              	.L346:
 4052              		.align	2
 4053              	.L345:
 4054 006c 00000000 		.word	.LANCHOR10
 4055 0070 04ED00E0 		.word	-536810236
 4056              		.cfi_endproc
 4057              	.LFE47:
 4059              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4060              		.align	2
 4061              		.global	xTaskNotifyWait
 4062              		.thumb
 4063              		.thumb_func
 4065              	xTaskNotifyWait:
 4066              	.LFB48:
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4067              		.loc 1 4539 0
 4068              		.cfi_startproc
 4069              		@ args = 0, pretend = 0, frame = 0
 4070              		@ frame_needed = 0, uses_anonymous_args = 0
 4071              	.LVL340:
 4072 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4073              	.LCFI42:
 4074              		.cfi_def_cfa_offset 24
 4075              		.cfi_offset 3, -24
 4076              		.cfi_offset 4, -20
 4077              		.cfi_offset 5, -16
 4078              		.cfi_offset 6, -12
 4079              		.cfi_offset 7, -8
 4080              		.cfi_offset 14, -4
 4081 0002 0746     		mov	r7, r0
 4082 0004 0D46     		mov	r5, r1
 4083 0006 1446     		mov	r4, r2
 4084 0008 1E46     		mov	r6, r3
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4085              		.loc 1 4542 0
 4086 000a FFF7FEFF 		bl	vPortEnterCritical
 4087              	.LVL341:
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4088              		.loc 1 4545 0
 4089 000e 204B     		ldr	r3, .L353
 4090 0010 1B68     		ldr	r3, [r3]
 4091 0012 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4092 0016 DBB2     		uxtb	r3, r3
 4093 0018 022B     		cmp	r3, #2
 4094 001a 16D0     		beq	.L348
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4095              		.loc 1 4550 0
 4096 001c 1C4B     		ldr	r3, .L353
 4097 001e 1A68     		ldr	r2, [r3]
 4098 0020 D06C     		ldr	r0, [r2, #76]
 4099 0022 20EA0700 		bic	r0, r0, r7
 4100 0026 D064     		str	r0, [r2, #76]
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4101              		.loc 1 4553 0
 4102 0028 1B68     		ldr	r3, [r3]
 4103 002a 0122     		movs	r2, #1
 4104 002c 83F85020 		strb	r2, [r3, #80]
ARM GAS  /tmp/ccNFblrO.s 			page 173


4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4105              		.loc 1 4555 0
 4106 0030 5EB1     		cbz	r6, .L348
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 4107              		.loc 1 4557 0
 4108 0032 3046     		mov	r0, r6
 4109 0034 1146     		mov	r1, r2
 4110 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4111              	.LVL342:
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4112              		.loc 1 4564 0
 4113 003a 4FF08052 		mov	r2, #268435456
 4114 003e 154B     		ldr	r3, .L353+4
 4115 0040 1A60     		str	r2, [r3]
 4116              	@ 4564 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4117 0042 BFF34F8F 		dsb
 4118              	@ 0 "" 2
 4119              	@ 4564 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4120 0046 BFF36F8F 		isb
 4121              	@ 0 "" 2
 4122              		.thumb
 4123              	.L348:
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4124              		.loc 1 4576 0
 4125 004a FFF7FEFF 		bl	vPortExitCritical
 4126              	.LVL343:
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4127              		.loc 1 4578 0
 4128 004e FFF7FEFF 		bl	vPortEnterCritical
 4129              	.LVL344:
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4130              		.loc 1 4582 0
 4131 0052 1CB1     		cbz	r4, .L349
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4132              		.loc 1 4586 0
 4133 0054 0E4B     		ldr	r3, .L353
 4134 0056 1B68     		ldr	r3, [r3]
 4135 0058 DB6C     		ldr	r3, [r3, #76]
 4136 005a 2360     		str	r3, [r4]
 4137              	.L349:
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4138              		.loc 1 4593 0
 4139 005c 0C4B     		ldr	r3, .L353
 4140 005e 1B68     		ldr	r3, [r3]
 4141 0060 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4142 0064 DBB2     		uxtb	r3, r3
 4143 0066 022B     		cmp	r3, #2
 4144 0068 07D1     		bne	.L351
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 4145              		.loc 1 4602 0
 4146 006a 094B     		ldr	r3, .L353
 4147 006c 1A68     		ldr	r2, [r3]
 4148 006e D36C     		ldr	r3, [r2, #76]
 4149 0070 23EA0505 		bic	r5, r3, r5
 4150              	.LVL345:
 4151 0074 D564     		str	r5, [r2, #76]
 4152              	.LVL346:
ARM GAS  /tmp/ccNFblrO.s 			page 174


4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4153              		.loc 1 4603 0
 4154 0076 0124     		movs	r4, #1
 4155              	.LVL347:
 4156 0078 00E0     		b	.L350
 4157              	.LVL348:
 4158              	.L351:
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4159              		.loc 1 4596 0
 4160 007a 0024     		movs	r4, #0
 4161              	.LVL349:
 4162              	.L350:
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4163              		.loc 1 4606 0
 4164 007c 044B     		ldr	r3, .L353
 4165 007e 1B68     		ldr	r3, [r3]
 4166 0080 0022     		movs	r2, #0
 4167 0082 83F85020 		strb	r2, [r3, #80]
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4168              		.loc 1 4608 0
 4169 0086 FFF7FEFF 		bl	vPortExitCritical
 4170              	.LVL350:
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4171              		.loc 1 4611 0
 4172 008a 2046     		mov	r0, r4
 4173 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4174              	.LVL351:
 4175              	.L354:
 4176 008e 00BF     		.align	2
 4177              	.L353:
 4178 0090 00000000 		.word	.LANCHOR10
 4179 0094 04ED00E0 		.word	-536810236
 4180              		.cfi_endproc
 4181              	.LFE48:
 4183              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4184              		.align	2
 4185              		.global	xTaskGenericNotify
 4186              		.thumb
 4187              		.thumb_func
 4189              	xTaskGenericNotify:
 4190              	.LFB49:
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4191              		.loc 1 4619 0
 4192              		.cfi_startproc
 4193              		@ args = 0, pretend = 0, frame = 0
 4194              		@ frame_needed = 0, uses_anonymous_args = 0
 4195              	.LVL352:
 4196 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4197              	.LCFI43:
 4198              		.cfi_def_cfa_offset 24
 4199              		.cfi_offset 3, -24
 4200              		.cfi_offset 4, -20
 4201              		.cfi_offset 5, -16
 4202              		.cfi_offset 6, -12
 4203              		.cfi_offset 7, -8
 4204              		.cfi_offset 14, -4
 4205              	.LVL353:
ARM GAS  /tmp/ccNFblrO.s 			page 175


4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 4206              		.loc 1 4624 0
 4207 0002 40B9     		cbnz	r0, .L356
 4208              	.LBB177:
 4209              	.LBB178:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4210              		.loc 2 195 0
 4211              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4212 0004 4FF05003 			mov r3, #80												
 4213 0008 83F31188 		msr basepri, r3											
 4214 000c BFF36F8F 		isb														
 4215 0010 BFF34F8F 		dsb														
 4216              	
 4217              	@ 0 "" 2
 4218              	.LVL354:
 4219              		.thumb
 4220              	.L357:
 4221              	.LBE178:
 4222              	.LBE177:
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 4223              		.loc 1 4624 0 discriminator 1
 4224 0014 FEE7     		b	.L357
 4225              	.LVL355:
 4226              	.L356:
 4227 0016 0446     		mov	r4, r0
 4228 0018 1F46     		mov	r7, r3
 4229 001a 1646     		mov	r6, r2
 4230 001c 0D46     		mov	r5, r1
 4231              	.LVL356:
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4232              		.loc 1 4627 0
 4233 001e FFF7FEFF 		bl	vPortEnterCritical
 4234              	.LVL357:
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4235              		.loc 1 4629 0
 4236 0022 0FB1     		cbz	r7, .L358
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4237              		.loc 1 4631 0
 4238 0024 E36C     		ldr	r3, [r4, #76]
 4239 0026 3B60     		str	r3, [r7]
 4240              	.L358:
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4241              		.loc 1 4634 0
 4242 0028 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4243 002c DBB2     		uxtb	r3, r3
 4244              	.LVL358:
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4245              		.loc 1 4636 0
 4246 002e 0222     		movs	r2, #2
 4247 0030 84F85020 		strb	r2, [r4, #80]
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4248              		.loc 1 4638 0
 4249 0034 042E     		cmp	r6, #4
 4250 0036 16D8     		bhi	.L359
 4251 0038 DFE806F0 		tbb	[pc, r6]
 4252              	.L361:
 4253 003c 22       		.byte	(.L370-.L361)/2
ARM GAS  /tmp/ccNFblrO.s 			page 176


 4254 003d 03       		.byte	(.L362-.L361)/2
 4255 003e 08       		.byte	(.L363-.L361)/2
 4256 003f 0D       		.byte	(.L364-.L361)/2
 4257 0040 10       		.byte	(.L365-.L361)/2
 4258 0041 00       		.p2align 1
 4259              	.L362:
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4260              		.loc 1 4641 0
 4261 0042 E26C     		ldr	r2, [r4, #76]
 4262 0044 1543     		orrs	r5, r5, r2
 4263              	.LVL359:
 4264 0046 E564     		str	r5, [r4, #76]
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4265              		.loc 1 4621 0
 4266 0048 0125     		movs	r5, #1
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4267              		.loc 1 4642 0
 4268 004a 1EE0     		b	.L360
 4269              	.LVL360:
 4270              	.L363:
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4271              		.loc 1 4645 0
 4272 004c E26C     		ldr	r2, [r4, #76]
 4273 004e 0132     		adds	r2, r2, #1
 4274 0050 E264     		str	r2, [r4, #76]
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4275              		.loc 1 4621 0
 4276 0052 0125     		movs	r5, #1
 4277              	.LVL361:
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4278              		.loc 1 4646 0
 4279 0054 19E0     		b	.L360
 4280              	.LVL362:
 4281              	.L364:
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4282              		.loc 1 4649 0
 4283 0056 E564     		str	r5, [r4, #76]
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4284              		.loc 1 4621 0
 4285 0058 0125     		movs	r5, #1
 4286              	.LVL363:
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4287              		.loc 1 4650 0
 4288 005a 16E0     		b	.L360
 4289              	.LVL364:
 4290              	.L365:
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4291              		.loc 1 4653 0
 4292 005c 022B     		cmp	r3, #2
 4293 005e 11D0     		beq	.L371
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4294              		.loc 1 4655 0
 4295 0060 E564     		str	r5, [r4, #76]
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4296              		.loc 1 4621 0
 4297 0062 0125     		movs	r5, #1
 4298              	.LVL365:
ARM GAS  /tmp/ccNFblrO.s 			page 177


 4299 0064 11E0     		b	.L360
 4300              	.LVL366:
 4301              	.L359:
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4302              		.loc 1 4673 0
 4303 0066 E26C     		ldr	r2, [r4, #76]
 4304 0068 B2F1FF3F 		cmp	r2, #-1
 4305 006c 0CD0     		beq	.L372
 4306              	.LBB179:
 4307              	.LBB180:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4308              		.loc 2 195 0
 4309              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4310 006e 4FF05003 			mov r3, #80												
 4311 0072 83F31188 		msr basepri, r3											
 4312 0076 BFF36F8F 		isb														
 4313 007a BFF34F8F 		dsb														
 4314              	
 4315              	@ 0 "" 2
 4316              	.LVL367:
 4317              		.thumb
 4318              	.L366:
 4319              	.LBE180:
 4320              	.LBE179:
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4321              		.loc 1 4673 0 discriminator 2
 4322 007e FEE7     		b	.L366
 4323              	.LVL368:
 4324              	.L370:
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4325              		.loc 1 4621 0
 4326 0080 0125     		movs	r5, #1
 4327              	.LVL369:
 4328 0082 02E0     		b	.L360
 4329              	.LVL370:
 4330              	.L371:
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4331              		.loc 1 4660 0
 4332 0084 0025     		movs	r5, #0
 4333              	.LVL371:
 4334 0086 00E0     		b	.L360
 4335              	.LVL372:
 4336              	.L372:
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4337              		.loc 1 4621 0
 4338 0088 0125     		movs	r5, #1
 4339              	.LVL373:
 4340              	.L360:
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4341              		.loc 1 4682 0
 4342 008a 012B     		cmp	r3, #1
 4343 008c 2CD1     		bne	.L367
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4344              		.loc 1 4684 0
 4345 008e 261D     		adds	r6, r4, #4
 4346 0090 3046     		mov	r0, r6
 4347 0092 FFF7FEFF 		bl	uxListRemove
ARM GAS  /tmp/ccNFblrO.s 			page 178


 4348              	.LVL374:
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4349              		.loc 1 4685 0
 4350 0096 E36A     		ldr	r3, [r4, #44]
 4351 0098 0122     		movs	r2, #1
 4352 009a 02FA03F1 		lsl	r1, r2, r3
 4353 009e 1448     		ldr	r0, .L374
 4354 00a0 0268     		ldr	r2, [r0]
 4355 00a2 0A43     		orrs	r2, r2, r1
 4356 00a4 0260     		str	r2, [r0]
 4357 00a6 03EB8303 		add	r3, r3, r3, lsl #2
 4358 00aa 9B00     		lsls	r3, r3, #2
 4359 00ac 1148     		ldr	r0, .L374+4
 4360 00ae 1844     		add	r0, r0, r3
 4361 00b0 3146     		mov	r1, r6
 4362 00b2 FFF7FEFF 		bl	vListInsertEnd
 4363              	.LVL375:
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4364              		.loc 1 4688 0
 4365 00b6 A36A     		ldr	r3, [r4, #40]
 4366 00b8 43B1     		cbz	r3, .L368
 4367              	.LBB181:
 4368              	.LBB182:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4369              		.loc 2 195 0
 4370              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4371 00ba 4FF05003 			mov r3, #80												
 4372 00be 83F31188 		msr basepri, r3											
 4373 00c2 BFF36F8F 		isb														
 4374 00c6 BFF34F8F 		dsb														
 4375              	
 4376              	@ 0 "" 2
 4377              	.LVL376:
 4378              		.thumb
 4379              	.L369:
 4380              	.LBE182:
 4381              	.LBE181:
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4382              		.loc 1 4688 0 discriminator 3
 4383 00ca FEE7     		b	.L369
 4384              	.L368:
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4385              		.loc 1 4706 0
 4386 00cc E26A     		ldr	r2, [r4, #44]
 4387 00ce 0A4B     		ldr	r3, .L374+8
 4388 00d0 1B68     		ldr	r3, [r3]
 4389 00d2 DB6A     		ldr	r3, [r3, #44]
 4390 00d4 9A42     		cmp	r2, r3
 4391 00d6 07D9     		bls	.L367
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4392              		.loc 1 4710 0
 4393 00d8 4FF08052 		mov	r2, #268435456
 4394 00dc 074B     		ldr	r3, .L374+12
 4395 00de 1A60     		str	r2, [r3]
 4396              	@ 4710 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4397 00e0 BFF34F8F 		dsb
 4398              	@ 0 "" 2
ARM GAS  /tmp/ccNFblrO.s 			page 179


 4399              	@ 4710 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4400 00e4 BFF36F8F 		isb
 4401              	@ 0 "" 2
 4402              		.thumb
 4403              	.L367:
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4404              		.loc 1 4722 0
 4405 00e8 FFF7FEFF 		bl	vPortExitCritical
 4406              	.LVL377:
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4407              		.loc 1 4725 0
 4408 00ec 2846     		mov	r0, r5
 4409 00ee F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4410              	.LVL378:
 4411              	.L375:
 4412              		.align	2
 4413              	.L374:
 4414 00f0 00000000 		.word	.LANCHOR13
 4415 00f4 00000000 		.word	.LANCHOR4
 4416 00f8 00000000 		.word	.LANCHOR10
 4417 00fc 04ED00E0 		.word	-536810236
 4418              		.cfi_endproc
 4419              	.LFE49:
 4421              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4422              		.align	2
 4423              		.global	xTaskGenericNotifyFromISR
 4424              		.thumb
 4425              		.thumb_func
 4427              	xTaskGenericNotifyFromISR:
 4428              	.LFB50:
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4429              		.loc 1 4733 0
 4430              		.cfi_startproc
 4431              		@ args = 4, pretend = 0, frame = 0
 4432              		@ frame_needed = 0, uses_anonymous_args = 0
 4433              	.LVL379:
 4434 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 4435              	.LCFI44:
 4436              		.cfi_def_cfa_offset 32
 4437              		.cfi_offset 3, -32
 4438              		.cfi_offset 4, -28
 4439              		.cfi_offset 5, -24
 4440              		.cfi_offset 6, -20
 4441              		.cfi_offset 7, -16
 4442              		.cfi_offset 8, -12
 4443              		.cfi_offset 9, -8
 4444              		.cfi_offset 14, -4
 4445 0004 089E     		ldr	r6, [sp, #32]
 4446              	.LVL380:
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4447              		.loc 1 4739 0
 4448 0006 40B9     		cbnz	r0, .L377
 4449              	.LBB183:
 4450              	.LBB184:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4451              		.loc 2 195 0
 4452              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
ARM GAS  /tmp/ccNFblrO.s 			page 180


 4453 0008 4FF05003 			mov r3, #80												
 4454 000c 83F31188 		msr basepri, r3											
 4455 0010 BFF36F8F 		isb														
 4456 0014 BFF34F8F 		dsb														
 4457              	
 4458              	@ 0 "" 2
 4459              	.LVL381:
 4460              		.thumb
 4461              	.L378:
 4462              	.LBE184:
 4463              	.LBE183:
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4464              		.loc 1 4739 0 discriminator 1
 4465 0018 FEE7     		b	.L378
 4466              	.LVL382:
 4467              	.L377:
 4468 001a 0446     		mov	r4, r0
 4469 001c 9946     		mov	r9, r3
 4470 001e 9046     		mov	r8, r2
 4471 0020 0D46     		mov	r5, r1
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4472              		.loc 1 4757 0
 4473 0022 FFF7FEFF 		bl	vPortValidateInterruptPriority
 4474              	.LVL383:
 4475              	.LBB185:
 4476              	.LBB186:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4477              		.loc 2 211 0
 4478              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4479 0026 EFF31187 			mrs r7, basepri											
 4480 002a 4FF05003 		mov r3, #80												
 4481 002e 83F31188 		msr basepri, r3											
 4482 0032 BFF36F8F 		isb														
 4483 0036 BFF34F8F 		dsb														
 4484              	
 4485              	@ 0 "" 2
 4486              	.LVL384:
 4487              		.thumb
 4488              	.LBE186:
 4489              	.LBE185:
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4490              		.loc 1 4763 0
 4491 003a B9F1000F 		cmp	r9, #0
 4492 003e 02D0     		beq	.L379
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4493              		.loc 1 4765 0
 4494 0040 E36C     		ldr	r3, [r4, #76]
 4495 0042 C9F80030 		str	r3, [r9]
 4496              	.L379:
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4497              		.loc 1 4768 0
 4498 0046 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4499 004a DBB2     		uxtb	r3, r3
 4500              	.LVL385:
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4501              		.loc 1 4769 0
 4502 004c 0222     		movs	r2, #2
ARM GAS  /tmp/ccNFblrO.s 			page 181


 4503 004e 84F85020 		strb	r2, [r4, #80]
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4504              		.loc 1 4771 0
 4505 0052 B8F1040F 		cmp	r8, #4
 4506 0056 16D8     		bhi	.L380
 4507 0058 DFE808F0 		tbb	[pc, r8]
 4508              	.L382:
 4509 005c 22       		.byte	(.L394-.L382)/2
 4510 005d 03       		.byte	(.L383-.L382)/2
 4511 005e 08       		.byte	(.L384-.L382)/2
 4512 005f 0D       		.byte	(.L385-.L382)/2
 4513 0060 10       		.byte	(.L386-.L382)/2
 4514 0061 00       		.p2align 1
 4515              	.L383:
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4516              		.loc 1 4774 0
 4517 0062 E26C     		ldr	r2, [r4, #76]
 4518 0064 1543     		orrs	r5, r5, r2
 4519              	.LVL386:
 4520 0066 E564     		str	r5, [r4, #76]
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4521              		.loc 1 4736 0
 4522 0068 0125     		movs	r5, #1
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4523              		.loc 1 4775 0
 4524 006a 1EE0     		b	.L381
 4525              	.LVL387:
 4526              	.L384:
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4527              		.loc 1 4778 0
 4528 006c E26C     		ldr	r2, [r4, #76]
 4529 006e 0132     		adds	r2, r2, #1
 4530 0070 E264     		str	r2, [r4, #76]
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4531              		.loc 1 4736 0
 4532 0072 0125     		movs	r5, #1
 4533              	.LVL388:
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4534              		.loc 1 4779 0
 4535 0074 19E0     		b	.L381
 4536              	.LVL389:
 4537              	.L385:
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4538              		.loc 1 4782 0
 4539 0076 E564     		str	r5, [r4, #76]
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4540              		.loc 1 4736 0
 4541 0078 0125     		movs	r5, #1
 4542              	.LVL390:
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4543              		.loc 1 4783 0
 4544 007a 16E0     		b	.L381
 4545              	.LVL391:
 4546              	.L386:
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4547              		.loc 1 4786 0
 4548 007c 022B     		cmp	r3, #2
ARM GAS  /tmp/ccNFblrO.s 			page 182


 4549 007e 11D0     		beq	.L395
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4550              		.loc 1 4788 0
 4551 0080 E564     		str	r5, [r4, #76]
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4552              		.loc 1 4736 0
 4553 0082 0125     		movs	r5, #1
 4554              	.LVL392:
 4555 0084 11E0     		b	.L381
 4556              	.LVL393:
 4557              	.L380:
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4558              		.loc 1 4806 0
 4559 0086 E26C     		ldr	r2, [r4, #76]
 4560 0088 B2F1FF3F 		cmp	r2, #-1
 4561 008c 0CD0     		beq	.L396
 4562              	.LBB187:
 4563              	.LBB188:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4564              		.loc 2 195 0
 4565              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4566 008e 4FF05003 			mov r3, #80												
 4567 0092 83F31188 		msr basepri, r3											
 4568 0096 BFF36F8F 		isb														
 4569 009a BFF34F8F 		dsb														
 4570              	
 4571              	@ 0 "" 2
 4572              	.LVL394:
 4573              		.thumb
 4574              	.L387:
 4575              	.LBE188:
 4576              	.LBE187:
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4577              		.loc 1 4806 0 discriminator 2
 4578 009e FEE7     		b	.L387
 4579              	.LVL395:
 4580              	.L394:
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4581              		.loc 1 4736 0
 4582 00a0 0125     		movs	r5, #1
 4583              	.LVL396:
 4584 00a2 02E0     		b	.L381
 4585              	.LVL397:
 4586              	.L395:
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4587              		.loc 1 4793 0
 4588 00a4 0025     		movs	r5, #0
 4589              	.LVL398:
 4590 00a6 00E0     		b	.L381
 4591              	.LVL399:
 4592              	.L396:
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4593              		.loc 1 4736 0
 4594 00a8 0125     		movs	r5, #1
 4595              	.LVL400:
 4596              	.L381:
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccNFblrO.s 			page 183


 4597              		.loc 1 4814 0
 4598 00aa 012B     		cmp	r3, #1
 4599 00ac 34D1     		bne	.L388
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4600              		.loc 1 4817 0
 4601 00ae A36A     		ldr	r3, [r4, #40]
 4602              	.LVL401:
 4603 00b0 43B1     		cbz	r3, .L389
 4604              	.LBB189:
 4605              	.LBB190:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4606              		.loc 2 195 0
 4607              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4608 00b2 4FF05003 			mov r3, #80												
 4609 00b6 83F31188 		msr basepri, r3											
 4610 00ba BFF36F8F 		isb														
 4611 00be BFF34F8F 		dsb														
 4612              	
 4613              	@ 0 "" 2
 4614              	.LVL402:
 4615              		.thumb
 4616              	.L390:
 4617              	.LBE190:
 4618              	.LBE189:
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4619              		.loc 1 4817 0 discriminator 3
 4620 00c2 FEE7     		b	.L390
 4621              	.L389:
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4622              		.loc 1 4819 0
 4623 00c4 174B     		ldr	r3, .L398
 4624 00c6 1B68     		ldr	r3, [r3]
 4625 00c8 ABB9     		cbnz	r3, .L391
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4626              		.loc 1 4821 0
 4627 00ca 04F10408 		add	r8, r4, #4
 4628 00ce 4046     		mov	r0, r8
 4629 00d0 FFF7FEFF 		bl	uxListRemove
 4630              	.LVL403:
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4631              		.loc 1 4822 0
 4632 00d4 E36A     		ldr	r3, [r4, #44]
 4633 00d6 0122     		movs	r2, #1
 4634 00d8 02FA03F1 		lsl	r1, r2, r3
 4635 00dc 1248     		ldr	r0, .L398+4
 4636 00de 0268     		ldr	r2, [r0]
 4637 00e0 0A43     		orrs	r2, r2, r1
 4638 00e2 0260     		str	r2, [r0]
 4639 00e4 03EB8303 		add	r3, r3, r3, lsl #2
 4640 00e8 9B00     		lsls	r3, r3, #2
 4641 00ea 1048     		ldr	r0, .L398+8
 4642 00ec 1844     		add	r0, r0, r3
 4643 00ee 4146     		mov	r1, r8
 4644 00f0 FFF7FEFF 		bl	vListInsertEnd
 4645              	.LVL404:
 4646 00f4 04E0     		b	.L392
 4647              	.L391:
ARM GAS  /tmp/ccNFblrO.s 			page 184


4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4648              		.loc 1 4828 0
 4649 00f6 0E48     		ldr	r0, .L398+12
 4650 00f8 04F11801 		add	r1, r4, #24
 4651 00fc FFF7FEFF 		bl	vListInsertEnd
 4652              	.LVL405:
 4653              	.L392:
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4654              		.loc 1 4831 0
 4655 0100 E26A     		ldr	r2, [r4, #44]
 4656 0102 0C4B     		ldr	r3, .L398+16
 4657 0104 1B68     		ldr	r3, [r3]
 4658 0106 DB6A     		ldr	r3, [r3, #44]
 4659 0108 9A42     		cmp	r2, r3
 4660 010a 05D9     		bls	.L388
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4661              		.loc 1 4835 0
 4662 010c 0EB1     		cbz	r6, .L393
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4663              		.loc 1 4837 0
 4664 010e 0123     		movs	r3, #1
 4665 0110 3360     		str	r3, [r6]
 4666              	.L393:
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4667              		.loc 1 4843 0
 4668 0112 0122     		movs	r2, #1
 4669 0114 084B     		ldr	r3, .L398+20
 4670 0116 1A60     		str	r2, [r3]
 4671              	.L388:
 4672              	.LVL406:
 4673              	.LBB191:
 4674              	.LBB192:
 4675              		.loc 2 229 0
 4676              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4677 0118 87F31188 			msr basepri, r7	
 4678              	@ 0 "" 2
 4679              		.thumb
 4680              	.LBE192:
 4681              	.LBE191:
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4682              		.loc 1 4854 0
 4683 011c 2846     		mov	r0, r5
 4684 011e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4685              	.LVL407:
 4686              	.L399:
 4687 0122 00BF     		.align	2
 4688              	.L398:
 4689 0124 00000000 		.word	.LANCHOR16
 4690 0128 00000000 		.word	.LANCHOR13
 4691 012c 00000000 		.word	.LANCHOR4
 4692 0130 00000000 		.word	.LANCHOR1
 4693 0134 00000000 		.word	.LANCHOR10
 4694 0138 00000000 		.word	.LANCHOR20
 4695              		.cfi_endproc
 4696              	.LFE50:
 4698              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4699              		.align	2
ARM GAS  /tmp/ccNFblrO.s 			page 185


 4700              		.global	vTaskNotifyGiveFromISR
 4701              		.thumb
 4702              		.thumb_func
 4704              	vTaskNotifyGiveFromISR:
 4705              	.LFB51:
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4706              		.loc 1 4862 0
 4707              		.cfi_startproc
 4708              		@ args = 0, pretend = 0, frame = 0
 4709              		@ frame_needed = 0, uses_anonymous_args = 0
 4710              	.LVL408:
 4711 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4712              	.LCFI45:
 4713              		.cfi_def_cfa_offset 24
 4714              		.cfi_offset 3, -24
 4715              		.cfi_offset 4, -20
 4716              		.cfi_offset 5, -16
 4717              		.cfi_offset 6, -12
 4718              		.cfi_offset 7, -8
 4719              		.cfi_offset 14, -4
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4720              		.loc 1 4867 0
 4721 0002 40B9     		cbnz	r0, .L401
 4722              	.LBB193:
 4723              	.LBB194:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4724              		.loc 2 195 0
 4725              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4726 0004 4FF05003 			mov r3, #80												
 4727 0008 83F31188 		msr basepri, r3											
 4728 000c BFF36F8F 		isb														
 4729 0010 BFF34F8F 		dsb														
 4730              	
 4731              	@ 0 "" 2
 4732              	.LVL409:
 4733              		.thumb
 4734              	.L402:
 4735              	.LBE194:
 4736              	.LBE193:
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4737              		.loc 1 4867 0 discriminator 1
 4738 0014 FEE7     		b	.L402
 4739              	.L401:
 4740 0016 0446     		mov	r4, r0
 4741 0018 0D46     		mov	r5, r1
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4742              		.loc 1 4885 0
 4743 001a FFF7FEFF 		bl	vPortValidateInterruptPriority
 4744              	.LVL410:
 4745              	.LBB195:
 4746              	.LBB196:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4747              		.loc 2 211 0
 4748              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4749 001e EFF31187 			mrs r7, basepri											
 4750 0022 4FF05003 		mov r3, #80												
 4751 0026 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccNFblrO.s 			page 186


 4752 002a BFF36F8F 		isb														
 4753 002e BFF34F8F 		dsb														
 4754              	
 4755              	@ 0 "" 2
 4756              	.LVL411:
 4757              		.thumb
 4758              	.LBE196:
 4759              	.LBE195:
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4760              		.loc 1 4891 0
 4761 0032 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4762 0036 DBB2     		uxtb	r3, r3
 4763              	.LVL412:
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4764              		.loc 1 4892 0
 4765 0038 0222     		movs	r2, #2
 4766 003a 84F85020 		strb	r2, [r4, #80]
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4767              		.loc 1 4896 0
 4768 003e E26C     		ldr	r2, [r4, #76]
 4769 0040 0132     		adds	r2, r2, #1
 4770 0042 E264     		str	r2, [r4, #76]
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4771              		.loc 1 4902 0
 4772 0044 012B     		cmp	r3, #1
 4773 0046 33D1     		bne	.L403
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4774              		.loc 1 4905 0
 4775 0048 A36A     		ldr	r3, [r4, #40]
 4776              	.LVL413:
 4777 004a 43B1     		cbz	r3, .L404
 4778              	.LBB197:
 4779              	.LBB198:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4780              		.loc 2 195 0
 4781              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4782 004c 4FF05003 			mov r3, #80												
 4783 0050 83F31188 		msr basepri, r3											
 4784 0054 BFF36F8F 		isb														
 4785 0058 BFF34F8F 		dsb														
 4786              	
 4787              	@ 0 "" 2
 4788              	.LVL414:
 4789              		.thumb
 4790              	.L405:
 4791              	.LBE198:
 4792              	.LBE197:
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4793              		.loc 1 4905 0 discriminator 2
 4794 005c FEE7     		b	.L405
 4795              	.L404:
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4796              		.loc 1 4907 0
 4797 005e 164B     		ldr	r3, .L410
 4798 0060 1B68     		ldr	r3, [r3]
 4799 0062 A3B9     		cbnz	r3, .L406
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  /tmp/ccNFblrO.s 			page 187


 4800              		.loc 1 4909 0
 4801 0064 261D     		adds	r6, r4, #4
 4802 0066 3046     		mov	r0, r6
 4803 0068 FFF7FEFF 		bl	uxListRemove
 4804              	.LVL415:
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4805              		.loc 1 4910 0
 4806 006c E36A     		ldr	r3, [r4, #44]
 4807 006e 0122     		movs	r2, #1
 4808 0070 02FA03F1 		lsl	r1, r2, r3
 4809 0074 1148     		ldr	r0, .L410+4
 4810 0076 0268     		ldr	r2, [r0]
 4811 0078 0A43     		orrs	r2, r2, r1
 4812 007a 0260     		str	r2, [r0]
 4813 007c 03EB8303 		add	r3, r3, r3, lsl #2
 4814 0080 9B00     		lsls	r3, r3, #2
 4815 0082 0F48     		ldr	r0, .L410+8
 4816 0084 1844     		add	r0, r0, r3
 4817 0086 3146     		mov	r1, r6
 4818 0088 FFF7FEFF 		bl	vListInsertEnd
 4819              	.LVL416:
 4820 008c 04E0     		b	.L407
 4821              	.L406:
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4822              		.loc 1 4916 0
 4823 008e 0D48     		ldr	r0, .L410+12
 4824 0090 04F11801 		add	r1, r4, #24
 4825 0094 FFF7FEFF 		bl	vListInsertEnd
 4826              	.LVL417:
 4827              	.L407:
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4828              		.loc 1 4919 0
 4829 0098 E26A     		ldr	r2, [r4, #44]
 4830 009a 0B4B     		ldr	r3, .L410+16
 4831 009c 1B68     		ldr	r3, [r3]
 4832 009e DB6A     		ldr	r3, [r3, #44]
 4833 00a0 9A42     		cmp	r2, r3
 4834 00a2 05D9     		bls	.L403
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4835              		.loc 1 4923 0
 4836 00a4 0DB1     		cbz	r5, .L408
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4837              		.loc 1 4925 0
 4838 00a6 0123     		movs	r3, #1
 4839 00a8 2B60     		str	r3, [r5]
 4840              	.L408:
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4841              		.loc 1 4931 0
 4842 00aa 0122     		movs	r2, #1
 4843 00ac 074B     		ldr	r3, .L410+20
 4844 00ae 1A60     		str	r2, [r3]
 4845              	.L403:
 4846              	.LVL418:
 4847              	.LBB199:
 4848              	.LBB200:
 4849              		.loc 2 229 0
 4850              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
ARM GAS  /tmp/ccNFblrO.s 			page 188


 4851 00b0 87F31188 			msr basepri, r7	
 4852              	@ 0 "" 2
 4853              		.thumb
 4854 00b4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4855              	.LVL419:
 4856              	.L411:
 4857 00b6 00BF     		.align	2
 4858              	.L410:
 4859 00b8 00000000 		.word	.LANCHOR16
 4860 00bc 00000000 		.word	.LANCHOR13
 4861 00c0 00000000 		.word	.LANCHOR4
 4862 00c4 00000000 		.word	.LANCHOR1
 4863 00c8 00000000 		.word	.LANCHOR10
 4864 00cc 00000000 		.word	.LANCHOR20
 4865              	.LBE200:
 4866              	.LBE199:
 4867              		.cfi_endproc
 4868              	.LFE51:
 4870              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 4871              		.align	2
 4872              		.global	xTaskNotifyStateClear
 4873              		.thumb
 4874              		.thumb_func
 4876              	xTaskNotifyStateClear:
 4877              	.LFB52:
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4878              		.loc 1 4949 0
 4879              		.cfi_startproc
 4880              		@ args = 0, pretend = 0, frame = 0
 4881              		@ frame_needed = 0, uses_anonymous_args = 0
 4882              	.LVL420:
 4883 0000 10B5     		push	{r4, lr}
 4884              	.LCFI46:
 4885              		.cfi_def_cfa_offset 8
 4886              		.cfi_offset 4, -8
 4887              		.cfi_offset 14, -4
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4888              		.loc 1 4955 0
 4889 0002 0446     		mov	r4, r0
 4890 0004 08B9     		cbnz	r0, .L413
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4891              		.loc 1 4955 0 is_stmt 0 discriminator 1
 4892 0006 094B     		ldr	r3, .L417
 4893 0008 1C68     		ldr	r4, [r3]
 4894              	.LVL421:
 4895              	.L413:
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4896              		.loc 1 4957 0 is_stmt 1 discriminator 4
 4897 000a FFF7FEFF 		bl	vPortEnterCritical
 4898              	.LVL422:
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4899              		.loc 1 4959 0 discriminator 4
 4900 000e 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4901 0012 DBB2     		uxtb	r3, r3
 4902 0014 022B     		cmp	r3, #2
 4903 0016 04D1     		bne	.L415
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
ARM GAS  /tmp/ccNFblrO.s 			page 189


 4904              		.loc 1 4961 0
 4905 0018 0023     		movs	r3, #0
 4906 001a 84F85030 		strb	r3, [r4, #80]
 4907              	.LVL423:
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4908              		.loc 1 4962 0
 4909 001e 0124     		movs	r4, #1
 4910              	.LVL424:
 4911 0020 00E0     		b	.L414
 4912              	.LVL425:
 4913              	.L415:
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4914              		.loc 1 4966 0
 4915 0022 0024     		movs	r4, #0
 4916              	.LVL426:
 4917              	.L414:
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4918              		.loc 1 4969 0
 4919 0024 FFF7FEFF 		bl	vPortExitCritical
 4920              	.LVL427:
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4921              		.loc 1 4972 0
 4922 0028 2046     		mov	r0, r4
 4923 002a 10BD     		pop	{r4, pc}
 4924              	.LVL428:
 4925              	.L418:
 4926              		.align	2
 4927              	.L417:
 4928 002c 00000000 		.word	.LANCHOR10
 4929              		.cfi_endproc
 4930              	.LFE52:
 4932              		.global	pxCurrentTCB
 4933              		.section	.bss.xNumOfOverflows,"aw",%nobits
 4934              		.align	2
 4935              		.set	.LANCHOR18,. + 0
 4938              	xNumOfOverflows:
 4939 0000 00000000 		.space	4
 4940              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 4941              		.align	2
 4942              		.set	.LANCHOR2,. + 0
 4945              	pxDelayedTaskList:
 4946 0000 00000000 		.space	4
 4947              		.section	.rodata.str1.4,"aMS",%progbits,1
 4948              		.align	2
 4949              	.LC0:
 4950 0000 49444C45 		.ascii	"IDLE\000"
 4950      00
 4951              		.section	.bss.xSchedulerRunning,"aw",%nobits
 4952              		.align	2
 4953              		.set	.LANCHOR11,. + 0
 4956              	xSchedulerRunning:
 4957 0000 00000000 		.space	4
 4958              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 4959              		.align	2
 4960              		.set	.LANCHOR7,. + 0
 4963              	xTasksWaitingTermination:
 4964 0000 00000000 		.space	20
ARM GAS  /tmp/ccNFblrO.s 			page 190


 4964      00000000 
 4964      00000000 
 4964      00000000 
 4964      00000000 
 4965              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 4966              		.align	2
 4967              		.set	.LANCHOR8,. + 0
 4970              	pxOverflowDelayedTaskList:
 4971 0000 00000000 		.space	4
 4972              		.section	.bss.uxPendedTicks,"aw",%nobits
 4973              		.align	2
 4974              		.set	.LANCHOR19,. + 0
 4977              	uxPendedTicks:
 4978 0000 00000000 		.space	4
 4979              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 4980              		.align	2
 4981              		.set	.LANCHOR4,. + 0
 4984              	pxReadyTasksLists:
 4985 0000 00000000 		.space	140
 4985      00000000 
 4985      00000000 
 4985      00000000 
 4985      00000000 
 4986              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 4987              		.align	2
 4988              		.set	.LANCHOR16,. + 0
 4991              	uxSchedulerSuspended:
 4992 0000 00000000 		.space	4
 4993              		.section	.bss.xDelayedTaskList1.5497,"aw",%nobits
 4994              		.align	2
 4995              		.set	.LANCHOR5,. + 0
 4998              	xDelayedTaskList1.5497:
 4999 0000 00000000 		.space	20
 4999      00000000 
 4999      00000000 
 4999      00000000 
 4999      00000000 
 5000              		.section	.bss.pxCurrentTCB,"aw",%nobits
 5001              		.align	2
 5002              		.set	.LANCHOR10,. + 0
 5005              	pxCurrentTCB:
 5006 0000 00000000 		.space	4
 5007              		.section	.bss.xPendingReadyList,"aw",%nobits
 5008              		.align	2
 5009              		.set	.LANCHOR1,. + 0
 5012              	xPendingReadyList:
 5013 0000 00000000 		.space	20
 5013      00000000 
 5013      00000000 
 5013      00000000 
 5013      00000000 
 5014              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 5015              		.align	2
 5016              		.set	.LANCHOR17,. + 0
 5019              	xIdleTaskHandle:
 5020 0000 00000000 		.space	4
 5021              		.section	.bss.xTickCount,"aw",%nobits
ARM GAS  /tmp/ccNFblrO.s 			page 191


 5022              		.align	2
 5023              		.set	.LANCHOR15,. + 0
 5026              	xTickCount:
 5027 0000 00000000 		.space	4
 5028              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 5029              		.align	2
 5030              		.set	.LANCHOR3,. + 0
 5033              	xNextTaskUnblockTime:
 5034 0000 00000000 		.space	4
 5035              		.section	.bss.xDelayedTaskList2.5498,"aw",%nobits
 5036              		.align	2
 5037              		.set	.LANCHOR6,. + 0
 5040              	xDelayedTaskList2.5498:
 5041 0000 00000000 		.space	20
 5041      00000000 
 5041      00000000 
 5041      00000000 
 5041      00000000 
 5042              		.section	.bss.uxTaskNumber,"aw",%nobits
 5043              		.align	2
 5044              		.set	.LANCHOR12,. + 0
 5047              	uxTaskNumber:
 5048 0000 00000000 		.space	4
 5049              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 5050              		.align	2
 5051              		.set	.LANCHOR9,. + 0
 5054              	uxCurrentNumberOfTasks:
 5055 0000 00000000 		.space	4
 5056              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 5057              		.align	2
 5058              		.set	.LANCHOR14,. + 0
 5061              	uxDeletedTasksWaitingCleanUp:
 5062 0000 00000000 		.space	4
 5063              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 5064              		.align	2
 5065              		.set	.LANCHOR0,. + 0
 5068              	xSuspendedTaskList:
 5069 0000 00000000 		.space	20
 5069      00000000 
 5069      00000000 
 5069      00000000 
 5069      00000000 
 5070              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 5071              		.align	2
 5072              		.set	.LANCHOR13,. + 0
 5075              	uxTopReadyPriority:
 5076 0000 00000000 		.space	4
 5077              		.section	.bss.xYieldPending,"aw",%nobits
 5078              		.align	2
 5079              		.set	.LANCHOR20,. + 0
 5082              	xYieldPending:
 5083 0000 00000000 		.space	4
 5084              		.text
 5085              	.Letext0:
 5086              		.file 3 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 5087              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 5088              		.file 5 "/usr/include/newlib/sys/_stdint.h"
ARM GAS  /tmp/ccNFblrO.s 			page 192


 5089              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 5090              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 5091              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 5092              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  /tmp/ccNFblrO.s 			page 193


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccNFblrO.s:19     .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccNFblrO.s:23     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccNFblrO.s:89     .text.prvTaskIsTaskSuspended:0000000000000038 $d
     /tmp/ccNFblrO.s:95     .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccNFblrO.s:99     .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccNFblrO.s:132    .text.prvResetNextTaskUnblockTime:0000000000000024 $d
     /tmp/ccNFblrO.s:138    .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccNFblrO.s:142    .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/ccNFblrO.s:169    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/ccNFblrO.s:173    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/ccNFblrO.s:308    .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccNFblrO.s:312    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccNFblrO.s:378    .text.prvInitialiseTaskLists:0000000000000048 $d
     /tmp/ccNFblrO.s:390    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/ccNFblrO.s:394    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/ccNFblrO.s:497    .text.prvAddNewTaskToReadyList:000000000000008c $d
     /tmp/ccNFblrO.s:508    .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccNFblrO.s:512    .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccNFblrO.s:568    .text.prvCheckTasksWaitingTermination:0000000000000038 $d
     /tmp/ccNFblrO.s:575    .text.prvIdleTask:0000000000000000 $t
     /tmp/ccNFblrO.s:579    .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccNFblrO.s:617    .text.prvIdleTask:0000000000000020 $d
     /tmp/ccNFblrO.s:623    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccNFblrO.s:627    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccNFblrO.s:724    .text.prvAddCurrentTaskToDelayedList:0000000000000078 $d
     /tmp/ccNFblrO.s:735    .text.xTaskCreate:0000000000000000 $t
     /tmp/ccNFblrO.s:740    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/ccNFblrO.s:837    .text.vTaskDelete:0000000000000000 $t
     /tmp/ccNFblrO.s:842    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccNFblrO.s:982    .text.vTaskDelete:00000000000000b4 $d
     /tmp/ccNFblrO.s:996    .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccNFblrO.s:1001   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccNFblrO.s:1037   .text.uxTaskPriorityGet:0000000000000018 $d
     /tmp/ccNFblrO.s:1042   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccNFblrO.s:1047   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccNFblrO.s:1103   .text.uxTaskPriorityGetFromISR:000000000000002c $d
     /tmp/ccNFblrO.s:1108   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccNFblrO.s:1113   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccNFblrO.s:1296   .text.vTaskPrioritySet:00000000000000dc $d
     /tmp/ccNFblrO.s:1304   .text.vTaskResume:0000000000000000 $t
     /tmp/ccNFblrO.s:1309   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccNFblrO.s:1408   .text.vTaskResume:0000000000000078 $d
     /tmp/ccNFblrO.s:1416   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccNFblrO.s:1421   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccNFblrO.s:1552   .text.xTaskResumeFromISR:0000000000000094 $d
     /tmp/ccNFblrO.s:1561   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccNFblrO.s:1566   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccNFblrO.s:1655   .text.vTaskStartScheduler:0000000000000064 $d
     /tmp/ccNFblrO.s:1665   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccNFblrO.s:1670   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccNFblrO.s:1706   .text.vTaskEndScheduler:0000000000000020 $d
     /tmp/ccNFblrO.s:1711   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccNFblrO.s:1716   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccNFblrO.s:1732   .text.vTaskSuspendAll:000000000000000c $d
     /tmp/ccNFblrO.s:1737   .text.xTaskGetTickCount:0000000000000000 $t
ARM GAS  /tmp/ccNFblrO.s 			page 194


     /tmp/ccNFblrO.s:1742   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccNFblrO.s:1758   .text.xTaskGetTickCount:0000000000000008 $d
     /tmp/ccNFblrO.s:1763   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccNFblrO.s:1768   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccNFblrO.s:1791   .text.xTaskGetTickCountFromISR:000000000000000c $d
     /tmp/ccNFblrO.s:1796   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccNFblrO.s:1801   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/ccNFblrO.s:1816   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
     /tmp/ccNFblrO.s:1821   .text.pcTaskGetName:0000000000000000 $t
     /tmp/ccNFblrO.s:1826   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/ccNFblrO.s:1869   .text.pcTaskGetName:0000000000000024 $d
     /tmp/ccNFblrO.s:1874   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/ccNFblrO.s:1879   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccNFblrO.s:2084   .text.xTaskIncrementTick:00000000000000f0 $d
     /tmp/ccNFblrO.s:2099   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccNFblrO.s:2104   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccNFblrO.s:2286   .text.xTaskResumeAll:00000000000000d4 $d
     /tmp/ccNFblrO.s:2299   .text.vTaskDelay:0000000000000000 $t
     /tmp/ccNFblrO.s:2304   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccNFblrO.s:2378   .text.vTaskDelay:0000000000000048 $d
     /tmp/ccNFblrO.s:2384   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccNFblrO.s:2389   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccNFblrO.s:2506   .text.vTaskSwitchContext:0000000000000084 $d
     /tmp/ccNFblrO.s:2515   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccNFblrO.s:2520   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccNFblrO.s:2673   .text.vTaskSuspend:00000000000000c4 $d
     /tmp/ccNFblrO.s:2685   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccNFblrO.s:2690   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccNFblrO.s:2741   .text.vTaskPlaceOnEventList:000000000000002c $d
     /tmp/ccNFblrO.s:2746   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccNFblrO.s:2751   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccNFblrO.s:2836   .text.vTaskPlaceOnUnorderedEventList:0000000000000054 $d
     /tmp/ccNFblrO.s:2842   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccNFblrO.s:2847   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccNFblrO.s:2947   .text.xTaskRemoveFromEventList:0000000000000074 $d
     /tmp/ccNFblrO.s:2957   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccNFblrO.s:2962   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
     /tmp/ccNFblrO.s:3064   .text.vTaskRemoveFromUnorderedEventList:0000000000000078 $d
     /tmp/ccNFblrO.s:3073   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccNFblrO.s:3078   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccNFblrO.s:3131   .text.vTaskSetTimeOutState:0000000000000030 $d
     /tmp/ccNFblrO.s:3137   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
     /tmp/ccNFblrO.s:3142   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
     /tmp/ccNFblrO.s:3162   .text.vTaskInternalSetTimeOutState:0000000000000010 $d
     /tmp/ccNFblrO.s:3168   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccNFblrO.s:3173   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccNFblrO.s:3305   .text.xTaskCheckForTimeOut:0000000000000078 $d
     /tmp/ccNFblrO.s:3311   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccNFblrO.s:3316   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccNFblrO.s:3331   .text.vTaskMissedYield:0000000000000008 $d
     /tmp/ccNFblrO.s:3336   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccNFblrO.s:3341   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccNFblrO.s:3357   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
     /tmp/ccNFblrO.s:3362   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/ccNFblrO.s:3367   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/ccNFblrO.s:3398   .text.xTaskGetSchedulerState:0000000000000018 $d
     /tmp/ccNFblrO.s:3404   .text.xTaskPriorityInherit:0000000000000000 $t
ARM GAS  /tmp/ccNFblrO.s 			page 195


     /tmp/ccNFblrO.s:3409   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
     /tmp/ccNFblrO.s:3552   .text.xTaskPriorityInherit:00000000000000b0 $d
     /tmp/ccNFblrO.s:3559   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccNFblrO.s:3564   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccNFblrO.s:3718   .text.xTaskPriorityDisinherit:00000000000000a8 $d
     /tmp/ccNFblrO.s:3725   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
     /tmp/ccNFblrO.s:3730   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/ccNFblrO.s:3882   .text.vTaskPriorityDisinheritAfterTimeout:00000000000000b8 $d
     /tmp/ccNFblrO.s:3889   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccNFblrO.s:3894   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccNFblrO.s:3917   .text.uxTaskResetEventItemValue:0000000000000014 $d
     /tmp/ccNFblrO.s:3922   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccNFblrO.s:3927   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/ccNFblrO.s:3953   .text.pvTaskIncrementMutexHeldCount:0000000000000018 $d
     /tmp/ccNFblrO.s:3958   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/ccNFblrO.s:3963   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/ccNFblrO.s:4054   .text.ulTaskNotifyTake:000000000000006c $d
     /tmp/ccNFblrO.s:4060   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/ccNFblrO.s:4065   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/ccNFblrO.s:4178   .text.xTaskNotifyWait:0000000000000090 $d
     /tmp/ccNFblrO.s:4184   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/ccNFblrO.s:4189   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/ccNFblrO.s:4253   .text.xTaskGenericNotify:000000000000003c $d
     /tmp/ccNFblrO.s:4414   .text.xTaskGenericNotify:00000000000000f0 $d
     /tmp/ccNFblrO.s:4422   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccNFblrO.s:4427   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/ccNFblrO.s:4509   .text.xTaskGenericNotifyFromISR:000000000000005c $d
     /tmp/ccNFblrO.s:4689   .text.xTaskGenericNotifyFromISR:0000000000000124 $d
     /tmp/ccNFblrO.s:4699   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/ccNFblrO.s:4704   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/ccNFblrO.s:4859   .text.vTaskNotifyGiveFromISR:00000000000000b8 $d
     /tmp/ccNFblrO.s:4871   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/ccNFblrO.s:4876   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/ccNFblrO.s:4928   .text.xTaskNotifyStateClear:000000000000002c $d
     /tmp/ccNFblrO.s:5005   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccNFblrO.s:4934   .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccNFblrO.s:4938   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccNFblrO.s:4941   .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccNFblrO.s:4945   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccNFblrO.s:4948   .rodata.str1.4:0000000000000000 $d
     /tmp/ccNFblrO.s:4952   .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccNFblrO.s:4956   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccNFblrO.s:4959   .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccNFblrO.s:4963   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccNFblrO.s:4966   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccNFblrO.s:4970   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccNFblrO.s:4973   .bss.uxPendedTicks:0000000000000000 $d
     /tmp/ccNFblrO.s:4977   .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/ccNFblrO.s:4980   .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccNFblrO.s:4984   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccNFblrO.s:4987   .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccNFblrO.s:4991   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccNFblrO.s:4994   .bss.xDelayedTaskList1.5497:0000000000000000 $d
     /tmp/ccNFblrO.s:4998   .bss.xDelayedTaskList1.5497:0000000000000000 xDelayedTaskList1.5497
     /tmp/ccNFblrO.s:5001   .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccNFblrO.s:5008   .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccNFblrO.s:5012   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
ARM GAS  /tmp/ccNFblrO.s 			page 196


     /tmp/ccNFblrO.s:5015   .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/ccNFblrO.s:5019   .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/ccNFblrO.s:5022   .bss.xTickCount:0000000000000000 $d
     /tmp/ccNFblrO.s:5026   .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccNFblrO.s:5029   .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccNFblrO.s:5033   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccNFblrO.s:5036   .bss.xDelayedTaskList2.5498:0000000000000000 $d
     /tmp/ccNFblrO.s:5040   .bss.xDelayedTaskList2.5498:0000000000000000 xDelayedTaskList2.5498
     /tmp/ccNFblrO.s:5043   .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccNFblrO.s:5047   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccNFblrO.s:5050   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccNFblrO.s:5054   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccNFblrO.s:5057   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/ccNFblrO.s:5061   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccNFblrO.s:5064   .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccNFblrO.s:5068   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccNFblrO.s:5071   .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccNFblrO.s:5075   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccNFblrO.s:5078   .bss.xYieldPending:0000000000000000 $d
     /tmp/ccNFblrO.s:5082   .bss.xYieldPending:0000000000000000 xYieldPending
                     .debug_frame:0000000000000010 $d
     /tmp/ccNFblrO.s:4258   .text.xTaskGenericNotify:0000000000000041 $d
     /tmp/ccNFblrO.s:4258   .text.xTaskGenericNotify:0000000000000042 $t
     /tmp/ccNFblrO.s:4514   .text.xTaskGenericNotifyFromISR:0000000000000061 $d
     /tmp/ccNFblrO.s:4514   .text.xTaskGenericNotifyFromISR:0000000000000062 $t

UNDEFINED SYMBOLS
vPortFree
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
xPortStartScheduler
vPortEndScheduler
