ARM GAS  /tmp/ccz3PNNG.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"tasks.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	prvTaskIsTaskSuspended:
  23              	.LFB14:
  24              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.1.0
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
ARM GAS  /tmp/ccz3PNNG.s 			page 2


  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
ARM GAS  /tmp/ccz3PNNG.s 			page 3


  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
ARM GAS  /tmp/ccz3PNNG.s 			page 4


 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
ARM GAS  /tmp/ccz3PNNG.s 			page 5


 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
ARM GAS  /tmp/ccz3PNNG.s 			page 6


 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct TaskControlBlock_t
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
ARM GAS  /tmp/ccz3PNNG.s 			page 7


 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
ARM GAS  /tmp/ccz3PNNG.s 			page 8


 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccz3PNNG.s 			page 9


 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccz3PNNG.s 			page 10


 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
ARM GAS  /tmp/ccz3PNNG.s 			page 11


 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
ARM GAS  /tmp/ccz3PNNG.s 			page 12


 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccz3PNNG.s 			page 13


 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
ARM GAS  /tmp/ccz3PNNG.s 			page 14


 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
ARM GAS  /tmp/ccz3PNNG.s 			page 15


 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  /tmp/ccz3PNNG.s 			page 16


 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pcName );
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
ARM GAS  /tmp/ccz3PNNG.s 			page 17


 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == ( char ) 0x00 )
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccz3PNNG.s 			page 18


 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
ARM GAS  /tmp/ccz3PNNG.s 			page 19


1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
ARM GAS  /tmp/ccz3PNNG.s 			page 20


1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /tmp/ccz3PNNG.s 			page 21


1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
ARM GAS  /tmp/ccz3PNNG.s 			page 22


1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
ARM GAS  /tmp/ccz3PNNG.s 			page 23


1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccz3PNNG.s 			page 24


1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccz3PNNG.s 			page 25


1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
ARM GAS  /tmp/ccz3PNNG.s 			page 26


1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
ARM GAS  /tmp/ccz3PNNG.s 			page 27


1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
ARM GAS  /tmp/ccz3PNNG.s 			page 28


1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccz3PNNG.s 			page 29


1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccz3PNNG.s 			page 30


1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
ARM GAS  /tmp/ccz3PNNG.s 			page 31


1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  /tmp/ccz3PNNG.s 			page 32


1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  25              		.loc 1 1756 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  31              		.loc 1 1764 0
  32 0000 28B1     		cbz	r0, .L8
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  33              		.loc 1 1767 0
  34 0002 4169     		ldr	r1, [r0, #20]
  35 0004 0C4A     		ldr	r2, .L10
  36 0006 9142     		cmp	r1, r2
  37 0008 0AD0     		beq	.L9
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
  38              		.loc 1 1757 0
  39 000a 0020     		movs	r0, #0
  40              	.LVL1:
  41 000c 7047     		bx	lr
  42              	.LVL2:
  43              	.L8:
  44              	.LBB100:
  45              	.LBB101:
  46              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.1.0
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
ARM GAS  /tmp/ccz3PNNG.s 			page 33


  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
ARM GAS  /tmp/ccz3PNNG.s 			page 34


  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
ARM GAS  /tmp/ccz3PNNG.s 			page 35


 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
ARM GAS  /tmp/ccz3PNNG.s 			page 36


 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
  47              		.loc 2 195 0
  48              		.syntax unified
  49              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
  50 000e 4FF05003 			mov r3, #80												
  51 0012 83F31188 		msr basepri, r3											
  52 0016 BFF36F8F 		isb														
  53 001a BFF34F8F 		dsb														
  54              	
  55              	@ 0 "" 2
  56              	.LVL3:
  57              		.thumb
  58              		.syntax unified
  59              	.L3:
  60 001e FEE7     		b	.L3
  61              	.L9:
  62              	.LBE101:
  63              	.LBE100:
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  64              		.loc 1 1770 0
  65 0020 836A     		ldr	r3, [r0, #40]
  66 0022 064A     		ldr	r2, .L10+4
  67 0024 9342     		cmp	r3, r2
  68 0026 02D0     		beq	.L6
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  69              		.loc 1 1774 0
  70 0028 1BB1     		cbz	r3, .L7
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  71              		.loc 1 1757 0
  72 002a 0020     		movs	r0, #0
  73              	.LVL4:
  74 002c 7047     		bx	lr
  75              	.LVL5:
  76              	.L6:
  77 002e 0020     		movs	r0, #0
  78              	.LVL6:
  79 0030 7047     		bx	lr
  80              	.LVL7:
  81              	.L7:
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccz3PNNG.s 			page 37


1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  82              		.loc 1 1776 0
  83 0032 0120     		movs	r0, #1
  84              	.LVL8:
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  85              		.loc 1 1794 0
  86 0034 7047     		bx	lr
  87              	.L11:
  88 0036 00BF     		.align	2
  89              	.L10:
  90 0038 00000000 		.word	.LANCHOR0
  91 003c 00000000 		.word	.LANCHOR1
  92              		.cfi_endproc
  93              	.LFE14:
  95              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
  96              		.align	1
  97              		.syntax unified
  98              		.thumb
  99              		.thumb_func
 100              		.fpu softvfp
 102              	prvResetNextTaskUnblockTime:
 103              	.LFB39:
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
ARM GAS  /tmp/ccz3PNNG.s 			page 38


1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
ARM GAS  /tmp/ccz3PNNG.s 			page 39


1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  /tmp/ccz3PNNG.s 			page 40


1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
ARM GAS  /tmp/ccz3PNNG.s 			page 41


1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccz3PNNG.s 			page 42


2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
ARM GAS  /tmp/ccz3PNNG.s 			page 43


2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
ARM GAS  /tmp/ccz3PNNG.s 			page 44


2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccz3PNNG.s 			page 45


2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
ARM GAS  /tmp/ccz3PNNG.s 			page 46


2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccz3PNNG.s 			page 47


2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
ARM GAS  /tmp/ccz3PNNG.s 			page 48


2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccz3PNNG.s 			page 49


2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
ARM GAS  /tmp/ccz3PNNG.s 			page 50


2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
ARM GAS  /tmp/ccz3PNNG.s 			page 51


2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccz3PNNG.s 			page 52


2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
ARM GAS  /tmp/ccz3PNNG.s 			page 53


2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
ARM GAS  /tmp/ccz3PNNG.s 			page 54


2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
ARM GAS  /tmp/ccz3PNNG.s 			page 55


2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccz3PNNG.s 			page 56


2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccz3PNNG.s 			page 57


2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/count
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution t
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccz3PNNG.s 			page 58


2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
ARM GAS  /tmp/ccz3PNNG.s 			page 59


3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
ARM GAS  /tmp/ccz3PNNG.s 			page 60


3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
ARM GAS  /tmp/ccz3PNNG.s 			page 61


3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
ARM GAS  /tmp/ccz3PNNG.s 			page 62


3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
ARM GAS  /tmp/ccz3PNNG.s 			page 63


3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccz3PNNG.s 			page 64


3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
ARM GAS  /tmp/ccz3PNNG.s 			page 65


3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
ARM GAS  /tmp/ccz3PNNG.s 			page 66


3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccz3PNNG.s 			page 67


3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;	/*< Delayed tasks. */
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;	/*< Delayed tasks (two lists are used - one for de
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
ARM GAS  /tmp/ccz3PNNG.s 			page 68


3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccz3PNNG.s 			page 69


3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
ARM GAS  /tmp/ccz3PNNG.s 			page 70


3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccz3PNNG.s 			page 71


3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
ARM GAS  /tmp/ccz3PNNG.s 			page 72


3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 104              		.loc 1 3785 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              		@ link register save eliminated.
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 109              		.loc 1 3788 0
 110 0000 084B     		ldr	r3, .L16
 111 0002 1B68     		ldr	r3, [r3]
 112 0004 1B68     		ldr	r3, [r3]
 113 0006 3BB1     		cbz	r3, .L15
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccz3PNNG.s 			page 73


3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
 114              		.loc 1 3802 0
 115 0008 064B     		ldr	r3, .L16
 116 000a 1B68     		ldr	r3, [r3]
 117 000c DB68     		ldr	r3, [r3, #12]
 118 000e DB68     		ldr	r3, [r3, #12]
 119              	.LVL9:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 120              		.loc 1 3803 0
 121 0010 5A68     		ldr	r2, [r3, #4]
 122 0012 054B     		ldr	r3, .L16+4
 123              	.LVL10:
 124 0014 1A60     		str	r2, [r3]
 125 0016 7047     		bx	lr
 126              	.L15:
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 127              		.loc 1 3794 0
 128 0018 4FF0FF32 		mov	r2, #-1
 129 001c 024B     		ldr	r3, .L16+4
 130 001e 1A60     		str	r2, [r3]
 131 0020 7047     		bx	lr
 132              	.L17:
 133 0022 00BF     		.align	2
 134              	.L16:
 135 0024 00000000 		.word	.LANCHOR2
 136 0028 00000000 		.word	.LANCHOR3
 137              		.cfi_endproc
 138              	.LFE39:
 140              		.section	.text.prvDeleteTCB,"ax",%progbits
 141              		.align	1
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 145              		.fpu softvfp
 147              	prvDeleteTCB:
 148              	.LFB38:
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 149              		.loc 1 3731 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              	.LVL11:
 154 0000 10B5     		push	{r4, lr}
 155              	.LCFI0:
 156              		.cfi_def_cfa_offset 8
 157              		.cfi_offset 4, -8
 158              		.cfi_offset 14, -4
 159 0002 0446     		mov	r4, r0
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 160              		.loc 1 3749 0
 161 0004 006B     		ldr	r0, [r0, #48]
 162              	.LVL12:
 163 0006 FFF7FEFF 		bl	vPortFree
ARM GAS  /tmp/ccz3PNNG.s 			page 74


 164              	.LVL13:
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 165              		.loc 1 3750 0
 166 000a 2046     		mov	r0, r4
 167 000c FFF7FEFF 		bl	vPortFree
 168              	.LVL14:
 169 0010 10BD     		pop	{r4, pc}
 170              		.cfi_endproc
 171              	.LFE38:
 173              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 174              		.align	1
 175              		.syntax unified
 176              		.thumb
 177              		.thumb_func
 178              		.fpu softvfp
 180              	prvInitialiseNewTask:
 181              	.LFB6:
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 182              		.loc 1 832 0
 183              		.cfi_startproc
 184              		@ args = 16, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186              	.LVL15:
 187 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 188              	.LCFI1:
 189              		.cfi_def_cfa_offset 32
 190              		.cfi_offset 4, -32
 191              		.cfi_offset 5, -28
 192              		.cfi_offset 6, -24
 193              		.cfi_offset 7, -20
 194              		.cfi_offset 8, -16
 195              		.cfi_offset 9, -12
 196              		.cfi_offset 10, -8
 197              		.cfi_offset 14, -4
 198 0004 089E     		ldr	r6, [sp, #32]
 199 0006 DDF82480 		ldr	r8, [sp, #36]
 200 000a 0A9C     		ldr	r4, [sp, #40]
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 201              		.loc 1 850 0
 202 000c A1B1     		cbz	r1, .L30
 203 000e 0D46     		mov	r5, r1
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 204              		.loc 1 866 0
 205 0010 216B     		ldr	r1, [r4, #48]
 206              	.LVL16:
 207 0012 02F18042 		add	r2, r2, #1073741824
 208              	.LVL17:
 209 0016 013A     		subs	r2, r2, #1
 210              	.LVL18:
 211 0018 01EB8202 		add	r2, r1, r2, lsl #2
 212              	.LVL19:
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 213              		.loc 1 867 0
 214 001c 22F00707 		bic	r7, r2, #7
 215              	.LVL20:
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 216              		.loc 1 894 0
ARM GAS  /tmp/ccz3PNNG.s 			page 75


 217 0020 0022     		movs	r2, #0
 218              	.LVL21:
 219              	.L23:
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 220              		.loc 1 894 0 is_stmt 0 discriminator 1
 221 0022 0F2A     		cmp	r2, #15
 222 0024 11D8     		bhi	.L24
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 223              		.loc 1 896 0 is_stmt 1
 224 0026 15F802E0 		ldrb	lr, [r5, r2]	@ zero_extendqisi2
 225 002a A118     		adds	r1, r4, r2
 226 002c 81F834E0 		strb	lr, [r1, #52]
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 227              		.loc 1 901 0
 228 0030 A95C     		ldrb	r1, [r5, r2]	@ zero_extendqisi2
 229 0032 51B1     		cbz	r1, .L24
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 230              		.loc 1 894 0 discriminator 2
 231 0034 0132     		adds	r2, r2, #1
 232              	.LVL22:
 233 0036 F4E7     		b	.L23
 234              	.LVL23:
 235              	.L30:
 236              	.LBB102:
 237              	.LBB103:
 238              		.loc 2 195 0
 239              		.syntax unified
 240              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 241 0038 4FF05003 			mov r3, #80												
 242 003c 83F31188 		msr basepri, r3											
 243 0040 BFF36F8F 		isb														
 244 0044 BFF34F8F 		dsb														
 245              	
 246              	@ 0 "" 2
 247              	.LVL24:
 248              		.thumb
 249              		.syntax unified
 250              	.L22:
 251 0048 FEE7     		b	.L22
 252              	.LVL25:
 253              	.L24:
 254              	.LBE103:
 255              	.LBE102:
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256              		.loc 1 913 0
 257 004a 0022     		movs	r2, #0
 258              	.LVL26:
 259 004c 84F84320 		strb	r2, [r4, #67]
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 260              		.loc 1 917 0
 261 0050 062E     		cmp	r6, #6
 262 0052 00D9     		bls	.L26
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 263              		.loc 1 919 0
 264 0054 0626     		movs	r6, #6
 265              	.L26:
 266 0056 9946     		mov	r9, r3
ARM GAS  /tmp/ccz3PNNG.s 			page 76


 267 0058 8246     		mov	r10, r0
 268              	.LVL27:
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 269              		.loc 1 926 0
 270 005a E662     		str	r6, [r4, #44]
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 271              		.loc 1 929 0
 272 005c 6664     		str	r6, [r4, #68]
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 273              		.loc 1 930 0
 274 005e 0025     		movs	r5, #0
 275              	.LVL28:
 276 0060 A564     		str	r5, [r4, #72]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 277              		.loc 1 934 0
 278 0062 201D     		adds	r0, r4, #4
 279              	.LVL29:
 280 0064 FFF7FEFF 		bl	vListInitialiseItem
 281              	.LVL30:
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 282              		.loc 1 935 0
 283 0068 04F11800 		add	r0, r4, #24
 284 006c FFF7FEFF 		bl	vListInitialiseItem
 285              	.LVL31:
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 286              		.loc 1 939 0
 287 0070 2461     		str	r4, [r4, #16]
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 288              		.loc 1 942 0
 289 0072 C6F10706 		rsb	r6, r6, #7
 290              	.LVL32:
 291 0076 A661     		str	r6, [r4, #24]
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292              		.loc 1 943 0
 293 0078 6462     		str	r4, [r4, #36]
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 294              		.loc 1 985 0
 295 007a E564     		str	r5, [r4, #76]
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 296              		.loc 1 986 0
 297 007c 84F85050 		strb	r5, [r4, #80]
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 298              		.loc 1 1013 0
 299 0080 4A46     		mov	r2, r9
 300 0082 5146     		mov	r1, r10
 301 0084 3846     		mov	r0, r7
 302 0086 FFF7FEFF 		bl	pxPortInitialiseStack
 303              	.LVL33:
 304 008a 2060     		str	r0, [r4]
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 305              		.loc 1 1017 0
 306 008c B8F1000F 		cmp	r8, #0
 307 0090 01D0     		beq	.L20
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 308              		.loc 1 1021 0
 309 0092 C8F80040 		str	r4, [r8]
 310              	.L20:
ARM GAS  /tmp/ccz3PNNG.s 			page 77


 311 0096 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 312              		.cfi_endproc
 313              	.LFE6:
 315              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 316              		.align	1
 317              		.syntax unified
 318              		.thumb
 319              		.thumb_func
 320              		.fpu softvfp
 322              	prvInitialiseTaskLists:
 323              	.LFB36:
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 324              		.loc 1 3489 0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 0
 327              		@ frame_needed = 0, uses_anonymous_args = 0
 328 0000 38B5     		push	{r3, r4, r5, lr}
 329              	.LCFI2:
 330              		.cfi_def_cfa_offset 16
 331              		.cfi_offset 3, -16
 332              		.cfi_offset 4, -12
 333              		.cfi_offset 5, -8
 334              		.cfi_offset 14, -4
 335              	.LVL34:
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 336              		.loc 1 3494 0
 337 0002 0024     		movs	r4, #0
 338 0004 07E0     		b	.L32
 339              	.LVL35:
 340              	.L33:
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 341              		.loc 1 3496 0 discriminator 3
 342 0006 04EB8402 		add	r2, r4, r4, lsl #2
 343 000a 9300     		lsls	r3, r2, #2
 344 000c 0E48     		ldr	r0, .L35
 345 000e 1844     		add	r0, r0, r3
 346 0010 FFF7FEFF 		bl	vListInitialise
 347              	.LVL36:
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 348              		.loc 1 3494 0 discriminator 3
 349 0014 0134     		adds	r4, r4, #1
 350              	.LVL37:
 351              	.L32:
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 352              		.loc 1 3494 0 is_stmt 0 discriminator 1
 353 0016 062C     		cmp	r4, #6
 354 0018 F5D9     		bls	.L33
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 355              		.loc 1 3499 0 is_stmt 1
 356 001a 0C4D     		ldr	r5, .L35+4
 357 001c 2846     		mov	r0, r5
 358 001e FFF7FEFF 		bl	vListInitialise
 359              	.LVL38:
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 360              		.loc 1 3500 0
 361 0022 0B4C     		ldr	r4, .L35+8
 362              	.LVL39:
ARM GAS  /tmp/ccz3PNNG.s 			page 78


 363 0024 2046     		mov	r0, r4
 364 0026 FFF7FEFF 		bl	vListInitialise
 365              	.LVL40:
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 366              		.loc 1 3501 0
 367 002a 0A48     		ldr	r0, .L35+12
 368 002c FFF7FEFF 		bl	vListInitialise
 369              	.LVL41:
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 370              		.loc 1 3505 0
 371 0030 0948     		ldr	r0, .L35+16
 372 0032 FFF7FEFF 		bl	vListInitialise
 373              	.LVL42:
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 374              		.loc 1 3511 0
 375 0036 0948     		ldr	r0, .L35+20
 376 0038 FFF7FEFF 		bl	vListInitialise
 377              	.LVL43:
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 378              		.loc 1 3517 0
 379 003c 084B     		ldr	r3, .L35+24
 380 003e 1D60     		str	r5, [r3]
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 381              		.loc 1 3518 0
 382 0040 084B     		ldr	r3, .L35+28
 383 0042 1C60     		str	r4, [r3]
 384 0044 38BD     		pop	{r3, r4, r5, pc}
 385              	.L36:
 386 0046 00BF     		.align	2
 387              	.L35:
 388 0048 00000000 		.word	.LANCHOR4
 389 004c 00000000 		.word	.LANCHOR5
 390 0050 00000000 		.word	.LANCHOR6
 391 0054 00000000 		.word	.LANCHOR1
 392 0058 00000000 		.word	.LANCHOR7
 393 005c 00000000 		.word	.LANCHOR0
 394 0060 00000000 		.word	.LANCHOR2
 395 0064 00000000 		.word	.LANCHOR8
 396              		.cfi_endproc
 397              	.LFE36:
 399              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 400              		.align	1
 401              		.syntax unified
 402              		.thumb
 403              		.thumb_func
 404              		.fpu softvfp
 406              	prvAddNewTaskToReadyList:
 407              	.LFB7:
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 408              		.loc 1 1031 0
 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 0
 411              		@ frame_needed = 0, uses_anonymous_args = 0
 412              	.LVL44:
 413 0000 10B5     		push	{r4, lr}
 414              	.LCFI3:
 415              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccz3PNNG.s 			page 79


 416              		.cfi_offset 4, -8
 417              		.cfi_offset 14, -4
 418 0002 0446     		mov	r4, r0
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 419              		.loc 1 1034 0
 420 0004 FFF7FEFF 		bl	vPortEnterCritical
 421              	.LVL45:
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 422              		.loc 1 1036 0
 423 0008 204A     		ldr	r2, .L43
 424 000a 1368     		ldr	r3, [r2]
 425 000c 0133     		adds	r3, r3, #1
 426 000e 1360     		str	r3, [r2]
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 427              		.loc 1 1037 0
 428 0010 1F4B     		ldr	r3, .L43+4
 429 0012 1B68     		ldr	r3, [r3]
 430 0014 002B     		cmp	r3, #0
 431 0016 31D0     		beq	.L42
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 432              		.loc 1 1060 0
 433 0018 1E4B     		ldr	r3, .L43+8
 434 001a 1B68     		ldr	r3, [r3]
 435 001c 3BB9     		cbnz	r3, .L39
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 436              		.loc 1 1062 0
 437 001e 1C4B     		ldr	r3, .L43+4
 438 0020 1B68     		ldr	r3, [r3]
 439 0022 DA6A     		ldr	r2, [r3, #44]
 440 0024 E36A     		ldr	r3, [r4, #44]
 441 0026 9A42     		cmp	r2, r3
 442 0028 01D8     		bhi	.L39
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 443              		.loc 1 1064 0
 444 002a 194B     		ldr	r3, .L43+4
 445 002c 1C60     		str	r4, [r3]
 446              	.L39:
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 447              		.loc 1 1077 0
 448 002e 1A4A     		ldr	r2, .L43+12
 449 0030 1368     		ldr	r3, [r2]
 450 0032 0133     		adds	r3, r3, #1
 451 0034 1360     		str	r3, [r2]
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452              		.loc 1 1087 0
 453 0036 E36A     		ldr	r3, [r4, #44]
 454 0038 0122     		movs	r2, #1
 455 003a 9A40     		lsls	r2, r2, r3
 456 003c 1749     		ldr	r1, .L43+16
 457 003e 0868     		ldr	r0, [r1]
 458 0040 0243     		orrs	r2, r2, r0
 459 0042 0A60     		str	r2, [r1]
 460 0044 03EB8303 		add	r3, r3, r3, lsl #2
 461 0048 9A00     		lsls	r2, r3, #2
 462 004a 211D     		adds	r1, r4, #4
 463 004c 1448     		ldr	r0, .L43+20
 464 004e 1044     		add	r0, r0, r2
ARM GAS  /tmp/ccz3PNNG.s 			page 80


 465 0050 FFF7FEFF 		bl	vListInsertEnd
 466              	.LVL46:
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 467              		.loc 1 1091 0
 468 0054 FFF7FEFF 		bl	vPortExitCritical
 469              	.LVL47:
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 470              		.loc 1 1093 0
 471 0058 0E4B     		ldr	r3, .L43+8
 472 005a 1B68     		ldr	r3, [r3]
 473 005c 6BB1     		cbz	r3, .L37
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 474              		.loc 1 1097 0
 475 005e 0C4B     		ldr	r3, .L43+4
 476 0060 1B68     		ldr	r3, [r3]
 477 0062 DA6A     		ldr	r2, [r3, #44]
 478 0064 E36A     		ldr	r3, [r4, #44]
 479 0066 9A42     		cmp	r2, r3
 480 0068 07D2     		bcs	.L37
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 481              		.loc 1 1099 0
 482 006a 4FF08052 		mov	r2, #268435456
 483 006e 0D4B     		ldr	r3, .L43+24
 484 0070 1A60     		str	r2, [r3]
 485              		.syntax unified
 486              	@ 1099 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 487 0072 BFF34F8F 		dsb
 488              	@ 0 "" 2
 489              	@ 1099 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 490 0076 BFF36F8F 		isb
 491              	@ 0 "" 2
 492              		.thumb
 493              		.syntax unified
 494              	.L37:
 495 007a 10BD     		pop	{r4, pc}
 496              	.LVL48:
 497              	.L42:
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 498              		.loc 1 1041 0
 499 007c 044B     		ldr	r3, .L43+4
 500 007e 1C60     		str	r4, [r3]
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 501              		.loc 1 1043 0
 502 0080 1368     		ldr	r3, [r2]
 503 0082 012B     		cmp	r3, #1
 504 0084 D3D1     		bne	.L39
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 505              		.loc 1 1048 0
 506 0086 FFF7FEFF 		bl	prvInitialiseTaskLists
 507              	.LVL49:
 508 008a D0E7     		b	.L39
 509              	.L44:
 510              		.align	2
 511              	.L43:
 512 008c 00000000 		.word	.LANCHOR9
 513 0090 00000000 		.word	.LANCHOR10
 514 0094 00000000 		.word	.LANCHOR11
ARM GAS  /tmp/ccz3PNNG.s 			page 81


 515 0098 00000000 		.word	.LANCHOR12
 516 009c 00000000 		.word	.LANCHOR13
 517 00a0 00000000 		.word	.LANCHOR4
 518 00a4 04ED00E0 		.word	-536810236
 519              		.cfi_endproc
 520              	.LFE7:
 522              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 523              		.align	1
 524              		.syntax unified
 525              		.thumb
 526              		.thumb_func
 527              		.fpu softvfp
 529              	prvCheckTasksWaitingTermination:
 530              	.LFB37:
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531              		.loc 1 3523 0
 532              		.cfi_startproc
 533              		@ args = 0, pretend = 0, frame = 0
 534              		@ frame_needed = 0, uses_anonymous_args = 0
 535              	.LBB104:
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 536              		.loc 1 3533 0
 537 0000 0F4B     		ldr	r3, .L52
 538 0002 1B68     		ldr	r3, [r3]
 539 0004 D3B1     		cbz	r3, .L51
 540              	.LBE104:
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 541              		.loc 1 3523 0
 542 0006 10B5     		push	{r4, lr}
 543              	.LCFI4:
 544              		.cfi_def_cfa_offset 8
 545              		.cfi_offset 4, -8
 546              		.cfi_offset 14, -4
 547              	.L47:
 548              	.LBB105:
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 549              		.loc 1 3535 0
 550 0008 FFF7FEFF 		bl	vPortEnterCritical
 551              	.LVL50:
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 552              		.loc 1 3537 0
 553 000c 0D4B     		ldr	r3, .L52+4
 554 000e DB68     		ldr	r3, [r3, #12]
 555 0010 DC68     		ldr	r4, [r3, #12]
 556              	.LVL51:
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 557              		.loc 1 3538 0
 558 0012 201D     		adds	r0, r4, #4
 559 0014 FFF7FEFF 		bl	uxListRemove
 560              	.LVL52:
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 561              		.loc 1 3539 0
 562 0018 0B4A     		ldr	r2, .L52+8
 563 001a 1368     		ldr	r3, [r2]
 564 001c 013B     		subs	r3, r3, #1
 565 001e 1360     		str	r3, [r2]
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccz3PNNG.s 			page 82


 566              		.loc 1 3540 0
 567 0020 074A     		ldr	r2, .L52
 568 0022 1368     		ldr	r3, [r2]
 569 0024 013B     		subs	r3, r3, #1
 570 0026 1360     		str	r3, [r2]
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 571              		.loc 1 3542 0
 572 0028 FFF7FEFF 		bl	vPortExitCritical
 573              	.LVL53:
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 574              		.loc 1 3544 0
 575 002c 2046     		mov	r0, r4
 576 002e FFF7FEFF 		bl	prvDeleteTCB
 577              	.LVL54:
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 578              		.loc 1 3533 0
 579 0032 034B     		ldr	r3, .L52
 580 0034 1B68     		ldr	r3, [r3]
 581 0036 002B     		cmp	r3, #0
 582 0038 E6D1     		bne	.L47
 583              	.LBE105:
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 584              		.loc 1 3548 0
 585 003a 10BD     		pop	{r4, pc}
 586              	.LVL55:
 587              	.L51:
 588              	.LCFI5:
 589              		.cfi_def_cfa_offset 0
 590              		.cfi_restore 4
 591              		.cfi_restore 14
 592 003c 7047     		bx	lr
 593              	.L53:
 594 003e 00BF     		.align	2
 595              	.L52:
 596 0040 00000000 		.word	.LANCHOR14
 597 0044 00000000 		.word	.LANCHOR7
 598 0048 00000000 		.word	.LANCHOR9
 599              		.cfi_endproc
 600              	.LFE37:
 602              		.section	.text.prvIdleTask,"ax",%progbits
 603              		.align	1
 604              		.syntax unified
 605              		.thumb
 606              		.thumb_func
 607              		.fpu softvfp
 609              	prvIdleTask:
 610              	.LFB35:
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 611              		.loc 1 3277 0
 612              		.cfi_startproc
 613              		@ Volatile: function does not return.
 614              		@ args = 0, pretend = 0, frame = 0
 615              		@ frame_needed = 0, uses_anonymous_args = 0
 616              	.LVL56:
 617 0000 08B5     		push	{r3, lr}
 618              	.LCFI6:
 619              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccz3PNNG.s 			page 83


 620              		.cfi_offset 3, -8
 621              		.cfi_offset 14, -4
 622              	.LVL57:
 623              	.L55:
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 624              		.loc 1 3293 0
 625 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 626              	.LVL58:
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 627              		.loc 1 3316 0
 628 0006 064B     		ldr	r3, .L58
 629 0008 1B68     		ldr	r3, [r3]
 630 000a 012B     		cmp	r3, #1
 631 000c F9D9     		bls	.L55
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 632              		.loc 1 3318 0
 633 000e 4FF08052 		mov	r2, #268435456
 634 0012 044B     		ldr	r3, .L58+4
 635 0014 1A60     		str	r2, [r3]
 636              		.syntax unified
 637              	@ 3318 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 638 0016 BFF34F8F 		dsb
 639              	@ 0 "" 2
 640              	@ 3318 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 641 001a BFF36F8F 		isb
 642              	@ 0 "" 2
 643              		.thumb
 644              		.syntax unified
 645 001e F0E7     		b	.L55
 646              	.L59:
 647              		.align	2
 648              	.L58:
 649 0020 00000000 		.word	.LANCHOR4
 650 0024 04ED00E0 		.word	-536810236
 651              		.cfi_endproc
 652              	.LFE35:
 654              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 655              		.align	1
 656              		.syntax unified
 657              		.thumb
 658              		.thumb_func
 659              		.fpu softvfp
 661              	prvAddCurrentTaskToDelayedList:
 662              	.LFB53:
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
ARM GAS  /tmp/ccz3PNNG.s 			page 84


3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
ARM GAS  /tmp/ccz3PNNG.s 			page 85


3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccz3PNNG.s 			page 86


3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  /tmp/ccz3PNNG.s 			page 87


3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
ARM GAS  /tmp/ccz3PNNG.s 			page 88


4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccz3PNNG.s 			page 89


4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
ARM GAS  /tmp/ccz3PNNG.s 			page 90


4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
ARM GAS  /tmp/ccz3PNNG.s 			page 91


4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
ARM GAS  /tmp/ccz3PNNG.s 			page 92


4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
ARM GAS  /tmp/ccz3PNNG.s 			page 93


4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/ccz3PNNG.s 			page 94


4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
ARM GAS  /tmp/ccz3PNNG.s 			page 95


4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccz3PNNG.s 			page 96


4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
ARM GAS  /tmp/ccz3PNNG.s 			page 97


4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccz3PNNG.s 			page 98


4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
ARM GAS  /tmp/ccz3PNNG.s 			page 99


4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccz3PNNG.s 			page 100


4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
ARM GAS  /tmp/ccz3PNNG.s 			page 101


4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
ARM GAS  /tmp/ccz3PNNG.s 			page 102


4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccz3PNNG.s 			page 103


4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccz3PNNG.s 			page 104


4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 663              		.loc 1 4979 0
 664              		.cfi_startproc
 665              		@ args = 0, pretend = 0, frame = 0
 666              		@ frame_needed = 0, uses_anonymous_args = 0
 667              	.LVL59:
 668 0000 70B5     		push	{r4, r5, r6, lr}
 669              	.LCFI7:
 670              		.cfi_def_cfa_offset 16
 671              		.cfi_offset 4, -16
 672              		.cfi_offset 5, -12
 673              		.cfi_offset 6, -8
 674              		.cfi_offset 14, -4
 675 0002 0446     		mov	r4, r0
 676 0004 0E46     		mov	r6, r1
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 677              		.loc 1 4981 0
 678 0006 1D4B     		ldr	r3, .L68
 679 0008 1D68     		ldr	r5, [r3]
 680              	.LVL60:
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 681              		.loc 1 4994 0
ARM GAS  /tmp/ccz3PNNG.s 			page 105


 682 000a 1D4B     		ldr	r3, .L68+4
 683 000c 1868     		ldr	r0, [r3]
 684              	.LVL61:
 685 000e 0430     		adds	r0, r0, #4
 686 0010 FFF7FEFF 		bl	uxListRemove
 687              	.LVL62:
 688 0014 50B9     		cbnz	r0, .L61
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
 689              		.loc 1 4998 0
 690 0016 1A4B     		ldr	r3, .L68+4
 691 0018 1B68     		ldr	r3, [r3]
 692 001a DA6A     		ldr	r2, [r3, #44]
 693 001c 0123     		movs	r3, #1
 694 001e 03FA02F2 		lsl	r2, r3, r2
 695 0022 1849     		ldr	r1, .L68+8
 696 0024 0B68     		ldr	r3, [r1]
 697 0026 23EA0203 		bic	r3, r3, r2
 698 002a 0B60     		str	r3, [r1]
 699              	.L61:
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 700              		.loc 1 5007 0
 701 002c B4F1FF3F 		cmp	r4, #-1
 702 0030 13D0     		beq	.L66
 703              	.L62:
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 704              		.loc 1 5019 0
 705 0032 2C44     		add	r4, r4, r5
 706              	.LVL63:
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 707              		.loc 1 5022 0
 708 0034 124B     		ldr	r3, .L68+4
 709 0036 1B68     		ldr	r3, [r3]
 710 0038 5C60     		str	r4, [r3, #4]
ARM GAS  /tmp/ccz3PNNG.s 			page 106


5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 711              		.loc 1 5024 0
 712 003a A542     		cmp	r5, r4
 713 003c 16D8     		bhi	.L67
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 714              		.loc 1 5034 0
 715 003e 124B     		ldr	r3, .L68+12
 716 0040 1868     		ldr	r0, [r3]
 717 0042 0F4B     		ldr	r3, .L68+4
 718 0044 1968     		ldr	r1, [r3]
 719 0046 0431     		adds	r1, r1, #4
 720 0048 FFF7FEFF 		bl	vListInsert
 721              	.LVL64:
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 722              		.loc 1 5039 0
 723 004c 0F4B     		ldr	r3, .L68+16
 724 004e 1B68     		ldr	r3, [r3]
 725 0050 9C42     		cmp	r4, r3
 726 0052 01D2     		bcs	.L60
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 727              		.loc 1 5041 0
 728 0054 0D4B     		ldr	r3, .L68+16
 729 0056 1C60     		str	r4, [r3]
 730              	.L60:
 731 0058 70BD     		pop	{r4, r5, r6, pc}
 732              	.LVL65:
 733              	.L66:
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 734              		.loc 1 5007 0 discriminator 1
 735 005a 002E     		cmp	r6, #0
 736 005c E9D0     		beq	.L62
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 737              		.loc 1 5012 0
 738 005e 084B     		ldr	r3, .L68+4
 739 0060 1968     		ldr	r1, [r3]
 740 0062 0431     		adds	r1, r1, #4
 741 0064 0A48     		ldr	r0, .L68+20
 742 0066 FFF7FEFF 		bl	vListInsertEnd
 743              	.LVL66:
 744 006a 70BD     		pop	{r4, r5, r6, pc}
 745              	.LVL67:
 746              	.L67:
ARM GAS  /tmp/ccz3PNNG.s 			page 107


5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 747              		.loc 1 5028 0
 748 006c 094B     		ldr	r3, .L68+24
 749 006e 1868     		ldr	r0, [r3]
 750 0070 034B     		ldr	r3, .L68+4
 751 0072 1968     		ldr	r1, [r3]
 752 0074 0431     		adds	r1, r1, #4
 753 0076 FFF7FEFF 		bl	vListInsert
 754              	.LVL68:
 755 007a 70BD     		pop	{r4, r5, r6, pc}
 756              	.LVL69:
 757              	.L69:
 758              		.align	2
 759              	.L68:
 760 007c 00000000 		.word	.LANCHOR15
 761 0080 00000000 		.word	.LANCHOR10
 762 0084 00000000 		.word	.LANCHOR13
 763 0088 00000000 		.word	.LANCHOR2
 764 008c 00000000 		.word	.LANCHOR3
 765 0090 00000000 		.word	.LANCHOR0
 766 0094 00000000 		.word	.LANCHOR8
 767              		.cfi_endproc
 768              	.LFE53:
 770              		.section	.text.xTaskCreate,"ax",%progbits
 771              		.align	1
 772              		.global	xTaskCreate
 773              		.syntax unified
 774              		.thumb
 775              		.thumb_func
 776              		.fpu softvfp
 778              	xTaskCreate:
 779              	.LFB5:
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 780              		.loc 1 739 0
 781              		.cfi_startproc
 782              		@ args = 8, pretend = 0, frame = 0
 783              		@ frame_needed = 0, uses_anonymous_args = 0
 784              	.LVL70:
 785 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 786              	.LCFI8:
 787              		.cfi_def_cfa_offset 28
 788              		.cfi_offset 4, -28
 789              		.cfi_offset 5, -24
 790              		.cfi_offset 6, -20
 791              		.cfi_offset 7, -16
 792              		.cfi_offset 8, -12
 793              		.cfi_offset 9, -8
 794              		.cfi_offset 14, -4
 795 0004 85B0     		sub	sp, sp, #20
 796              	.LCFI9:
 797              		.cfi_def_cfa_offset 48
 798 0006 0646     		mov	r6, r0
 799 0008 0F46     		mov	r7, r1
 800 000a 1546     		mov	r5, r2
 801 000c 9846     		mov	r8, r3
 802              	.LBB106:
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccz3PNNG.s 			page 108


 803              		.loc 1 773 0
 804 000e 9000     		lsls	r0, r2, #2
 805              	.LVL71:
 806 0010 FFF7FEFF 		bl	pvPortMalloc
 807              	.LVL72:
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 808              		.loc 1 775 0
 809 0014 00B3     		cbz	r0, .L74
 810 0016 8146     		mov	r9, r0
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 811              		.loc 1 778 0
 812 0018 5420     		movs	r0, #84
 813              	.LVL73:
 814 001a FFF7FEFF 		bl	pvPortMalloc
 815              	.LVL74:
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 816              		.loc 1 780 0
 817 001e 0446     		mov	r4, r0
 818 0020 B0B1     		cbz	r0, .L72
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 819              		.loc 1 783 0
 820 0022 C0F83090 		str	r9, [r0, #48]
 821              	.LVL75:
 822              	.L71:
 823              	.LBE106:
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 824              		.loc 1 799 0
 825 0026 CCB1     		cbz	r4, .L75
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 826              		.loc 1 809 0
 827 0028 0023     		movs	r3, #0
 828 002a 0393     		str	r3, [sp, #12]
 829 002c 0294     		str	r4, [sp, #8]
 830 002e 0D9B     		ldr	r3, [sp, #52]
 831 0030 0193     		str	r3, [sp, #4]
 832 0032 0C9B     		ldr	r3, [sp, #48]
 833 0034 0093     		str	r3, [sp]
 834 0036 4346     		mov	r3, r8
 835 0038 2A46     		mov	r2, r5
 836 003a 3946     		mov	r1, r7
 837 003c 3046     		mov	r0, r6
 838 003e FFF7FEFF 		bl	prvInitialiseNewTask
 839              	.LVL76:
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 840              		.loc 1 810 0
 841 0042 2046     		mov	r0, r4
 842 0044 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 843              	.LVL77:
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 844              		.loc 1 811 0
 845 0048 0120     		movs	r0, #1
 846              	.LVL78:
 847              	.L70:
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 848              		.loc 1 819 0
 849 004a 05B0     		add	sp, sp, #20
 850              	.LCFI10:
ARM GAS  /tmp/ccz3PNNG.s 			page 109


 851              		.cfi_remember_state
 852              		.cfi_def_cfa_offset 28
 853              		@ sp needed
 854 004c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 855              	.LVL79:
 856              	.L72:
 857              	.LCFI11:
 858              		.cfi_restore_state
 859              	.LBB107:
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 860              		.loc 1 789 0
 861 0050 4846     		mov	r0, r9
 862              	.LVL80:
 863 0052 FFF7FEFF 		bl	vPortFree
 864              	.LVL81:
 865 0056 E6E7     		b	.L71
 866              	.LVL82:
 867              	.L74:
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 868              		.loc 1 794 0
 869 0058 0024     		movs	r4, #0
 870 005a E4E7     		b	.L71
 871              	.LVL83:
 872              	.L75:
 873              	.LBE107:
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 874              		.loc 1 815 0
 875 005c 4FF0FF30 		mov	r0, #-1
 876              	.LVL84:
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 877              		.loc 1 818 0
 878 0060 F3E7     		b	.L70
 879              		.cfi_endproc
 880              	.LFE5:
 882              		.section	.text.vTaskDelete,"ax",%progbits
 883              		.align	1
 884              		.global	vTaskDelete
 885              		.syntax unified
 886              		.thumb
 887              		.thumb_func
 888              		.fpu softvfp
 890              	vTaskDelete:
 891              	.LFB8:
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 892              		.loc 1 1116 0
 893              		.cfi_startproc
 894              		@ args = 0, pretend = 0, frame = 0
 895              		@ frame_needed = 0, uses_anonymous_args = 0
 896              	.LVL85:
 897 0000 38B5     		push	{r3, r4, r5, lr}
 898              	.LCFI12:
 899              		.cfi_def_cfa_offset 16
 900              		.cfi_offset 3, -16
 901              		.cfi_offset 4, -12
 902              		.cfi_offset 5, -8
 903              		.cfi_offset 14, -4
 904 0002 0446     		mov	r4, r0
ARM GAS  /tmp/ccz3PNNG.s 			page 110


1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 905              		.loc 1 1119 0
 906 0004 FFF7FEFF 		bl	vPortEnterCritical
 907              	.LVL86:
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 908              		.loc 1 1123 0
 909 0008 002C     		cmp	r4, #0
 910 000a 34D0     		beq	.L87
 911              	.LVL87:
 912              	.L78:
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 913              		.loc 1 1126 0 discriminator 4
 914 000c 251D     		adds	r5, r4, #4
 915 000e 2846     		mov	r0, r5
 916 0010 FFF7FEFF 		bl	uxListRemove
 917              	.LVL88:
 918 0014 70B9     		cbnz	r0, .L79
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 919              		.loc 1 1128 0
 920 0016 E26A     		ldr	r2, [r4, #44]
 921 0018 02EB8201 		add	r1, r2, r2, lsl #2
 922 001c 8B00     		lsls	r3, r1, #2
 923 001e 2649     		ldr	r1, .L90
 924 0020 CB58     		ldr	r3, [r1, r3]
 925 0022 3BB9     		cbnz	r3, .L79
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 926              		.loc 1 1128 0 is_stmt 0 discriminator 1
 927 0024 0123     		movs	r3, #1
 928 0026 03FA02F2 		lsl	r2, r3, r2
 929 002a 2449     		ldr	r1, .L90+4
 930 002c 0B68     		ldr	r3, [r1]
 931 002e 23EA0203 		bic	r3, r3, r2
 932 0032 0B60     		str	r3, [r1]
 933              	.L79:
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 934              		.loc 1 1136 0 is_stmt 1
 935 0034 A36A     		ldr	r3, [r4, #40]
 936 0036 1BB1     		cbz	r3, .L80
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 937              		.loc 1 1138 0
 938 0038 04F11800 		add	r0, r4, #24
 939 003c FFF7FEFF 		bl	uxListRemove
 940              	.LVL89:
 941              	.L80:
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 942              		.loc 1 1149 0
 943 0040 1F4A     		ldr	r2, .L90+8
 944 0042 1368     		ldr	r3, [r2]
 945 0044 0133     		adds	r3, r3, #1
 946 0046 1360     		str	r3, [r2]
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 947              		.loc 1 1151 0
 948 0048 1E4B     		ldr	r3, .L90+12
 949 004a 1B68     		ldr	r3, [r3]
 950 004c 9C42     		cmp	r4, r3
 951 004e 15D0     		beq	.L88
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
ARM GAS  /tmp/ccz3PNNG.s 			page 111


 952              		.loc 1 1174 0
 953 0050 1D4A     		ldr	r2, .L90+16
 954 0052 1368     		ldr	r3, [r2]
 955 0054 013B     		subs	r3, r3, #1
 956 0056 1360     		str	r3, [r2]
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 957              		.loc 1 1175 0
 958 0058 2046     		mov	r0, r4
 959 005a FFF7FEFF 		bl	prvDeleteTCB
 960              	.LVL90:
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 961              		.loc 1 1179 0
 962 005e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 963              	.LVL91:
 964              	.L82:
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 965              		.loc 1 1184 0
 966 0062 FFF7FEFF 		bl	vPortExitCritical
 967              	.LVL92:
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 968              		.loc 1 1188 0
 969 0066 194B     		ldr	r3, .L90+20
 970 0068 1B68     		ldr	r3, [r3]
 971 006a 1BB1     		cbz	r3, .L77
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 972              		.loc 1 1190 0
 973 006c 154B     		ldr	r3, .L90+12
 974 006e 1B68     		ldr	r3, [r3]
 975 0070 9C42     		cmp	r4, r3
 976 0072 0CD0     		beq	.L89
 977              	.L77:
 978 0074 38BD     		pop	{r3, r4, r5, pc}
 979              	.LVL93:
 980              	.L87:
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981              		.loc 1 1123 0 discriminator 1
 982 0076 134B     		ldr	r3, .L90+12
 983 0078 1C68     		ldr	r4, [r3]
 984              	.LVL94:
 985 007a C7E7     		b	.L78
 986              	.LVL95:
 987              	.L88:
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 988              		.loc 1 1158 0
 989 007c 2946     		mov	r1, r5
 990 007e 1448     		ldr	r0, .L90+24
 991 0080 FFF7FEFF 		bl	vListInsertEnd
 992              	.LVL96:
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 993              		.loc 1 1163 0
 994 0084 134A     		ldr	r2, .L90+28
 995 0086 1368     		ldr	r3, [r2]
 996 0088 0133     		adds	r3, r3, #1
 997 008a 1360     		str	r3, [r2]
 998 008c E9E7     		b	.L82
 999              	.L89:
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
ARM GAS  /tmp/ccz3PNNG.s 			page 112


 1000              		.loc 1 1192 0
 1001 008e 124B     		ldr	r3, .L90+32
 1002 0090 1B68     		ldr	r3, [r3]
 1003 0092 43B1     		cbz	r3, .L84
 1004              	.LBB108:
 1005              	.LBB109:
 1006              		.loc 2 195 0
 1007              		.syntax unified
 1008              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1009 0094 4FF05003 			mov r3, #80												
 1010 0098 83F31188 		msr basepri, r3											
 1011 009c BFF36F8F 		isb														
 1012 00a0 BFF34F8F 		dsb														
 1013              	
 1014              	@ 0 "" 2
 1015              	.LVL97:
 1016              		.thumb
 1017              		.syntax unified
 1018              	.L85:
 1019 00a4 FEE7     		b	.L85
 1020              	.L84:
 1021              	.LBE109:
 1022              	.LBE108:
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1023              		.loc 1 1193 0
 1024 00a6 4FF08052 		mov	r2, #268435456
 1025 00aa 0C4B     		ldr	r3, .L90+36
 1026 00ac 1A60     		str	r2, [r3]
 1027              		.syntax unified
 1028              	@ 1193 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1029 00ae BFF34F8F 		dsb
 1030              	@ 0 "" 2
 1031              	@ 1193 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1032 00b2 BFF36F8F 		isb
 1033              	@ 0 "" 2
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1034              		.loc 1 1200 0
 1035              		.thumb
 1036              		.syntax unified
 1037 00b6 DDE7     		b	.L77
 1038              	.L91:
 1039              		.align	2
 1040              	.L90:
 1041 00b8 00000000 		.word	.LANCHOR4
 1042 00bc 00000000 		.word	.LANCHOR13
 1043 00c0 00000000 		.word	.LANCHOR12
 1044 00c4 00000000 		.word	.LANCHOR10
 1045 00c8 00000000 		.word	.LANCHOR9
 1046 00cc 00000000 		.word	.LANCHOR11
 1047 00d0 00000000 		.word	.LANCHOR7
 1048 00d4 00000000 		.word	.LANCHOR14
 1049 00d8 00000000 		.word	.LANCHOR16
 1050 00dc 04ED00E0 		.word	-536810236
 1051              		.cfi_endproc
 1052              	.LFE8:
 1054              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1055              		.align	1
ARM GAS  /tmp/ccz3PNNG.s 			page 113


 1056              		.global	uxTaskPriorityGet
 1057              		.syntax unified
 1058              		.thumb
 1059              		.thumb_func
 1060              		.fpu softvfp
 1062              	uxTaskPriorityGet:
 1063              	.LFB10:
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1064              		.loc 1 1429 0
 1065              		.cfi_startproc
 1066              		@ args = 0, pretend = 0, frame = 0
 1067              		@ frame_needed = 0, uses_anonymous_args = 0
 1068              	.LVL98:
 1069 0000 10B5     		push	{r4, lr}
 1070              	.LCFI13:
 1071              		.cfi_def_cfa_offset 8
 1072              		.cfi_offset 4, -8
 1073              		.cfi_offset 14, -4
 1074 0002 0446     		mov	r4, r0
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1075              		.loc 1 1433 0
 1076 0004 FFF7FEFF 		bl	vPortEnterCritical
 1077              	.LVL99:
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1078              		.loc 1 1437 0
 1079 0008 24B1     		cbz	r4, .L96
 1080              	.LVL100:
 1081              	.L93:
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1082              		.loc 1 1438 0 discriminator 4
 1083 000a E46A     		ldr	r4, [r4, #44]
 1084              	.LVL101:
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1085              		.loc 1 1440 0 discriminator 4
 1086 000c FFF7FEFF 		bl	vPortExitCritical
 1087              	.LVL102:
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1088              		.loc 1 1443 0 discriminator 4
 1089 0010 2046     		mov	r0, r4
 1090 0012 10BD     		pop	{r4, pc}
 1091              	.LVL103:
 1092              	.L96:
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1093              		.loc 1 1437 0 discriminator 1
 1094 0014 014B     		ldr	r3, .L97
 1095 0016 1C68     		ldr	r4, [r3]
 1096              	.LVL104:
 1097 0018 F7E7     		b	.L93
 1098              	.L98:
 1099 001a 00BF     		.align	2
 1100              	.L97:
 1101 001c 00000000 		.word	.LANCHOR10
 1102              		.cfi_endproc
 1103              	.LFE10:
 1105              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1106              		.align	1
 1107              		.global	uxTaskPriorityGetFromISR
ARM GAS  /tmp/ccz3PNNG.s 			page 114


 1108              		.syntax unified
 1109              		.thumb
 1110              		.thumb_func
 1111              		.fpu softvfp
 1113              	uxTaskPriorityGetFromISR:
 1114              	.LFB11:
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1115              		.loc 1 1451 0
 1116              		.cfi_startproc
 1117              		@ args = 0, pretend = 0, frame = 0
 1118              		@ frame_needed = 0, uses_anonymous_args = 0
 1119              	.LVL105:
 1120 0000 10B5     		push	{r4, lr}
 1121              	.LCFI14:
 1122              		.cfi_def_cfa_offset 8
 1123              		.cfi_offset 4, -8
 1124              		.cfi_offset 14, -4
 1125 0002 0446     		mov	r4, r0
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1126              		.loc 1 1471 0
 1127 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1128              	.LVL106:
 1129              	.LBB110:
 1130              	.LBB111:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1131              		.loc 2 211 0
 1132              		.syntax unified
 1133              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1134 0008 EFF31183 			mrs r3, basepri											
 1135 000c 4FF05002 		mov r2, #80												
 1136 0010 82F31188 		msr basepri, r2											
 1137 0014 BFF36F8F 		isb														
 1138 0018 BFF34F8F 		dsb														
 1139              	
 1140              	@ 0 "" 2
 1141              		.thumb
 1142              		.syntax unified
 1143              	.LBE111:
 1144              	.LBE110:
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1145              		.loc 1 1477 0
 1146 001c 1CB1     		cbz	r4, .L103
ARM GAS  /tmp/ccz3PNNG.s 			page 115


 1147              	.LVL107:
 1148              	.L100:
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1149              		.loc 1 1478 0 discriminator 4
 1150 001e E06A     		ldr	r0, [r4, #44]
 1151              	.LVL108:
 1152              	.LBB112:
 1153              	.LBB113:
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1154              		.loc 2 229 0 discriminator 4
 1155              		.syntax unified
 1156              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1157 0020 83F31188 			msr basepri, r3	
 1158              	@ 0 "" 2
 1159              	.LVL109:
 1160              		.thumb
 1161              		.syntax unified
 1162              	.LBE113:
 1163              	.LBE112:
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1164              		.loc 1 1483 0 discriminator 4
 1165 0024 10BD     		pop	{r4, pc}
 1166              	.LVL110:
 1167              	.L103:
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1168              		.loc 1 1477 0 discriminator 1
 1169 0026 014A     		ldr	r2, .L104
 1170 0028 1468     		ldr	r4, [r2]
 1171              	.LVL111:
 1172 002a F8E7     		b	.L100
 1173              	.L105:
 1174              		.align	2
 1175              	.L104:
 1176 002c 00000000 		.word	.LANCHOR10
 1177              		.cfi_endproc
 1178              	.LFE11:
 1180              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1181              		.align	1
 1182              		.global	vTaskPrioritySet
 1183              		.syntax unified
ARM GAS  /tmp/ccz3PNNG.s 			page 116


 1184              		.thumb
 1185              		.thumb_func
 1186              		.fpu softvfp
 1188              	vTaskPrioritySet:
 1189              	.LFB12:
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1190              		.loc 1 1491 0
 1191              		.cfi_startproc
 1192              		@ args = 0, pretend = 0, frame = 0
 1193              		@ frame_needed = 0, uses_anonymous_args = 0
 1194              	.LVL112:
 1195 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1196              	.LCFI15:
 1197              		.cfi_def_cfa_offset 24
 1198              		.cfi_offset 3, -24
 1199              		.cfi_offset 4, -20
 1200              		.cfi_offset 5, -16
 1201              		.cfi_offset 6, -12
 1202              		.cfi_offset 7, -8
 1203              		.cfi_offset 14, -4
 1204              	.LVL113:
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1205              		.loc 1 1496 0
 1206 0002 0629     		cmp	r1, #6
 1207 0004 08D9     		bls	.L107
 1208              	.LBB114:
 1209              	.LBB115:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1210              		.loc 2 195 0
 1211              		.syntax unified
 1212              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1213 0006 4FF05003 			mov r3, #80												
 1214 000a 83F31188 		msr basepri, r3											
 1215 000e BFF36F8F 		isb														
 1216 0012 BFF34F8F 		dsb														
 1217              	
 1218              	@ 0 "" 2
 1219              	.LVL114:
 1220              		.thumb
 1221              		.syntax unified
 1222              	.L108:
 1223 0016 FEE7     		b	.L108
 1224              	.L107:
 1225 0018 0446     		mov	r4, r0
 1226 001a 0D46     		mov	r5, r1
 1227              	.LVL115:
 1228              	.LBE115:
 1229              	.LBE114:
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1230              		.loc 1 1508 0
 1231 001c FFF7FEFF 		bl	vPortEnterCritical
 1232              	.LVL116:
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1233              		.loc 1 1512 0
 1234 0020 0CB9     		cbnz	r4, .L109
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1235              		.loc 1 1512 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccz3PNNG.s 			page 117


 1236 0022 2B4B     		ldr	r3, .L121
 1237 0024 1C68     		ldr	r4, [r3]
 1238              	.LVL117:
 1239              	.L109:
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1240              		.loc 1 1518 0 is_stmt 1 discriminator 4
 1241 0026 636C     		ldr	r3, [r4, #68]
 1242              	.LVL118:
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1243              		.loc 1 1526 0 discriminator 4
 1244 0028 9D42     		cmp	r5, r3
 1245 002a 42D0     		beq	.L110
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1246              		.loc 1 1530 0
 1247 002c 44D9     		bls	.L111
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1248              		.loc 1 1532 0
 1249 002e 284A     		ldr	r2, .L121
 1250 0030 1268     		ldr	r2, [r2]
 1251 0032 9442     		cmp	r4, r2
 1252 0034 46D0     		beq	.L117
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1253              		.loc 1 1537 0
 1254 0036 264A     		ldr	r2, .L121
 1255 0038 1268     		ldr	r2, [r2]
 1256 003a D26A     		ldr	r2, [r2, #44]
 1257 003c 9542     		cmp	r5, r2
 1258 003e 43D2     		bcs	.L118
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1259              		.loc 1 1494 0
 1260 0040 0026     		movs	r6, #0
 1261              	.L112:
 1262              	.LVL119:
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1263              		.loc 1 1570 0
 1264 0042 E76A     		ldr	r7, [r4, #44]
 1265              	.LVL120:
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1266              		.loc 1 1576 0
 1267 0044 BB42     		cmp	r3, r7
 1268 0046 00D1     		bne	.L113
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1269              		.loc 1 1578 0
 1270 0048 E562     		str	r5, [r4, #44]
 1271              	.L113:
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1272              		.loc 1 1586 0
 1273 004a 6564     		str	r5, [r4, #68]
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1274              		.loc 1 1596 0
 1275 004c A369     		ldr	r3, [r4, #24]
 1276              	.LVL121:
 1277 004e 002B     		cmp	r3, #0
 1278 0050 02DB     		blt	.L114
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1279              		.loc 1 1598 0
 1280 0052 C5F10705 		rsb	r5, r5, #7
ARM GAS  /tmp/ccz3PNNG.s 			page 118


 1281              	.LVL122:
 1282 0056 A561     		str	r5, [r4, #24]
 1283              	.L114:
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1284              		.loc 1 1609 0
 1285 0058 6169     		ldr	r1, [r4, #20]
 1286 005a 07EB8703 		add	r3, r7, r7, lsl #2
 1287 005e 9A00     		lsls	r2, r3, #2
 1288 0060 1C4B     		ldr	r3, .L121+4
 1289 0062 1344     		add	r3, r3, r2
 1290 0064 9942     		cmp	r1, r3
 1291 0066 1BD1     		bne	.L115
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1292              		.loc 1 1614 0
 1293 0068 251D     		adds	r5, r4, #4
 1294 006a 2846     		mov	r0, r5
 1295 006c FFF7FEFF 		bl	uxListRemove
 1296              	.LVL123:
 1297 0070 38B9     		cbnz	r0, .L116
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1298              		.loc 1 1619 0
 1299 0072 0123     		movs	r3, #1
 1300 0074 03FA07F7 		lsl	r7, r3, r7
 1301              	.LVL124:
 1302 0078 174A     		ldr	r2, .L121+8
 1303 007a 1368     		ldr	r3, [r2]
 1304 007c 23EA0703 		bic	r3, r3, r7
 1305 0080 1360     		str	r3, [r2]
 1306              	.L116:
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1307              		.loc 1 1625 0
 1308 0082 E36A     		ldr	r3, [r4, #44]
 1309 0084 0122     		movs	r2, #1
 1310 0086 9A40     		lsls	r2, r2, r3
 1311 0088 1349     		ldr	r1, .L121+8
 1312 008a 0868     		ldr	r0, [r1]
 1313 008c 0243     		orrs	r2, r2, r0
 1314 008e 0A60     		str	r2, [r1]
 1315 0090 03EB8303 		add	r3, r3, r3, lsl #2
 1316 0094 9A00     		lsls	r2, r3, #2
 1317 0096 2946     		mov	r1, r5
 1318 0098 0E48     		ldr	r0, .L121+4
 1319 009a 1044     		add	r0, r0, r2
 1320 009c FFF7FEFF 		bl	vListInsertEnd
 1321              	.LVL125:
 1322              	.L115:
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1323              		.loc 1 1632 0
 1324 00a0 3EB1     		cbz	r6, .L110
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1325              		.loc 1 1634 0
 1326 00a2 4FF08052 		mov	r2, #268435456
 1327 00a6 0D4B     		ldr	r3, .L121+12
 1328 00a8 1A60     		str	r2, [r3]
 1329              		.syntax unified
 1330              	@ 1634 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1331 00aa BFF34F8F 		dsb
ARM GAS  /tmp/ccz3PNNG.s 			page 119


 1332              	@ 0 "" 2
 1333              	@ 1634 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1334 00ae BFF36F8F 		isb
 1335              	@ 0 "" 2
 1336              	.LVL126:
 1337              		.thumb
 1338              		.syntax unified
 1339              	.L110:
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1340              		.loc 1 1646 0
 1341 00b2 FFF7FEFF 		bl	vPortExitCritical
 1342              	.LVL127:
 1343 00b6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1344              	.LVL128:
 1345              	.L111:
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1346              		.loc 1 1553 0
 1347 00b8 054A     		ldr	r2, .L121
 1348 00ba 1268     		ldr	r2, [r2]
 1349 00bc 9442     		cmp	r4, r2
 1350 00be 05D0     		beq	.L119
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1351              		.loc 1 1494 0
 1352 00c0 0026     		movs	r6, #0
 1353 00c2 BEE7     		b	.L112
 1354              	.L117:
 1355 00c4 0026     		movs	r6, #0
 1356 00c6 BCE7     		b	.L112
 1357              	.L118:
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1358              		.loc 1 1539 0
 1359 00c8 0126     		movs	r6, #1
 1360 00ca BAE7     		b	.L112
 1361              	.L119:
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1362              		.loc 1 1558 0
 1363 00cc 0126     		movs	r6, #1
 1364 00ce B8E7     		b	.L112
 1365              	.L122:
 1366              		.align	2
 1367              	.L121:
 1368 00d0 00000000 		.word	.LANCHOR10
 1369 00d4 00000000 		.word	.LANCHOR4
 1370 00d8 00000000 		.word	.LANCHOR13
 1371 00dc 04ED00E0 		.word	-536810236
 1372              		.cfi_endproc
 1373              	.LFE12:
 1375              		.section	.text.vTaskResume,"ax",%progbits
 1376              		.align	1
 1377              		.global	vTaskResume
 1378              		.syntax unified
 1379              		.thumb
 1380              		.thumb_func
 1381              		.fpu softvfp
 1383              	vTaskResume:
 1384              	.LFB15:
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
ARM GAS  /tmp/ccz3PNNG.s 			page 120


 1385              		.loc 1 1802 0
 1386              		.cfi_startproc
 1387              		@ args = 0, pretend = 0, frame = 0
 1388              		@ frame_needed = 0, uses_anonymous_args = 0
 1389              	.LVL129:
 1390 0000 38B5     		push	{r3, r4, r5, lr}
 1391              	.LCFI16:
 1392              		.cfi_def_cfa_offset 16
 1393              		.cfi_offset 3, -16
 1394              		.cfi_offset 4, -12
 1395              		.cfi_offset 5, -8
 1396              		.cfi_offset 14, -4
 1397              	.LVL130:
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1398              		.loc 1 1806 0
 1399 0002 68B1     		cbz	r0, .L129
 1400 0004 0446     		mov	r4, r0
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1401              		.loc 1 1810 0
 1402 0006 1C4B     		ldr	r3, .L131
 1403 0008 1B68     		ldr	r3, [r3]
 1404 000a 9842     		cmp	r0, r3
 1405 000c 07D0     		beq	.L123
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1406              		.loc 1 1812 0
 1407 000e FFF7FEFF 		bl	vPortEnterCritical
 1408              	.LVL131:
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1409              		.loc 1 1814 0
 1410 0012 2046     		mov	r0, r4
 1411 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1412              	.LVL132:
 1413 0018 58B9     		cbnz	r0, .L130
 1414              	.L127:
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1415              		.loc 1 1841 0
 1416 001a FFF7FEFF 		bl	vPortExitCritical
 1417              	.LVL133:
 1418              	.L123:
 1419 001e 38BD     		pop	{r3, r4, r5, pc}
 1420              	.LVL134:
 1421              	.L129:
 1422              	.LBB116:
 1423              	.LBB117:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1424              		.loc 2 195 0
 1425              		.syntax unified
 1426              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1427 0020 4FF05003 			mov r3, #80												
 1428 0024 83F31188 		msr basepri, r3											
 1429 0028 BFF36F8F 		isb														
 1430 002c BFF34F8F 		dsb														
 1431              	
 1432              	@ 0 "" 2
 1433              	.LVL135:
 1434              		.thumb
 1435              		.syntax unified
ARM GAS  /tmp/ccz3PNNG.s 			page 121


 1436              	.L125:
 1437 0030 FEE7     		b	.L125
 1438              	.LVL136:
 1439              	.L130:
 1440              	.LBE117:
 1441              	.LBE116:
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1442              		.loc 1 1820 0
 1443 0032 251D     		adds	r5, r4, #4
 1444 0034 2846     		mov	r0, r5
 1445 0036 FFF7FEFF 		bl	uxListRemove
 1446              	.LVL137:
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1447              		.loc 1 1821 0
 1448 003a E36A     		ldr	r3, [r4, #44]
 1449 003c 0122     		movs	r2, #1
 1450 003e 9A40     		lsls	r2, r2, r3
 1451 0040 0E49     		ldr	r1, .L131+4
 1452 0042 0868     		ldr	r0, [r1]
 1453 0044 0243     		orrs	r2, r2, r0
 1454 0046 0A60     		str	r2, [r1]
 1455 0048 03EB8303 		add	r3, r3, r3, lsl #2
 1456 004c 9A00     		lsls	r2, r3, #2
 1457 004e 2946     		mov	r1, r5
 1458 0050 0B48     		ldr	r0, .L131+8
 1459 0052 1044     		add	r0, r0, r2
 1460 0054 FFF7FEFF 		bl	vListInsertEnd
 1461              	.LVL138:
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1462              		.loc 1 1824 0
 1463 0058 E26A     		ldr	r2, [r4, #44]
 1464 005a 074B     		ldr	r3, .L131
 1465 005c 1B68     		ldr	r3, [r3]
 1466 005e DB6A     		ldr	r3, [r3, #44]
 1467 0060 9A42     		cmp	r2, r3
 1468 0062 DAD3     		bcc	.L127
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1469              		.loc 1 1829 0
 1470 0064 4FF08052 		mov	r2, #268435456
 1471 0068 064B     		ldr	r3, .L131+12
 1472 006a 1A60     		str	r2, [r3]
 1473              		.syntax unified
 1474              	@ 1829 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1475 006c BFF34F8F 		dsb
 1476              	@ 0 "" 2
 1477              	@ 1829 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1478 0070 BFF36F8F 		isb
 1479              	@ 0 "" 2
 1480              		.thumb
 1481              		.syntax unified
 1482 0074 D1E7     		b	.L127
 1483              	.L132:
 1484 0076 00BF     		.align	2
 1485              	.L131:
 1486 0078 00000000 		.word	.LANCHOR10
 1487 007c 00000000 		.word	.LANCHOR13
 1488 0080 00000000 		.word	.LANCHOR4
ARM GAS  /tmp/ccz3PNNG.s 			page 122


 1489 0084 04ED00E0 		.word	-536810236
 1490              		.cfi_endproc
 1491              	.LFE15:
 1493              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1494              		.align	1
 1495              		.global	xTaskResumeFromISR
 1496              		.syntax unified
 1497              		.thumb
 1498              		.thumb_func
 1499              		.fpu softvfp
 1501              	xTaskResumeFromISR:
 1502              	.LFB16:
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1503              		.loc 1 1856 0
 1504              		.cfi_startproc
 1505              		@ args = 0, pretend = 0, frame = 0
 1506              		@ frame_needed = 0, uses_anonymous_args = 0
 1507              	.LVL139:
 1508 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1509              	.LCFI17:
 1510              		.cfi_def_cfa_offset 24
 1511              		.cfi_offset 3, -24
 1512              		.cfi_offset 4, -20
 1513              		.cfi_offset 5, -16
 1514              		.cfi_offset 6, -12
 1515              		.cfi_offset 7, -8
 1516              		.cfi_offset 14, -4
 1517              	.LVL140:
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1518              		.loc 1 1861 0
 1519 0002 0028     		cmp	r0, #0
 1520 0004 32D0     		beq	.L142
 1521 0006 0446     		mov	r4, r0
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1522              		.loc 1 1879 0
 1523 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1524              	.LVL141:
 1525              	.LBB118:
 1526              	.LBB119:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1527              		.loc 2 211 0
 1528              		.syntax unified
 1529              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1530 000c EFF31187 			mrs r7, basepri											
 1531 0010 4FF05003 		mov r3, #80												
 1532 0014 83F31188 		msr basepri, r3											
 1533 0018 BFF36F8F 		isb														
 1534 001c BFF34F8F 		dsb														
 1535              	
 1536              	@ 0 "" 2
 1537              		.thumb
 1538              		.syntax unified
 1539              	.LBE119:
 1540              	.LBE118:
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1541              		.loc 1 1883 0
 1542 0020 2046     		mov	r0, r4
ARM GAS  /tmp/ccz3PNNG.s 			page 123


 1543 0022 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1544              	.LVL142:
 1545 0026 0028     		cmp	r0, #0
 1546 0028 32D0     		beq	.L139
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1547              		.loc 1 1888 0
 1548 002a 1A4B     		ldr	r3, .L144
 1549 002c 1B68     		ldr	r3, [r3]
 1550 002e 43BB     		cbnz	r3, .L137
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1551              		.loc 1 1892 0
 1552 0030 E26A     		ldr	r2, [r4, #44]
 1553 0032 194B     		ldr	r3, .L144+4
 1554 0034 1B68     		ldr	r3, [r3]
 1555 0036 DB6A     		ldr	r3, [r3, #44]
 1556 0038 9A42     		cmp	r2, r3
 1557 003a 20D3     		bcc	.L143
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1558              		.loc 1 1894 0
 1559 003c 0125     		movs	r5, #1
 1560              	.L138:
 1561              	.LVL143:
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1562              		.loc 1 1901 0
 1563 003e 261D     		adds	r6, r4, #4
 1564 0040 3046     		mov	r0, r6
 1565 0042 FFF7FEFF 		bl	uxListRemove
 1566              	.LVL144:
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1567              		.loc 1 1902 0
 1568 0046 E36A     		ldr	r3, [r4, #44]
 1569 0048 0122     		movs	r2, #1
 1570 004a 9A40     		lsls	r2, r2, r3
 1571 004c 1349     		ldr	r1, .L144+8
 1572 004e 0868     		ldr	r0, [r1]
 1573 0050 0243     		orrs	r2, r2, r0
 1574 0052 0A60     		str	r2, [r1]
 1575 0054 03EB8303 		add	r3, r3, r3, lsl #2
 1576 0058 9A00     		lsls	r2, r3, #2
 1577 005a 3146     		mov	r1, r6
 1578 005c 1048     		ldr	r0, .L144+12
 1579 005e 1044     		add	r0, r0, r2
 1580 0060 FFF7FEFF 		bl	vListInsertEnd
 1581              	.LVL145:
 1582              	.L136:
 1583              	.LBB120:
 1584              	.LBB121:
 1585              		.loc 2 229 0
 1586              		.syntax unified
 1587              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1588 0064 87F31188 			msr basepri, r7	
 1589              	@ 0 "" 2
 1590              	.LVL146:
 1591              		.thumb
 1592              		.syntax unified
 1593              	.LBE121:
 1594              	.LBE120:
ARM GAS  /tmp/ccz3PNNG.s 			page 124


1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1595              		.loc 1 1920 0
 1596 0068 2846     		mov	r0, r5
 1597 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1598              	.LVL147:
 1599              	.L142:
 1600              	.LBB122:
 1601              	.LBB123:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1602              		.loc 2 195 0
 1603              		.syntax unified
 1604              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1605 006c 4FF05003 			mov r3, #80												
 1606 0070 83F31188 		msr basepri, r3											
 1607 0074 BFF36F8F 		isb														
 1608 0078 BFF34F8F 		dsb														
 1609              	
 1610              	@ 0 "" 2
 1611              	.LVL148:
 1612              		.thumb
 1613              		.syntax unified
 1614              	.L135:
 1615 007c FEE7     		b	.L135
 1616              	.LVL149:
 1617              	.L143:
 1618              	.LBE123:
 1619              	.LBE122:
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1620              		.loc 1 1857 0
 1621 007e 0025     		movs	r5, #0
 1622 0080 DDE7     		b	.L138
 1623              	.L137:
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1624              		.loc 1 1909 0
 1625 0082 04F11801 		add	r1, r4, #24
 1626 0086 0748     		ldr	r0, .L144+16
 1627 0088 FFF7FEFF 		bl	vListInsertEnd
 1628              	.LVL150:
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1629              		.loc 1 1857 0
 1630 008c 0025     		movs	r5, #0
 1631 008e E9E7     		b	.L136
 1632              	.L139:
 1633 0090 0025     		movs	r5, #0
 1634 0092 E7E7     		b	.L136
 1635              	.L145:
 1636              		.align	2
 1637              	.L144:
 1638 0094 00000000 		.word	.LANCHOR16
 1639 0098 00000000 		.word	.LANCHOR10
 1640 009c 00000000 		.word	.LANCHOR13
 1641 00a0 00000000 		.word	.LANCHOR4
 1642 00a4 00000000 		.word	.LANCHOR1
 1643              		.cfi_endproc
 1644              	.LFE16:
 1646              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1647              		.align	1
ARM GAS  /tmp/ccz3PNNG.s 			page 125


 1648              		.global	vTaskStartScheduler
 1649              		.syntax unified
 1650              		.thumb
 1651              		.thumb_func
 1652              		.fpu softvfp
 1654              	vTaskStartScheduler:
 1655              	.LFB17:
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1656              		.loc 1 1926 0
 1657              		.cfi_startproc
 1658              		@ args = 0, pretend = 0, frame = 0
 1659              		@ frame_needed = 0, uses_anonymous_args = 0
 1660 0000 00B5     		push	{lr}
 1661              	.LCFI18:
 1662              		.cfi_def_cfa_offset 4
 1663              		.cfi_offset 14, -4
 1664 0002 83B0     		sub	sp, sp, #12
 1665              	.LCFI19:
 1666              		.cfi_def_cfa_offset 16
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
 1667              		.loc 1 1959 0
 1668 0004 174B     		ldr	r3, .L153
 1669 0006 0193     		str	r3, [sp, #4]
 1670 0008 0023     		movs	r3, #0
 1671 000a 0093     		str	r3, [sp]
 1672 000c 8022     		movs	r2, #128
 1673 000e 1649     		ldr	r1, .L153+4
 1674 0010 1648     		ldr	r0, .L153+8
 1675 0012 FFF7FEFF 		bl	xTaskCreate
 1676              	.LVL151:
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1677              		.loc 1 1981 0
 1678 0016 0128     		cmp	r0, #1
 1679 0018 05D0     		beq	.L151
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1680              		.loc 1 2038 0
 1681 001a B0F1FF3F 		cmp	r0, #-1
 1682 001e 17D0     		beq	.L152
 1683              	.LVL152:
 1684              	.L146:
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1685              		.loc 1 2044 0
 1686 0020 03B0     		add	sp, sp, #12
 1687              	.LCFI20:
 1688              		.cfi_remember_state
 1689              		.cfi_def_cfa_offset 4
 1690              		@ sp needed
 1691 0022 5DF804FB 		ldr	pc, [sp], #4
 1692              	.LVL153:
 1693              	.L151:
 1694              	.LCFI21:
 1695              		.cfi_restore_state
 1696              	.LBB124:
 1697              	.LBB125:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1698              		.loc 2 195 0
 1699              		.syntax unified
ARM GAS  /tmp/ccz3PNNG.s 			page 126


 1700              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1701 0026 4FF05003 			mov r3, #80												
 1702 002a 83F31188 		msr basepri, r3											
 1703 002e BFF36F8F 		isb														
 1704 0032 BFF34F8F 		dsb														
 1705              	
 1706              	@ 0 "" 2
 1707              		.thumb
 1708              		.syntax unified
 1709              	.LBE125:
 1710              	.LBE124:
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1711              		.loc 1 2007 0
 1712 0036 4FF0FF32 		mov	r2, #-1
 1713 003a 0D4B     		ldr	r3, .L153+12
 1714 003c 1A60     		str	r2, [r3]
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1715              		.loc 1 2008 0
 1716 003e 0122     		movs	r2, #1
 1717 0040 0C4B     		ldr	r3, .L153+16
 1718 0042 1A60     		str	r2, [r3]
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1719              		.loc 1 2009 0
 1720 0044 0022     		movs	r2, #0
 1721 0046 0C4B     		ldr	r3, .L153+20
 1722 0048 1A60     		str	r2, [r3]
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1723              		.loc 1 2023 0
 1724 004a FFF7FEFF 		bl	xPortStartScheduler
 1725              	.LVL154:
 1726 004e E7E7     		b	.L146
 1727              	.LVL155:
 1728              	.L152:
 1729              	.LBB126:
 1730              	.LBB127:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1731              		.loc 2 195 0
 1732              		.syntax unified
 1733              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1734 0050 4FF05003 			mov r3, #80												
 1735 0054 83F31188 		msr basepri, r3											
 1736 0058 BFF36F8F 		isb														
 1737 005c BFF34F8F 		dsb														
 1738              	
 1739              	@ 0 "" 2
 1740              	.LVL156:
 1741              		.thumb
 1742              		.syntax unified
 1743              	.L149:
 1744 0060 FEE7     		b	.L149
 1745              	.L154:
 1746 0062 00BF     		.align	2
 1747              	.L153:
 1748 0064 00000000 		.word	.LANCHOR17
 1749 0068 00000000 		.word	.LC0
 1750 006c 00000000 		.word	prvIdleTask
 1751 0070 00000000 		.word	.LANCHOR3
ARM GAS  /tmp/ccz3PNNG.s 			page 127


 1752 0074 00000000 		.word	.LANCHOR11
 1753 0078 00000000 		.word	.LANCHOR15
 1754              	.LBE127:
 1755              	.LBE126:
 1756              		.cfi_endproc
 1757              	.LFE17:
 1759              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1760              		.align	1
 1761              		.global	vTaskEndScheduler
 1762              		.syntax unified
 1763              		.thumb
 1764              		.thumb_func
 1765              		.fpu softvfp
 1767              	vTaskEndScheduler:
 1768              	.LFB18:
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1769              		.loc 1 2048 0
 1770              		.cfi_startproc
 1771              		@ args = 0, pretend = 0, frame = 0
 1772              		@ frame_needed = 0, uses_anonymous_args = 0
 1773 0000 08B5     		push	{r3, lr}
 1774              	.LCFI22:
 1775              		.cfi_def_cfa_offset 8
 1776              		.cfi_offset 3, -8
 1777              		.cfi_offset 14, -4
 1778              	.LBB128:
 1779              	.LBB129:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1780              		.loc 2 195 0
 1781              		.syntax unified
 1782              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1783 0002 4FF05003 			mov r3, #80												
 1784 0006 83F31188 		msr basepri, r3											
 1785 000a BFF36F8F 		isb														
 1786 000e BFF34F8F 		dsb														
 1787              	
 1788              	@ 0 "" 2
 1789              		.thumb
 1790              		.syntax unified
 1791              	.LBE129:
 1792              	.LBE128:
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1793              		.loc 1 2053 0
 1794 0012 0022     		movs	r2, #0
 1795 0014 024B     		ldr	r3, .L157
 1796 0016 1A60     		str	r2, [r3]
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1797              		.loc 1 2054 0
 1798 0018 FFF7FEFF 		bl	vPortEndScheduler
 1799              	.LVL157:
 1800 001c 08BD     		pop	{r3, pc}
 1801              	.L158:
 1802 001e 00BF     		.align	2
 1803              	.L157:
 1804 0020 00000000 		.word	.LANCHOR11
 1805              		.cfi_endproc
 1806              	.LFE18:
ARM GAS  /tmp/ccz3PNNG.s 			page 128


 1808              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1809              		.align	1
 1810              		.global	vTaskSuspendAll
 1811              		.syntax unified
 1812              		.thumb
 1813              		.thumb_func
 1814              		.fpu softvfp
 1816              	vTaskSuspendAll:
 1817              	.LFB19:
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1818              		.loc 1 2059 0
 1819              		.cfi_startproc
 1820              		@ args = 0, pretend = 0, frame = 0
 1821              		@ frame_needed = 0, uses_anonymous_args = 0
 1822              		@ link register save eliminated.
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1823              		.loc 1 2064 0
 1824 0000 024A     		ldr	r2, .L160
 1825 0002 1368     		ldr	r3, [r2]
 1826 0004 0133     		adds	r3, r3, #1
 1827 0006 1360     		str	r3, [r2]
 1828 0008 7047     		bx	lr
 1829              	.L161:
 1830 000a 00BF     		.align	2
 1831              	.L160:
 1832 000c 00000000 		.word	.LANCHOR16
 1833              		.cfi_endproc
 1834              	.LFE19:
 1836              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1837              		.align	1
 1838              		.global	xTaskGetTickCount
 1839              		.syntax unified
 1840              		.thumb
 1841              		.thumb_func
 1842              		.fpu softvfp
 1844              	xTaskGetTickCount:
 1845              	.LFB21:
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 1846              		.loc 1 2242 0
 1847              		.cfi_startproc
 1848              		@ args = 0, pretend = 0, frame = 0
 1849              		@ frame_needed = 0, uses_anonymous_args = 0
 1850              		@ link register save eliminated.
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1851              		.loc 1 2248 0
 1852 0000 014B     		ldr	r3, .L163
 1853 0002 1868     		ldr	r0, [r3]
 1854              	.LVL158:
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1855              		.loc 1 2253 0
 1856 0004 7047     		bx	lr
 1857              	.L164:
 1858 0006 00BF     		.align	2
 1859              	.L163:
 1860 0008 00000000 		.word	.LANCHOR15
 1861              		.cfi_endproc
 1862              	.LFE21:
ARM GAS  /tmp/ccz3PNNG.s 			page 129


 1864              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1865              		.align	1
 1866              		.global	xTaskGetTickCountFromISR
 1867              		.syntax unified
 1868              		.thumb
 1869              		.thumb_func
 1870              		.fpu softvfp
 1872              	xTaskGetTickCountFromISR:
 1873              	.LFB22:
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 1874              		.loc 1 2257 0
 1875              		.cfi_startproc
 1876              		@ args = 0, pretend = 0, frame = 0
 1877              		@ frame_needed = 0, uses_anonymous_args = 0
 1878 0000 08B5     		push	{r3, lr}
 1879              	.LCFI23:
 1880              		.cfi_def_cfa_offset 8
 1881              		.cfi_offset 3, -8
 1882              		.cfi_offset 14, -4
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1883              		.loc 1 2275 0
 1884 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1885              	.LVL159:
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1886              		.loc 1 2279 0
 1887 0006 014B     		ldr	r3, .L167
 1888 0008 1868     		ldr	r0, [r3]
 1889              	.LVL160:
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1890              		.loc 1 2284 0
 1891 000a 08BD     		pop	{r3, pc}
 1892              	.L168:
 1893              		.align	2
 1894              	.L167:
 1895 000c 00000000 		.word	.LANCHOR15
 1896              		.cfi_endproc
 1897              	.LFE22:
 1899              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1900              		.align	1
 1901              		.global	uxTaskGetNumberOfTasks
 1902              		.syntax unified
 1903              		.thumb
 1904              		.thumb_func
 1905              		.fpu softvfp
 1907              	uxTaskGetNumberOfTasks:
 1908              	.LFB23:
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 1909              		.loc 1 2288 0
 1910              		.cfi_startproc
 1911              		@ args = 0, pretend = 0, frame = 0
 1912              		@ frame_needed = 0, uses_anonymous_args = 0
 1913              		@ link register save eliminated.
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1914              		.loc 1 2291 0
 1915 0000 014B     		ldr	r3, .L170
 1916 0002 1868     		ldr	r0, [r3]
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccz3PNNG.s 			page 130


 1917              		.loc 1 2292 0
 1918 0004 7047     		bx	lr
 1919              	.L171:
 1920 0006 00BF     		.align	2
 1921              	.L170:
 1922 0008 00000000 		.word	.LANCHOR9
 1923              		.cfi_endproc
 1924              	.LFE23:
 1926              		.section	.text.pcTaskGetName,"ax",%progbits
 1927              		.align	1
 1928              		.global	pcTaskGetName
 1929              		.syntax unified
 1930              		.thumb
 1931              		.thumb_func
 1932              		.fpu softvfp
 1934              	pcTaskGetName:
 1935              	.LFB24:
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 1936              		.loc 1 2296 0
 1937              		.cfi_startproc
 1938              		@ args = 0, pretend = 0, frame = 0
 1939              		@ frame_needed = 0, uses_anonymous_args = 0
 1940              		@ link register save eliminated.
 1941              	.LVL161:
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1942              		.loc 1 2301 0
 1943 0000 0346     		mov	r3, r0
 1944 0002 18B1     		cbz	r0, .L176
 1945              	.LVL162:
 1946              	.L173:
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 1947              		.loc 1 2302 0 discriminator 4
 1948 0004 2BB1     		cbz	r3, .L177
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1949              		.loc 1 2304 0
 1950 0006 03F13400 		add	r0, r3, #52
 1951 000a 7047     		bx	lr
 1952              	.LVL163:
 1953              	.L176:
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1954              		.loc 1 2301 0 discriminator 1
 1955 000c 054B     		ldr	r3, .L178
 1956 000e 1B68     		ldr	r3, [r3]
 1957              	.LVL164:
 1958 0010 F8E7     		b	.L173
 1959              	.LVL165:
 1960              	.L177:
 1961              	.LBB130:
 1962              	.LBB131:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1963              		.loc 2 195 0
 1964              		.syntax unified
 1965              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1966 0012 4FF05003 			mov r3, #80												
 1967 0016 83F31188 		msr basepri, r3											
 1968 001a BFF36F8F 		isb														
 1969 001e BFF34F8F 		dsb														
ARM GAS  /tmp/ccz3PNNG.s 			page 131


 1970              	
 1971              	@ 0 "" 2
 1972              	.LVL166:
 1973              		.thumb
 1974              		.syntax unified
 1975              	.L175:
 1976 0022 FEE7     		b	.L175
 1977              	.L179:
 1978              		.align	2
 1979              	.L178:
 1980 0024 00000000 		.word	.LANCHOR10
 1981              	.LBE131:
 1982              	.LBE130:
 1983              		.cfi_endproc
 1984              	.LFE24:
 1986              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1987              		.align	1
 1988              		.global	xTaskIncrementTick
 1989              		.syntax unified
 1990              		.thumb
 1991              		.thumb_func
 1992              		.fpu softvfp
 1994              	xTaskIncrementTick:
 1995              	.LFB25:
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 1996              		.loc 1 2623 0
 1997              		.cfi_startproc
 1998              		@ args = 0, pretend = 0, frame = 0
 1999              		@ frame_needed = 0, uses_anonymous_args = 0
 2000 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2001              	.LCFI24:
 2002              		.cfi_def_cfa_offset 24
 2003              		.cfi_offset 3, -24
 2004              		.cfi_offset 4, -20
 2005              		.cfi_offset 5, -16
 2006              		.cfi_offset 6, -12
 2007              		.cfi_offset 7, -8
 2008              		.cfi_offset 14, -4
 2009              	.LVL167:
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2010              		.loc 1 2632 0
 2011 0002 3A4B     		ldr	r3, .L201
 2012 0004 1B68     		ldr	r3, [r3]
 2013 0006 002B     		cmp	r3, #0
 2014 0008 64D1     		bne	.L181
 2015              	.LBB132:
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2016              		.loc 1 2636 0
 2017 000a 394B     		ldr	r3, .L201+4
 2018 000c 1D68     		ldr	r5, [r3]
 2019 000e 0135     		adds	r5, r5, #1
 2020              	.LVL168:
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2021              		.loc 1 2640 0
 2022 0010 1D60     		str	r5, [r3]
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2023              		.loc 1 2642 0
ARM GAS  /tmp/ccz3PNNG.s 			page 132


 2024 0012 C5B9     		cbnz	r5, .L182
 2025              	.LBB133:
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2026              		.loc 1 2644 0
 2027 0014 374B     		ldr	r3, .L201+8
 2028 0016 1B68     		ldr	r3, [r3]
 2029 0018 1B68     		ldr	r3, [r3]
 2030 001a 43B1     		cbz	r3, .L183
 2031              	.LBB134:
 2032              	.LBB135:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2033              		.loc 2 195 0
 2034              		.syntax unified
 2035              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2036 001c 4FF05003 			mov r3, #80												
 2037 0020 83F31188 		msr basepri, r3											
 2038 0024 BFF36F8F 		isb														
 2039 0028 BFF34F8F 		dsb														
 2040              	
 2041              	@ 0 "" 2
 2042              	.LVL169:
 2043              		.thumb
 2044              		.syntax unified
 2045              	.L184:
 2046 002c FEE7     		b	.L184
 2047              	.L183:
 2048              	.LBE135:
 2049              	.LBE134:
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2050              		.loc 1 2644 0 discriminator 2
 2051 002e 314A     		ldr	r2, .L201+8
 2052 0030 1168     		ldr	r1, [r2]
 2053              	.LVL170:
 2054 0032 314B     		ldr	r3, .L201+12
 2055 0034 1868     		ldr	r0, [r3]
 2056 0036 1060     		str	r0, [r2]
 2057 0038 1960     		str	r1, [r3]
 2058 003a 304A     		ldr	r2, .L201+16
 2059 003c 1368     		ldr	r3, [r2]
 2060 003e 0133     		adds	r3, r3, #1
 2061 0040 1360     		str	r3, [r2]
 2062 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2063              	.LVL171:
 2064              	.L182:
 2065              	.LBE133:
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2066              		.loc 1 2655 0
 2067 0046 2E4B     		ldr	r3, .L201+20
 2068 0048 1B68     		ldr	r3, [r3]
 2069 004a 9D42     		cmp	r5, r3
 2070 004c 38D2     		bcs	.L194
 2071              	.LBE132:
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2072              		.loc 1 2626 0
 2073 004e 0024     		movs	r4, #0
 2074              	.LVL172:
 2075              	.L186:
ARM GAS  /tmp/ccz3PNNG.s 			page 133


 2076              	.LBB136:
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2077              		.loc 1 2738 0
 2078 0050 2C4B     		ldr	r3, .L201+24
 2079 0052 1B68     		ldr	r3, [r3]
 2080 0054 DB6A     		ldr	r3, [r3, #44]
 2081 0056 03EB8303 		add	r3, r3, r3, lsl #2
 2082 005a 9A00     		lsls	r2, r3, #2
 2083 005c 2A4B     		ldr	r3, .L201+28
 2084 005e 9B58     		ldr	r3, [r3, r2]
 2085 0060 012B     		cmp	r3, #1
 2086 0062 3CD9     		bls	.L192
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2087              		.loc 1 2740 0
 2088 0064 0124     		movs	r4, #1
 2089              	.LVL173:
 2090 0066 3AE0     		b	.L192
 2091              	.LVL174:
 2092              	.L195:
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 2093              		.loc 1 2721 0
 2094 0068 0124     		movs	r4, #1
 2095              	.LVL175:
 2096              	.L185:
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2097              		.loc 1 2659 0
 2098 006a 224B     		ldr	r3, .L201+8
 2099 006c 1B68     		ldr	r3, [r3]
 2100 006e 1B68     		ldr	r3, [r3]
 2101 0070 43B3     		cbz	r3, .L199
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2102              		.loc 1 2675 0
 2103 0072 204B     		ldr	r3, .L201+8
 2104 0074 1B68     		ldr	r3, [r3]
 2105 0076 DB68     		ldr	r3, [r3, #12]
 2106 0078 DE68     		ldr	r6, [r3, #12]
 2107              	.LVL176:
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2108              		.loc 1 2676 0
 2109 007a 7368     		ldr	r3, [r6, #4]
 2110              	.LVL177:
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2111              		.loc 1 2678 0
 2112 007c 9D42     		cmp	r5, r3
 2113 007e 26D3     		bcc	.L200
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2114              		.loc 1 2694 0
 2115 0080 371D     		adds	r7, r6, #4
 2116 0082 3846     		mov	r0, r7
 2117 0084 FFF7FEFF 		bl	uxListRemove
 2118              	.LVL178:
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2119              		.loc 1 2698 0
 2120 0088 B36A     		ldr	r3, [r6, #40]
 2121 008a 1BB1     		cbz	r3, .L189
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2122              		.loc 1 2700 0
ARM GAS  /tmp/ccz3PNNG.s 			page 134


 2123 008c 06F11800 		add	r0, r6, #24
 2124 0090 FFF7FEFF 		bl	uxListRemove
 2125              	.LVL179:
 2126              	.L189:
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2127              		.loc 1 2709 0
 2128 0094 F36A     		ldr	r3, [r6, #44]
 2129 0096 0122     		movs	r2, #1
 2130 0098 9A40     		lsls	r2, r2, r3
 2131 009a 1C49     		ldr	r1, .L201+32
 2132 009c 0868     		ldr	r0, [r1]
 2133 009e 0243     		orrs	r2, r2, r0
 2134 00a0 0A60     		str	r2, [r1]
 2135 00a2 03EB8303 		add	r3, r3, r3, lsl #2
 2136 00a6 9A00     		lsls	r2, r3, #2
 2137 00a8 3946     		mov	r1, r7
 2138 00aa 1748     		ldr	r0, .L201+28
 2139 00ac 1044     		add	r0, r0, r2
 2140 00ae FFF7FEFF 		bl	vListInsertEnd
 2141              	.LVL180:
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2142              		.loc 1 2719 0
 2143 00b2 F26A     		ldr	r2, [r6, #44]
 2144 00b4 134B     		ldr	r3, .L201+24
 2145 00b6 1B68     		ldr	r3, [r3]
 2146 00b8 DB6A     		ldr	r3, [r3, #44]
 2147 00ba 9A42     		cmp	r2, r3
 2148 00bc D4D2     		bcs	.L195
 2149 00be D4E7     		b	.L185
 2150              	.LVL181:
 2151              	.L194:
 2152 00c0 0024     		movs	r4, #0
 2153 00c2 D2E7     		b	.L185
 2154              	.LVL182:
 2155              	.L199:
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2156              		.loc 1 2666 0
 2157 00c4 4FF0FF32 		mov	r2, #-1
 2158 00c8 0D4B     		ldr	r3, .L201+20
 2159 00ca 1A60     		str	r2, [r3]
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2160              		.loc 1 2667 0
 2161 00cc C0E7     		b	.L186
 2162              	.LVL183:
 2163              	.L200:
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2164              		.loc 1 2685 0
 2165 00ce 0C4A     		ldr	r2, .L201+20
 2166 00d0 1360     		str	r3, [r2]
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2167              		.loc 1 2686 0
 2168 00d2 BDE7     		b	.L186
 2169              	.LVL184:
 2170              	.L181:
 2171              	.LBE136:
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2172              		.loc 1 2766 0
ARM GAS  /tmp/ccz3PNNG.s 			page 135


 2173 00d4 0E4A     		ldr	r2, .L201+36
 2174 00d6 1368     		ldr	r3, [r2]
 2175 00d8 0133     		adds	r3, r3, #1
 2176 00da 1360     		str	r3, [r2]
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2177              		.loc 1 2626 0
 2178 00dc 0024     		movs	r4, #0
 2179              	.LVL185:
 2180              	.L192:
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2181              		.loc 1 2779 0
 2182 00de 0D4B     		ldr	r3, .L201+40
 2183 00e0 1B68     		ldr	r3, [r3]
 2184 00e2 03B1     		cbz	r3, .L180
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2185              		.loc 1 2781 0
 2186 00e4 0124     		movs	r4, #1
 2187              	.LVL186:
 2188              	.L180:
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2189              		.loc 1 2791 0
 2190 00e6 2046     		mov	r0, r4
 2191 00e8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2192              	.L202:
 2193 00ea 00BF     		.align	2
 2194              	.L201:
 2195 00ec 00000000 		.word	.LANCHOR16
 2196 00f0 00000000 		.word	.LANCHOR15
 2197 00f4 00000000 		.word	.LANCHOR2
 2198 00f8 00000000 		.word	.LANCHOR8
 2199 00fc 00000000 		.word	.LANCHOR18
 2200 0100 00000000 		.word	.LANCHOR3
 2201 0104 00000000 		.word	.LANCHOR10
 2202 0108 00000000 		.word	.LANCHOR4
 2203 010c 00000000 		.word	.LANCHOR13
 2204 0110 00000000 		.word	.LANCHOR19
 2205 0114 00000000 		.word	.LANCHOR20
 2206              		.cfi_endproc
 2207              	.LFE25:
 2209              		.section	.text.xTaskResumeAll,"ax",%progbits
 2210              		.align	1
 2211              		.global	xTaskResumeAll
 2212              		.syntax unified
 2213              		.thumb
 2214              		.thumb_func
 2215              		.fpu softvfp
 2217              	xTaskResumeAll:
 2218              	.LFB20:
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2219              		.loc 1 2132 0
 2220              		.cfi_startproc
 2221              		@ args = 0, pretend = 0, frame = 0
 2222              		@ frame_needed = 0, uses_anonymous_args = 0
 2223 0000 38B5     		push	{r3, r4, r5, lr}
 2224              	.LCFI25:
 2225              		.cfi_def_cfa_offset 16
 2226              		.cfi_offset 3, -16
ARM GAS  /tmp/ccz3PNNG.s 			page 136


 2227              		.cfi_offset 4, -12
 2228              		.cfi_offset 5, -8
 2229              		.cfi_offset 14, -4
 2230              	.LVL187:
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2231              		.loc 1 2138 0
 2232 0002 354B     		ldr	r3, .L220
 2233 0004 1B68     		ldr	r3, [r3]
 2234 0006 43B9     		cbnz	r3, .L204
 2235              	.LBB137:
 2236              	.LBB138:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2237              		.loc 2 195 0
 2238              		.syntax unified
 2239              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2240 0008 4FF05003 			mov r3, #80												
 2241 000c 83F31188 		msr basepri, r3											
 2242 0010 BFF36F8F 		isb														
 2243 0014 BFF34F8F 		dsb														
 2244              	
 2245              	@ 0 "" 2
 2246              	.LVL188:
 2247              		.thumb
 2248              		.syntax unified
 2249              	.L205:
 2250 0018 FEE7     		b	.L205
 2251              	.L204:
 2252              	.LBE138:
 2253              	.LBE137:
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2254              		.loc 1 2145 0
 2255 001a FFF7FEFF 		bl	vPortEnterCritical
 2256              	.LVL189:
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2257              		.loc 1 2147 0
 2258 001e 2E4B     		ldr	r3, .L220
 2259 0020 1A68     		ldr	r2, [r3]
 2260 0022 013A     		subs	r2, r2, #1
 2261 0024 1A60     		str	r2, [r3]
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2262              		.loc 1 2149 0
 2263 0026 1B68     		ldr	r3, [r3]
 2264 0028 002B     		cmp	r3, #0
 2265 002a 50D1     		bne	.L214
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2266              		.loc 1 2151 0
 2267 002c 2B4B     		ldr	r3, .L220+4
 2268 002e 1B68     		ldr	r3, [r3]
 2269 0030 23B9     		cbnz	r3, .L215
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2270              		.loc 1 2134 0
 2271 0032 0024     		movs	r4, #0
 2272              	.LVL190:
 2273              	.L206:
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2274              		.loc 1 2235 0
 2275 0034 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /tmp/ccz3PNNG.s 			page 137


 2276              	.LVL191:
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2277              		.loc 1 2238 0
 2278 0038 2046     		mov	r0, r4
 2279 003a 38BD     		pop	{r3, r4, r5, pc}
 2280              	.LVL192:
 2281              	.L215:
 2282 003c 0024     		movs	r4, #0
 2283              	.LVL193:
 2284              	.L207:
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2285              		.loc 1 2155 0
 2286 003e 284B     		ldr	r3, .L220+8
 2287 0040 1B68     		ldr	r3, [r3]
 2288 0042 1BB3     		cbz	r3, .L218
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2289              		.loc 1 2157 0
 2290 0044 264B     		ldr	r3, .L220+8
 2291 0046 DB68     		ldr	r3, [r3, #12]
 2292 0048 DC68     		ldr	r4, [r3, #12]
 2293              	.LVL194:
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2294              		.loc 1 2158 0
 2295 004a 04F11800 		add	r0, r4, #24
 2296 004e FFF7FEFF 		bl	uxListRemove
 2297              	.LVL195:
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2298              		.loc 1 2159 0
 2299 0052 251D     		adds	r5, r4, #4
 2300 0054 2846     		mov	r0, r5
 2301 0056 FFF7FEFF 		bl	uxListRemove
 2302              	.LVL196:
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2303              		.loc 1 2160 0
 2304 005a E36A     		ldr	r3, [r4, #44]
 2305 005c 0122     		movs	r2, #1
 2306 005e 9A40     		lsls	r2, r2, r3
 2307 0060 2049     		ldr	r1, .L220+12
 2308 0062 0868     		ldr	r0, [r1]
 2309 0064 0243     		orrs	r2, r2, r0
 2310 0066 0A60     		str	r2, [r1]
 2311 0068 03EB8303 		add	r3, r3, r3, lsl #2
 2312 006c 9A00     		lsls	r2, r3, #2
 2313 006e 2946     		mov	r1, r5
 2314 0070 1D48     		ldr	r0, .L220+16
 2315 0072 1044     		add	r0, r0, r2
 2316 0074 FFF7FEFF 		bl	vListInsertEnd
 2317              	.LVL197:
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2318              		.loc 1 2164 0
 2319 0078 E26A     		ldr	r2, [r4, #44]
 2320 007a 1C4B     		ldr	r3, .L220+20
 2321 007c 1B68     		ldr	r3, [r3]
 2322 007e DB6A     		ldr	r3, [r3, #44]
 2323 0080 9A42     		cmp	r2, r3
 2324 0082 DCD3     		bcc	.L207
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccz3PNNG.s 			page 138


 2325              		.loc 1 2166 0
 2326 0084 0122     		movs	r2, #1
 2327 0086 1A4B     		ldr	r3, .L220+24
 2328 0088 1A60     		str	r2, [r3]
 2329 008a D8E7     		b	.L207
 2330              	.L218:
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2331              		.loc 1 2174 0
 2332 008c 0CB1     		cbz	r4, .L210
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2333              		.loc 1 2182 0
 2334 008e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2335              	.LVL198:
 2336              	.L210:
 2337              	.LBB139:
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2338              		.loc 1 2190 0
 2339 0092 184B     		ldr	r3, .L220+28
 2340 0094 1C68     		ldr	r4, [r3]
 2341              	.LVL199:
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2342              		.loc 1 2192 0
 2343 0096 74B9     		cbnz	r4, .L213
 2344              	.L211:
 2345              	.LBE139:
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2346              		.loc 1 2215 0
 2347 0098 154B     		ldr	r3, .L220+24
 2348 009a 1B68     		ldr	r3, [r3]
 2349 009c CBB1     		cbz	r3, .L216
 2350              	.LVL200:
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2351              		.loc 1 2222 0
 2352 009e 4FF08052 		mov	r2, #268435456
 2353 00a2 154B     		ldr	r3, .L220+32
 2354 00a4 1A60     		str	r2, [r3]
 2355              		.syntax unified
 2356              	@ 2222 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2357 00a6 BFF34F8F 		dsb
 2358              	@ 0 "" 2
 2359              	@ 2222 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2360 00aa BFF36F8F 		isb
 2361              	@ 0 "" 2
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2362              		.loc 1 2219 0
 2363              		.thumb
 2364              		.syntax unified
 2365 00ae 0124     		movs	r4, #1
 2366              	.LVL201:
 2367 00b0 C0E7     		b	.L206
 2368              	.LVL202:
 2369              	.L212:
 2370              	.LBB140:
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2371              		.loc 1 2205 0
 2372 00b2 013C     		subs	r4, r4, #1
 2373              	.LVL203:
ARM GAS  /tmp/ccz3PNNG.s 			page 139


 2374 00b4 07D0     		beq	.L219
 2375              	.L213:
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2376              		.loc 1 2196 0
 2377 00b6 FFF7FEFF 		bl	xTaskIncrementTick
 2378              	.LVL204:
 2379 00ba 0028     		cmp	r0, #0
 2380 00bc F9D0     		beq	.L212
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2381              		.loc 1 2198 0
 2382 00be 0122     		movs	r2, #1
 2383 00c0 0B4B     		ldr	r3, .L220+24
 2384 00c2 1A60     		str	r2, [r3]
 2385 00c4 F5E7     		b	.L212
 2386              	.L219:
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2387              		.loc 1 2207 0
 2388 00c6 0022     		movs	r2, #0
 2389 00c8 0A4B     		ldr	r3, .L220+28
 2390 00ca 1A60     		str	r2, [r3]
 2391 00cc E4E7     		b	.L211
 2392              	.LVL205:
 2393              	.L214:
 2394              	.LBE140:
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2395              		.loc 1 2134 0
 2396 00ce 0024     		movs	r4, #0
 2397 00d0 B0E7     		b	.L206
 2398              	.LVL206:
 2399              	.L216:
 2400 00d2 0024     		movs	r4, #0
 2401              	.LVL207:
 2402 00d4 AEE7     		b	.L206
 2403              	.L221:
 2404 00d6 00BF     		.align	2
 2405              	.L220:
 2406 00d8 00000000 		.word	.LANCHOR16
 2407 00dc 00000000 		.word	.LANCHOR9
 2408 00e0 00000000 		.word	.LANCHOR1
 2409 00e4 00000000 		.word	.LANCHOR13
 2410 00e8 00000000 		.word	.LANCHOR4
 2411 00ec 00000000 		.word	.LANCHOR10
 2412 00f0 00000000 		.word	.LANCHOR20
 2413 00f4 00000000 		.word	.LANCHOR19
 2414 00f8 04ED00E0 		.word	-536810236
 2415              		.cfi_endproc
 2416              	.LFE20:
 2418              		.section	.text.vTaskDelay,"ax",%progbits
 2419              		.align	1
 2420              		.global	vTaskDelay
 2421              		.syntax unified
 2422              		.thumb
 2423              		.thumb_func
 2424              		.fpu softvfp
 2426              	vTaskDelay:
 2427              	.LFB9:
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
ARM GAS  /tmp/ccz3PNNG.s 			page 140


 2428              		.loc 1 1292 0
 2429              		.cfi_startproc
 2430              		@ args = 0, pretend = 0, frame = 0
 2431              		@ frame_needed = 0, uses_anonymous_args = 0
 2432              	.LVL208:
 2433 0000 10B5     		push	{r4, lr}
 2434              	.LCFI26:
 2435              		.cfi_def_cfa_offset 8
 2436              		.cfi_offset 4, -8
 2437              		.cfi_offset 14, -4
 2438              	.LVL209:
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2439              		.loc 1 1296 0
 2440 0002 A8B1     		cbz	r0, .L227
 2441 0004 0446     		mov	r4, r0
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2442              		.loc 1 1298 0
 2443 0006 104B     		ldr	r3, .L229
 2444 0008 1B68     		ldr	r3, [r3]
 2445 000a 43B1     		cbz	r3, .L224
 2446              	.LBB141:
 2447              	.LBB142:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2448              		.loc 2 195 0
 2449              		.syntax unified
 2450              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2451 000c 4FF05003 			mov r3, #80												
 2452 0010 83F31188 		msr basepri, r3											
 2453 0014 BFF36F8F 		isb														
 2454 0018 BFF34F8F 		dsb														
 2455              	
 2456              	@ 0 "" 2
 2457              	.LVL210:
 2458              		.thumb
 2459              		.syntax unified
 2460              	.L225:
 2461 001c FEE7     		b	.L225
 2462              	.L224:
 2463              	.LBE142:
 2464              	.LBE141:
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2465              		.loc 1 1299 0
 2466 001e FFF7FEFF 		bl	vTaskSuspendAll
 2467              	.LVL211:
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2468              		.loc 1 1310 0
 2469 0022 0021     		movs	r1, #0
 2470 0024 2046     		mov	r0, r4
 2471 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2472              	.LVL212:
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2473              		.loc 1 1312 0
 2474 002a FFF7FEFF 		bl	xTaskResumeAll
 2475              	.LVL213:
 2476 002e 00E0     		b	.L223
 2477              	.LVL214:
 2478              	.L227:
ARM GAS  /tmp/ccz3PNNG.s 			page 141


1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2479              		.loc 1 1293 0
 2480 0030 0020     		movs	r0, #0
 2481              	.LVL215:
 2482              	.L223:
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2483              		.loc 1 1321 0
 2484 0032 38B9     		cbnz	r0, .L222
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2485              		.loc 1 1323 0
 2486 0034 4FF08052 		mov	r2, #268435456
 2487 0038 044B     		ldr	r3, .L229+4
 2488 003a 1A60     		str	r2, [r3]
 2489              		.syntax unified
 2490              	@ 1323 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2491 003c BFF34F8F 		dsb
 2492              	@ 0 "" 2
 2493              	@ 1323 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2494 0040 BFF36F8F 		isb
 2495              	@ 0 "" 2
 2496              		.thumb
 2497              		.syntax unified
 2498              	.L222:
 2499 0044 10BD     		pop	{r4, pc}
 2500              	.L230:
 2501 0046 00BF     		.align	2
 2502              	.L229:
 2503 0048 00000000 		.word	.LANCHOR16
 2504 004c 04ED00E0 		.word	-536810236
 2505              		.cfi_endproc
 2506              	.LFE9:
 2508              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2509              		.align	1
 2510              		.global	vTaskSwitchContext
 2511              		.syntax unified
 2512              		.thumb
 2513              		.thumb_func
 2514              		.fpu softvfp
 2516              	vTaskSwitchContext:
 2517              	.LFB26:
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2518              		.loc 1 2887 0
 2519              		.cfi_startproc
 2520              		@ args = 0, pretend = 0, frame = 0
 2521              		@ frame_needed = 0, uses_anonymous_args = 0
 2522              		@ link register save eliminated.
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2523              		.loc 1 2888 0
 2524 0000 204B     		ldr	r3, .L242
 2525 0002 1B68     		ldr	r3, [r3]
 2526 0004 C3B9     		cbnz	r3, .L240
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2527              		.loc 1 2896 0
 2528 0006 0022     		movs	r2, #0
 2529 0008 1F4B     		ldr	r3, .L242+4
 2530 000a 1A60     		str	r2, [r3]
 2531              	.LBB143:
ARM GAS  /tmp/ccz3PNNG.s 			page 142


2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2532              		.loc 1 2941 0
 2533 000c 1F4B     		ldr	r3, .L242+8
 2534 000e 1B68     		ldr	r3, [r3]
 2535              	.LVL216:
 2536              	.LBB144:
 2537              	.LBB145:
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 2538              		.loc 2 134 0
 2539              		.syntax unified
 2540              	@ 134 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2541 0010 B3FA83F3 		clz r3, r3
 2542              	@ 0 "" 2
 2543              	.LVL217:
 2544              		.thumb
 2545              		.syntax unified
 2546 0014 DBB2     		uxtb	r3, r3
 2547              	.LBE145:
 2548              	.LBE144:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2549              		.loc 1 2941 0
 2550 0016 C3F11F03 		rsb	r3, r3, #31
 2551              	.LVL218:
 2552 001a 03EB8301 		add	r1, r3, r3, lsl #2
 2553 001e 8A00     		lsls	r2, r1, #2
 2554 0020 1B49     		ldr	r1, .L242+12
 2555 0022 8A58     		ldr	r2, [r1, r2]
 2556 0024 62B9     		cbnz	r2, .L234
 2557              	.LBB146:
 2558              	.LBB147:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2559              		.loc 2 195 0
 2560              		.syntax unified
 2561              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2562 0026 4FF05003 			mov r3, #80												
 2563 002a 83F31188 		msr basepri, r3											
 2564 002e BFF36F8F 		isb														
 2565 0032 BFF34F8F 		dsb														
 2566              	
 2567              	@ 0 "" 2
 2568              	.LVL219:
 2569              		.thumb
 2570              		.syntax unified
 2571              	.L235:
 2572 0036 FEE7     		b	.L235
 2573              	.L240:
 2574              	.LBE147:
 2575              	.LBE146:
 2576              	.LBE143:
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2577              		.loc 1 2892 0
 2578 0038 0122     		movs	r2, #1
 2579 003a 134B     		ldr	r3, .L242+4
 2580 003c 1A60     		str	r2, [r3]
 2581 003e 7047     		bx	lr
 2582              	.LVL220:
 2583              	.L234:
ARM GAS  /tmp/ccz3PNNG.s 			page 143


2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2584              		.loc 1 2887 0 discriminator 2
 2585 0040 10B4     		push	{r4}
 2586              	.LCFI27:
 2587              		.cfi_def_cfa_offset 4
 2588              		.cfi_offset 4, -4
 2589              	.LVL221:
 2590              	.LBB150:
 2591              	.LBB148:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2592              		.loc 1 2941 0 discriminator 2
 2593 0042 1348     		ldr	r0, .L242+12
 2594 0044 9A00     		lsls	r2, r3, #2
 2595 0046 D418     		adds	r4, r2, r3
 2596 0048 A100     		lsls	r1, r4, #2
 2597 004a 0144     		add	r1, r1, r0
 2598 004c 4C68     		ldr	r4, [r1, #4]
 2599 004e 6468     		ldr	r4, [r4, #4]
 2600 0050 4C60     		str	r4, [r1, #4]
 2601 0052 1A44     		add	r2, r2, r3
 2602 0054 9100     		lsls	r1, r2, #2
 2603 0056 0831     		adds	r1, r1, #8
 2604 0058 0844     		add	r0, r0, r1
 2605 005a 8442     		cmp	r4, r0
 2606 005c 0AD0     		beq	.L241
 2607              	.L236:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2608              		.loc 1 2941 0 is_stmt 0 discriminator 5
 2609 005e 03EB8303 		add	r3, r3, r3, lsl #2
 2610              	.LVL222:
 2611 0062 9A00     		lsls	r2, r3, #2
 2612 0064 0A4B     		ldr	r3, .L242+12
 2613 0066 1344     		add	r3, r3, r2
 2614 0068 5B68     		ldr	r3, [r3, #4]
 2615 006a DA68     		ldr	r2, [r3, #12]
 2616 006c 094B     		ldr	r3, .L242+16
 2617 006e 1A60     		str	r2, [r3]
 2618              	.LBE148:
 2619              	.LBE150:
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2620              		.loc 1 2959 0 is_stmt 1 discriminator 5
 2621 0070 10BC     		pop	{r4}
 2622              	.LCFI28:
 2623              		.cfi_remember_state
 2624              		.cfi_restore 4
 2625              		.cfi_def_cfa_offset 0
 2626 0072 7047     		bx	lr
 2627              	.LVL223:
 2628              	.L241:
 2629              	.LCFI29:
 2630              		.cfi_restore_state
 2631              	.LBB151:
 2632              	.LBB149:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2633              		.loc 1 2941 0 discriminator 3
 2634 0074 6068     		ldr	r0, [r4, #4]
 2635 0076 03EB8302 		add	r2, r3, r3, lsl #2
ARM GAS  /tmp/ccz3PNNG.s 			page 144


 2636 007a 9100     		lsls	r1, r2, #2
 2637 007c 044A     		ldr	r2, .L242+12
 2638 007e 0A44     		add	r2, r2, r1
 2639 0080 5060     		str	r0, [r2, #4]
 2640 0082 ECE7     		b	.L236
 2641              	.L243:
 2642              		.align	2
 2643              	.L242:
 2644 0084 00000000 		.word	.LANCHOR16
 2645 0088 00000000 		.word	.LANCHOR20
 2646 008c 00000000 		.word	.LANCHOR13
 2647 0090 00000000 		.word	.LANCHOR4
 2648 0094 00000000 		.word	.LANCHOR10
 2649              	.LBE149:
 2650              	.LBE151:
 2651              		.cfi_endproc
 2652              	.LFE26:
 2654              		.section	.text.vTaskSuspend,"ax",%progbits
 2655              		.align	1
 2656              		.global	vTaskSuspend
 2657              		.syntax unified
 2658              		.thumb
 2659              		.thumb_func
 2660              		.fpu softvfp
 2662              	vTaskSuspend:
 2663              	.LFB13:
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2664              		.loc 1 1655 0
 2665              		.cfi_startproc
 2666              		@ args = 0, pretend = 0, frame = 0
 2667              		@ frame_needed = 0, uses_anonymous_args = 0
 2668              	.LVL224:
 2669 0000 38B5     		push	{r3, r4, r5, lr}
 2670              	.LCFI30:
 2671              		.cfi_def_cfa_offset 16
 2672              		.cfi_offset 3, -16
 2673              		.cfi_offset 4, -12
 2674              		.cfi_offset 5, -8
 2675              		.cfi_offset 14, -4
 2676 0002 0446     		mov	r4, r0
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2677              		.loc 1 1658 0
 2678 0004 FFF7FEFF 		bl	vPortEnterCritical
 2679              	.LVL225:
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2680              		.loc 1 1662 0
 2681 0008 64B3     		cbz	r4, .L256
 2682              	.LVL226:
 2683              	.L245:
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2684              		.loc 1 1668 0 discriminator 4
 2685 000a 251D     		adds	r5, r4, #4
 2686 000c 2846     		mov	r0, r5
 2687 000e FFF7FEFF 		bl	uxListRemove
 2688              	.LVL227:
 2689 0012 70B9     		cbnz	r0, .L246
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccz3PNNG.s 			page 145


 2690              		.loc 1 1670 0
 2691 0014 E26A     		ldr	r2, [r4, #44]
 2692 0016 02EB8201 		add	r1, r2, r2, lsl #2
 2693 001a 8B00     		lsls	r3, r1, #2
 2694 001c 2B49     		ldr	r1, .L260
 2695 001e CB58     		ldr	r3, [r1, r3]
 2696 0020 3BB9     		cbnz	r3, .L246
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2697              		.loc 1 1670 0 is_stmt 0 discriminator 1
 2698 0022 0123     		movs	r3, #1
 2699 0024 03FA02F2 		lsl	r2, r3, r2
 2700 0028 2949     		ldr	r1, .L260+4
 2701 002a 0B68     		ldr	r3, [r1]
 2702 002c 23EA0203 		bic	r3, r3, r2
 2703 0030 0B60     		str	r3, [r1]
 2704              	.L246:
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2705              		.loc 1 1678 0 is_stmt 1
 2706 0032 A36A     		ldr	r3, [r4, #40]
 2707 0034 1BB1     		cbz	r3, .L247
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2708              		.loc 1 1680 0
 2709 0036 04F11800 		add	r0, r4, #24
 2710 003a FFF7FEFF 		bl	uxListRemove
 2711              	.LVL228:
 2712              	.L247:
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2713              		.loc 1 1687 0
 2714 003e 2946     		mov	r1, r5
 2715 0040 2448     		ldr	r0, .L260+8
 2716 0042 FFF7FEFF 		bl	vListInsertEnd
 2717              	.LVL229:
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2718              		.loc 1 1691 0
 2719 0046 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 2720 004a DBB2     		uxtb	r3, r3
 2721 004c 012B     		cmp	r3, #1
 2722 004e 0CD0     		beq	.L257
 2723              	.L248:
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2724              		.loc 1 1700 0
 2725 0050 FFF7FEFF 		bl	vPortExitCritical
 2726              	.LVL230:
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2727              		.loc 1 1702 0
 2728 0054 204B     		ldr	r3, .L260+12
 2729 0056 1B68     		ldr	r3, [r3]
 2730 0058 5BB9     		cbnz	r3, .L258
 2731              	.L249:
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2732              		.loc 1 1717 0
 2733 005a 204B     		ldr	r3, .L260+16
 2734 005c 1B68     		ldr	r3, [r3]
 2735 005e 9C42     		cmp	r4, r3
 2736 0060 0ED0     		beq	.L259
 2737              	.L244:
 2738 0062 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /tmp/ccz3PNNG.s 			page 146


 2739              	.LVL231:
 2740              	.L256:
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2741              		.loc 1 1662 0 discriminator 1
 2742 0064 1D4B     		ldr	r3, .L260+16
 2743 0066 1C68     		ldr	r4, [r3]
 2744              	.LVL232:
 2745 0068 CFE7     		b	.L245
 2746              	.LVL233:
 2747              	.L257:
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2748              		.loc 1 1695 0
 2749 006a 0023     		movs	r3, #0
 2750 006c 84F85030 		strb	r3, [r4, #80]
 2751 0070 EEE7     		b	.L248
 2752              	.L258:
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2753              		.loc 1 1706 0
 2754 0072 FFF7FEFF 		bl	vPortEnterCritical
 2755              	.LVL234:
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2756              		.loc 1 1708 0
 2757 0076 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2758              	.LVL235:
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2759              		.loc 1 1710 0
 2760 007a FFF7FEFF 		bl	vPortExitCritical
 2761              	.LVL236:
 2762 007e ECE7     		b	.L249
 2763              	.L259:
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2764              		.loc 1 1719 0
 2765 0080 154B     		ldr	r3, .L260+12
 2766 0082 1B68     		ldr	r3, [r3]
 2767 0084 A3B1     		cbz	r3, .L251
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2768              		.loc 1 1722 0
 2769 0086 164B     		ldr	r3, .L260+20
 2770 0088 1B68     		ldr	r3, [r3]
 2771 008a 43B1     		cbz	r3, .L252
 2772              	.LBB152:
 2773              	.LBB153:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2774              		.loc 2 195 0
 2775              		.syntax unified
 2776              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2777 008c 4FF05003 			mov r3, #80												
 2778 0090 83F31188 		msr basepri, r3											
 2779 0094 BFF36F8F 		isb														
 2780 0098 BFF34F8F 		dsb														
 2781              	
 2782              	@ 0 "" 2
 2783              	.LVL237:
 2784              		.thumb
 2785              		.syntax unified
 2786              	.L253:
 2787 009c FEE7     		b	.L253
ARM GAS  /tmp/ccz3PNNG.s 			page 147


 2788              	.L252:
 2789              	.LBE153:
 2790              	.LBE152:
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2791              		.loc 1 1723 0
 2792 009e 4FF08052 		mov	r2, #268435456
 2793 00a2 104B     		ldr	r3, .L260+24
 2794 00a4 1A60     		str	r2, [r3]
 2795              		.syntax unified
 2796              	@ 1723 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2797 00a6 BFF34F8F 		dsb
 2798              	@ 0 "" 2
 2799              	@ 1723 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2800 00aa BFF36F8F 		isb
 2801              	@ 0 "" 2
 2802              		.thumb
 2803              		.syntax unified
 2804 00ae 38BD     		pop	{r3, r4, r5, pc}
 2805              	.LVL238:
 2806              	.L251:
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2807              		.loc 1 1730 0
 2808 00b0 084B     		ldr	r3, .L260+8
 2809 00b2 1A68     		ldr	r2, [r3]
 2810 00b4 0C4B     		ldr	r3, .L260+28
 2811 00b6 1B68     		ldr	r3, [r3]
 2812 00b8 9A42     		cmp	r2, r3
 2813 00ba 03D1     		bne	.L254
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2814              		.loc 1 1736 0
 2815 00bc 0022     		movs	r2, #0
 2816 00be 074B     		ldr	r3, .L260+16
 2817 00c0 1A60     		str	r2, [r3]
 2818 00c2 38BD     		pop	{r3, r4, r5, pc}
 2819              	.LVL239:
 2820              	.L254:
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2821              		.loc 1 1740 0
 2822 00c4 FFF7FEFF 		bl	vTaskSwitchContext
 2823              	.LVL240:
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2824              		.loc 1 1748 0
 2825 00c8 CBE7     		b	.L244
 2826              	.L261:
 2827 00ca 00BF     		.align	2
 2828              	.L260:
 2829 00cc 00000000 		.word	.LANCHOR4
 2830 00d0 00000000 		.word	.LANCHOR13
 2831 00d4 00000000 		.word	.LANCHOR0
 2832 00d8 00000000 		.word	.LANCHOR11
 2833 00dc 00000000 		.word	.LANCHOR10
 2834 00e0 00000000 		.word	.LANCHOR16
 2835 00e4 04ED00E0 		.word	-536810236
 2836 00e8 00000000 		.word	.LANCHOR9
 2837              		.cfi_endproc
 2838              	.LFE13:
 2840              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
ARM GAS  /tmp/ccz3PNNG.s 			page 148


 2841              		.align	1
 2842              		.global	vTaskPlaceOnEventList
 2843              		.syntax unified
 2844              		.thumb
 2845              		.thumb_func
 2846              		.fpu softvfp
 2848              	vTaskPlaceOnEventList:
 2849              	.LFB27:
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2850              		.loc 1 2963 0
 2851              		.cfi_startproc
 2852              		@ args = 0, pretend = 0, frame = 0
 2853              		@ frame_needed = 0, uses_anonymous_args = 0
 2854              	.LVL241:
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2855              		.loc 1 2964 0
 2856 0000 40B9     		cbnz	r0, .L263
 2857              	.LBB154:
 2858              	.LBB155:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2859              		.loc 2 195 0
 2860              		.syntax unified
 2861              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2862 0002 4FF05003 			mov r3, #80												
 2863 0006 83F31188 		msr basepri, r3											
 2864 000a BFF36F8F 		isb														
 2865 000e BFF34F8F 		dsb														
 2866              	
 2867              	@ 0 "" 2
 2868              	.LVL242:
 2869              		.thumb
 2870              		.syntax unified
 2871              	.L264:
 2872 0012 FEE7     		b	.L264
 2873              	.L263:
 2874              	.LBE155:
 2875              	.LBE154:
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2876              		.loc 1 2963 0
 2877 0014 10B5     		push	{r4, lr}
 2878              	.LCFI31:
 2879              		.cfi_def_cfa_offset 8
 2880              		.cfi_offset 4, -8
 2881              		.cfi_offset 14, -4
 2882 0016 0C46     		mov	r4, r1
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2883              		.loc 1 2973 0
 2884 0018 044B     		ldr	r3, .L267
 2885 001a 1968     		ldr	r1, [r3]
 2886              	.LVL243:
 2887 001c 1831     		adds	r1, r1, #24
 2888 001e FFF7FEFF 		bl	vListInsert
 2889              	.LVL244:
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2890              		.loc 1 2975 0
 2891 0022 0121     		movs	r1, #1
 2892 0024 2046     		mov	r0, r4
ARM GAS  /tmp/ccz3PNNG.s 			page 149


 2893 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2894              	.LVL245:
 2895 002a 10BD     		pop	{r4, pc}
 2896              	.LVL246:
 2897              	.L268:
 2898              		.align	2
 2899              	.L267:
 2900 002c 00000000 		.word	.LANCHOR10
 2901              		.cfi_endproc
 2902              	.LFE27:
 2904              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2905              		.align	1
 2906              		.global	vTaskPlaceOnUnorderedEventList
 2907              		.syntax unified
 2908              		.thumb
 2909              		.thumb_func
 2910              		.fpu softvfp
 2912              	vTaskPlaceOnUnorderedEventList:
 2913              	.LFB28:
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2914              		.loc 1 2980 0
 2915              		.cfi_startproc
 2916              		@ args = 0, pretend = 0, frame = 0
 2917              		@ frame_needed = 0, uses_anonymous_args = 0
 2918              	.LVL247:
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2919              		.loc 1 2981 0
 2920 0000 60B1     		cbz	r0, .L276
 2921 0002 0346     		mov	r3, r0
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2922              		.loc 1 2985 0
 2923 0004 1348     		ldr	r0, .L277
 2924              	.LVL248:
 2925 0006 0068     		ldr	r0, [r0]
 2926 0008 88B9     		cbnz	r0, .L272
 2927              	.LBB156:
 2928              	.LBB157:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2929              		.loc 2 195 0
 2930              		.syntax unified
 2931              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2932 000a 4FF05003 			mov r3, #80												
 2933 000e 83F31188 		msr basepri, r3											
 2934 0012 BFF36F8F 		isb														
 2935 0016 BFF34F8F 		dsb														
 2936              	
 2937              	@ 0 "" 2
 2938              	.LVL249:
 2939              		.thumb
 2940              		.syntax unified
 2941              	.L273:
 2942 001a FEE7     		b	.L273
 2943              	.LVL250:
 2944              	.L276:
 2945              	.LBE157:
 2946              	.LBE156:
 2947              	.LBB158:
ARM GAS  /tmp/ccz3PNNG.s 			page 150


 2948              	.LBB159:
 2949              		.syntax unified
 2950              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2951 001c 4FF05003 			mov r3, #80												
 2952 0020 83F31188 		msr basepri, r3											
 2953 0024 BFF36F8F 		isb														
 2954 0028 BFF34F8F 		dsb														
 2955              	
 2956              	@ 0 "" 2
 2957              	.LVL251:
 2958              		.thumb
 2959              		.syntax unified
 2960              	.L271:
 2961 002c FEE7     		b	.L271
 2962              	.LVL252:
 2963              	.L272:
 2964              	.LBE159:
 2965              	.LBE158:
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2966              		.loc 1 2980 0
 2967 002e 10B5     		push	{r4, lr}
 2968              	.LCFI32:
 2969              		.cfi_def_cfa_offset 8
 2970              		.cfi_offset 4, -8
 2971              		.cfi_offset 14, -4
 2972 0030 1846     		mov	r0, r3
 2973 0032 1446     		mov	r4, r2
 2974 0034 0B46     		mov	r3, r1
 2975              	.LVL253:
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2976              		.loc 1 2990 0
 2977 0036 084A     		ldr	r2, .L277+4
 2978              	.LVL254:
 2979 0038 1168     		ldr	r1, [r2]
 2980              	.LVL255:
 2981 003a 43F00043 		orr	r3, r3, #-2147483648
 2982              	.LVL256:
 2983 003e 8B61     		str	r3, [r1, #24]
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2984              		.loc 1 2997 0
 2985 0040 1168     		ldr	r1, [r2]
 2986 0042 1831     		adds	r1, r1, #24
 2987 0044 FFF7FEFF 		bl	vListInsertEnd
 2988              	.LVL257:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2989              		.loc 1 2999 0
 2990 0048 0121     		movs	r1, #1
 2991 004a 2046     		mov	r0, r4
 2992 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2993              	.LVL258:
 2994 0050 10BD     		pop	{r4, pc}
 2995              	.LVL259:
 2996              	.L278:
 2997 0052 00BF     		.align	2
 2998              	.L277:
 2999 0054 00000000 		.word	.LANCHOR16
 3000 0058 00000000 		.word	.LANCHOR10
ARM GAS  /tmp/ccz3PNNG.s 			page 151


 3001              		.cfi_endproc
 3002              	.LFE28:
 3004              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3005              		.align	1
 3006              		.global	xTaskRemoveFromEventList
 3007              		.syntax unified
 3008              		.thumb
 3009              		.thumb_func
 3010              		.fpu softvfp
 3012              	xTaskRemoveFromEventList:
 3013              	.LFB29:
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3014              		.loc 1 3037 0
 3015              		.cfi_startproc
 3016              		@ args = 0, pretend = 0, frame = 0
 3017              		@ frame_needed = 0, uses_anonymous_args = 0
 3018              	.LVL260:
 3019 0000 38B5     		push	{r3, r4, r5, lr}
 3020              	.LCFI33:
 3021              		.cfi_def_cfa_offset 16
 3022              		.cfi_offset 3, -16
 3023              		.cfi_offset 4, -12
 3024              		.cfi_offset 5, -8
 3025              		.cfi_offset 14, -4
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3026              		.loc 1 3054 0
 3027 0002 C368     		ldr	r3, [r0, #12]
 3028 0004 DC68     		ldr	r4, [r3, #12]
 3029              	.LVL261:
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3030              		.loc 1 3055 0
 3031 0006 24B3     		cbz	r4, .L287
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3032              		.loc 1 3056 0
 3033 0008 04F11805 		add	r5, r4, #24
 3034 000c 2846     		mov	r0, r5
 3035              	.LVL262:
 3036 000e FFF7FEFF 		bl	uxListRemove
 3037              	.LVL263:
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3038              		.loc 1 3058 0
 3039 0012 184B     		ldr	r3, .L288
 3040 0014 1B68     		ldr	r3, [r3]
 3041 0016 2BBB     		cbnz	r3, .L282
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3042              		.loc 1 3060 0
 3043 0018 251D     		adds	r5, r4, #4
 3044 001a 2846     		mov	r0, r5
 3045 001c FFF7FEFF 		bl	uxListRemove
 3046              	.LVL264:
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3047              		.loc 1 3061 0
 3048 0020 E36A     		ldr	r3, [r4, #44]
 3049 0022 0122     		movs	r2, #1
 3050 0024 9A40     		lsls	r2, r2, r3
 3051 0026 1449     		ldr	r1, .L288+4
 3052 0028 0868     		ldr	r0, [r1]
ARM GAS  /tmp/ccz3PNNG.s 			page 152


 3053 002a 0243     		orrs	r2, r2, r0
 3054 002c 0A60     		str	r2, [r1]
 3055 002e 03EB8303 		add	r3, r3, r3, lsl #2
 3056 0032 9A00     		lsls	r2, r3, #2
 3057 0034 2946     		mov	r1, r5
 3058 0036 1148     		ldr	r0, .L288+8
 3059 0038 1044     		add	r0, r0, r2
 3060 003a FFF7FEFF 		bl	vListInsertEnd
 3061              	.LVL265:
 3062              	.L283:
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3063              		.loc 1 3070 0
 3064 003e E26A     		ldr	r2, [r4, #44]
 3065 0040 0F4B     		ldr	r3, .L288+12
 3066 0042 1B68     		ldr	r3, [r3]
 3067 0044 DB6A     		ldr	r3, [r3, #44]
 3068 0046 9A42     		cmp	r2, r3
 3069 0048 11D9     		bls	.L285
 3070              	.LVL266:
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3071              		.loc 1 3079 0
 3072 004a 0120     		movs	r0, #1
 3073 004c 0D4B     		ldr	r3, .L288+16
 3074 004e 1860     		str	r0, [r3]
 3075 0050 38BD     		pop	{r3, r4, r5, pc}
 3076              	.LVL267:
 3077              	.L287:
 3078              	.LBB160:
 3079              	.LBB161:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3080              		.loc 2 195 0
 3081              		.syntax unified
 3082              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3083 0052 4FF05003 			mov r3, #80												
 3084 0056 83F31188 		msr basepri, r3											
 3085 005a BFF36F8F 		isb														
 3086 005e BFF34F8F 		dsb														
 3087              	
 3088              	@ 0 "" 2
 3089              	.LVL268:
 3090              		.thumb
 3091              		.syntax unified
 3092              	.L281:
 3093 0062 FEE7     		b	.L281
 3094              	.LVL269:
 3095              	.L282:
 3096              	.LBE161:
 3097              	.LBE160:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3098              		.loc 1 3067 0
 3099 0064 2946     		mov	r1, r5
 3100 0066 0848     		ldr	r0, .L288+20
 3101 0068 FFF7FEFF 		bl	vListInsertEnd
 3102              	.LVL270:
 3103 006c E7E7     		b	.L283
 3104              	.L285:
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccz3PNNG.s 			page 153


 3105              		.loc 1 3083 0
 3106 006e 0020     		movs	r0, #0
 3107              	.LVL271:
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3108              		.loc 1 3101 0
 3109 0070 38BD     		pop	{r3, r4, r5, pc}
 3110              	.LVL272:
 3111              	.L289:
 3112 0072 00BF     		.align	2
 3113              	.L288:
 3114 0074 00000000 		.word	.LANCHOR16
 3115 0078 00000000 		.word	.LANCHOR13
 3116 007c 00000000 		.word	.LANCHOR4
 3117 0080 00000000 		.word	.LANCHOR10
 3118 0084 00000000 		.word	.LANCHOR20
 3119 0088 00000000 		.word	.LANCHOR1
 3120              		.cfi_endproc
 3121              	.LFE29:
 3123              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3124              		.align	1
 3125              		.global	vTaskRemoveFromUnorderedEventList
 3126              		.syntax unified
 3127              		.thumb
 3128              		.thumb_func
 3129              		.fpu softvfp
 3131              	vTaskRemoveFromUnorderedEventList:
 3132              	.LFB30:
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3133              		.loc 1 3105 0
 3134              		.cfi_startproc
 3135              		@ args = 0, pretend = 0, frame = 0
 3136              		@ frame_needed = 0, uses_anonymous_args = 0
 3137              	.LVL273:
 3138 0000 38B5     		push	{r3, r4, r5, lr}
 3139              	.LCFI34:
 3140              		.cfi_def_cfa_offset 16
 3141              		.cfi_offset 3, -16
 3142              		.cfi_offset 4, -12
 3143              		.cfi_offset 5, -8
 3144              		.cfi_offset 14, -4
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3145              		.loc 1 3110 0
 3146 0002 1C4B     		ldr	r3, .L298
 3147 0004 1B68     		ldr	r3, [r3]
 3148 0006 43B9     		cbnz	r3, .L291
 3149              	.LBB162:
 3150              	.LBB163:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3151              		.loc 2 195 0
 3152              		.syntax unified
 3153              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3154 0008 4FF05003 			mov r3, #80												
 3155 000c 83F31188 		msr basepri, r3											
 3156 0010 BFF36F8F 		isb														
 3157 0014 BFF34F8F 		dsb														
 3158              	
 3159              	@ 0 "" 2
ARM GAS  /tmp/ccz3PNNG.s 			page 154


 3160              	.LVL274:
 3161              		.thumb
 3162              		.syntax unified
 3163              	.L292:
 3164 0018 FEE7     		b	.L292
 3165              	.L291:
 3166              	.LBE163:
 3167              	.LBE162:
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3168              		.loc 1 3113 0
 3169 001a 41F00041 		orr	r1, r1, #-2147483648
 3170              	.LVL275:
 3171 001e 0160     		str	r1, [r0]
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3172              		.loc 1 3117 0
 3173 0020 C468     		ldr	r4, [r0, #12]
 3174              	.LVL276:
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3175              		.loc 1 3118 0
 3176 0022 F4B1     		cbz	r4, .L297
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3177              		.loc 1 3119 0
 3178 0024 FFF7FEFF 		bl	uxListRemove
 3179              	.LVL277:
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3180              		.loc 1 3124 0
 3181 0028 251D     		adds	r5, r4, #4
 3182 002a 2846     		mov	r0, r5
 3183 002c FFF7FEFF 		bl	uxListRemove
 3184              	.LVL278:
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3185              		.loc 1 3125 0
 3186 0030 E36A     		ldr	r3, [r4, #44]
 3187 0032 0122     		movs	r2, #1
 3188 0034 9A40     		lsls	r2, r2, r3
 3189 0036 1049     		ldr	r1, .L298+4
 3190 0038 0868     		ldr	r0, [r1]
 3191 003a 0243     		orrs	r2, r2, r0
 3192 003c 0A60     		str	r2, [r1]
 3193 003e 03EB8303 		add	r3, r3, r3, lsl #2
 3194 0042 9A00     		lsls	r2, r3, #2
 3195 0044 2946     		mov	r1, r5
 3196 0046 0D48     		ldr	r0, .L298+8
 3197 0048 1044     		add	r0, r0, r2
 3198 004a FFF7FEFF 		bl	vListInsertEnd
 3199              	.LVL279:
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3200              		.loc 1 3127 0
 3201 004e E26A     		ldr	r2, [r4, #44]
 3202 0050 0B4B     		ldr	r3, .L298+12
 3203 0052 1B68     		ldr	r3, [r3]
 3204 0054 DB6A     		ldr	r3, [r3, #44]
 3205 0056 9A42     		cmp	r2, r3
 3206 0058 02D9     		bls	.L290
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3207              		.loc 1 3133 0
 3208 005a 0122     		movs	r2, #1
ARM GAS  /tmp/ccz3PNNG.s 			page 155


 3209 005c 094B     		ldr	r3, .L298+16
 3210 005e 1A60     		str	r2, [r3]
 3211              	.L290:
 3212 0060 38BD     		pop	{r3, r4, r5, pc}
 3213              	.LVL280:
 3214              	.L297:
 3215              	.LBB164:
 3216              	.LBB165:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3217              		.loc 2 195 0
 3218              		.syntax unified
 3219              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3220 0062 4FF05003 			mov r3, #80												
 3221 0066 83F31188 		msr basepri, r3											
 3222 006a BFF36F8F 		isb														
 3223 006e BFF34F8F 		dsb														
 3224              	
 3225              	@ 0 "" 2
 3226              	.LVL281:
 3227              		.thumb
 3228              		.syntax unified
 3229              	.L294:
 3230 0072 FEE7     		b	.L294
 3231              	.L299:
 3232              		.align	2
 3233              	.L298:
 3234 0074 00000000 		.word	.LANCHOR16
 3235 0078 00000000 		.word	.LANCHOR13
 3236 007c 00000000 		.word	.LANCHOR4
 3237 0080 00000000 		.word	.LANCHOR10
 3238 0084 00000000 		.word	.LANCHOR20
 3239              	.LBE165:
 3240              	.LBE164:
 3241              		.cfi_endproc
 3242              	.LFE30:
 3244              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3245              		.align	1
 3246              		.global	vTaskSetTimeOutState
 3247              		.syntax unified
 3248              		.thumb
 3249              		.thumb_func
 3250              		.fpu softvfp
 3252              	vTaskSetTimeOutState:
 3253              	.LFB31:
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3254              		.loc 1 3139 0
 3255              		.cfi_startproc
 3256              		@ args = 0, pretend = 0, frame = 0
 3257              		@ frame_needed = 0, uses_anonymous_args = 0
 3258              	.LVL282:
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3259              		.loc 1 3140 0
 3260 0000 40B9     		cbnz	r0, .L301
 3261              	.LBB166:
 3262              	.LBB167:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3263              		.loc 2 195 0
ARM GAS  /tmp/ccz3PNNG.s 			page 156


 3264              		.syntax unified
 3265              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3266 0002 4FF05003 			mov r3, #80												
 3267 0006 83F31188 		msr basepri, r3											
 3268 000a BFF36F8F 		isb														
 3269 000e BFF34F8F 		dsb														
 3270              	
 3271              	@ 0 "" 2
 3272              	.LVL283:
 3273              		.thumb
 3274              		.syntax unified
 3275              	.L302:
 3276 0012 FEE7     		b	.L302
 3277              	.L301:
 3278              	.LBE167:
 3279              	.LBE166:
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3280              		.loc 1 3139 0
 3281 0014 10B5     		push	{r4, lr}
 3282              	.LCFI35:
 3283              		.cfi_def_cfa_offset 8
 3284              		.cfi_offset 4, -8
 3285              		.cfi_offset 14, -4
 3286 0016 0446     		mov	r4, r0
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3287              		.loc 1 3141 0
 3288 0018 FFF7FEFF 		bl	vPortEnterCritical
 3289              	.LVL284:
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3290              		.loc 1 3143 0
 3291 001c 044B     		ldr	r3, .L305
 3292 001e 1B68     		ldr	r3, [r3]
 3293 0020 2360     		str	r3, [r4]
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3294              		.loc 1 3144 0
 3295 0022 044B     		ldr	r3, .L305+4
 3296 0024 1B68     		ldr	r3, [r3]
 3297 0026 6360     		str	r3, [r4, #4]
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3298              		.loc 1 3146 0
 3299 0028 FFF7FEFF 		bl	vPortExitCritical
 3300              	.LVL285:
 3301 002c 10BD     		pop	{r4, pc}
 3302              	.LVL286:
 3303              	.L306:
 3304 002e 00BF     		.align	2
 3305              	.L305:
 3306 0030 00000000 		.word	.LANCHOR18
 3307 0034 00000000 		.word	.LANCHOR15
 3308              		.cfi_endproc
 3309              	.LFE31:
 3311              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3312              		.align	1
 3313              		.global	vTaskInternalSetTimeOutState
 3314              		.syntax unified
 3315              		.thumb
 3316              		.thumb_func
ARM GAS  /tmp/ccz3PNNG.s 			page 157


 3317              		.fpu softvfp
 3319              	vTaskInternalSetTimeOutState:
 3320              	.LFB32:
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3321              		.loc 1 3151 0
 3322              		.cfi_startproc
 3323              		@ args = 0, pretend = 0, frame = 0
 3324              		@ frame_needed = 0, uses_anonymous_args = 0
 3325              		@ link register save eliminated.
 3326              	.LVL287:
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3327              		.loc 1 3153 0
 3328 0000 034B     		ldr	r3, .L308
 3329 0002 1B68     		ldr	r3, [r3]
 3330 0004 0360     		str	r3, [r0]
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3331              		.loc 1 3154 0
 3332 0006 034B     		ldr	r3, .L308+4
 3333 0008 1B68     		ldr	r3, [r3]
 3334 000a 4360     		str	r3, [r0, #4]
 3335 000c 7047     		bx	lr
 3336              	.L309:
 3337 000e 00BF     		.align	2
 3338              	.L308:
 3339 0010 00000000 		.word	.LANCHOR18
 3340 0014 00000000 		.word	.LANCHOR15
 3341              		.cfi_endproc
 3342              	.LFE32:
 3344              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3345              		.align	1
 3346              		.global	xTaskCheckForTimeOut
 3347              		.syntax unified
 3348              		.thumb
 3349              		.thumb_func
 3350              		.fpu softvfp
 3352              	xTaskCheckForTimeOut:
 3353              	.LFB33:
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3354              		.loc 1 3159 0
 3355              		.cfi_startproc
 3356              		@ args = 0, pretend = 0, frame = 0
 3357              		@ frame_needed = 0, uses_anonymous_args = 0
 3358              	.LVL288:
 3359 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3360              	.LCFI36:
 3361              		.cfi_def_cfa_offset 24
 3362              		.cfi_offset 3, -24
 3363              		.cfi_offset 4, -20
 3364              		.cfi_offset 5, -16
 3365              		.cfi_offset 6, -12
 3366              		.cfi_offset 7, -8
 3367              		.cfi_offset 14, -4
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3368              		.loc 1 3162 0
 3369 0002 E0B1     		cbz	r0, .L321
 3370 0004 0546     		mov	r5, r0
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccz3PNNG.s 			page 158


 3371              		.loc 1 3163 0
 3372 0006 19B3     		cbz	r1, .L322
 3373 0008 0C46     		mov	r4, r1
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3374              		.loc 1 3165 0
 3375 000a FFF7FEFF 		bl	vPortEnterCritical
 3376              	.LVL289:
 3377              	.LBB168:
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3378              		.loc 1 3168 0
 3379 000e 1A4B     		ldr	r3, .L324
 3380 0010 1868     		ldr	r0, [r3]
 3381              	.LVL290:
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3382              		.loc 1 3169 0
 3383 0012 6968     		ldr	r1, [r5, #4]
 3384 0014 421A     		subs	r2, r0, r1
 3385              	.LVL291:
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3386              		.loc 1 3183 0
 3387 0016 2368     		ldr	r3, [r4]
 3388 0018 B3F1FF3F 		cmp	r3, #-1
 3389 001c 28D0     		beq	.L318
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3390              		.loc 1 3193 0
 3391 001e 2F68     		ldr	r7, [r5]
 3392 0020 164E     		ldr	r6, .L324+4
 3393 0022 3668     		ldr	r6, [r6]
 3394 0024 B742     		cmp	r7, r6
 3395 0026 01D0     		beq	.L316
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3396              		.loc 1 3193 0 is_stmt 0 discriminator 1
 3397 0028 8842     		cmp	r0, r1
 3398 002a 23D2     		bcs	.L319
 3399              	.L316:
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3400              		.loc 1 3202 0 is_stmt 1
 3401 002c 9A42     		cmp	r2, r3
 3402 002e 18D3     		bcc	.L323
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 3403              		.loc 1 3211 0
 3404 0030 0023     		movs	r3, #0
 3405 0032 2360     		str	r3, [r4]
 3406              	.LVL292:
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3407              		.loc 1 3212 0
 3408 0034 0124     		movs	r4, #1
 3409              	.LVL293:
 3410              	.L315:
 3411              	.LBE168:
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3412              		.loc 1 3215 0
 3413 0036 FFF7FEFF 		bl	vPortExitCritical
 3414              	.LVL294:
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3415              		.loc 1 3218 0
 3416 003a 2046     		mov	r0, r4
ARM GAS  /tmp/ccz3PNNG.s 			page 159


 3417 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3418              	.LVL295:
 3419              	.L321:
 3420              	.LBB169:
 3421              	.LBB170:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3422              		.loc 2 195 0
 3423              		.syntax unified
 3424              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3425 003e 4FF05003 			mov r3, #80												
 3426 0042 83F31188 		msr basepri, r3											
 3427 0046 BFF36F8F 		isb														
 3428 004a BFF34F8F 		dsb														
 3429              	
 3430              	@ 0 "" 2
 3431              	.LVL296:
 3432              		.thumb
 3433              		.syntax unified
 3434              	.L312:
 3435 004e FEE7     		b	.L312
 3436              	.L322:
 3437              	.LBE170:
 3438              	.LBE169:
 3439              	.LBB171:
 3440              	.LBB172:
 3441              		.syntax unified
 3442              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3443 0050 4FF05003 			mov r3, #80												
 3444 0054 83F31188 		msr basepri, r3											
 3445 0058 BFF36F8F 		isb														
 3446 005c BFF34F8F 		dsb														
 3447              	
 3448              	@ 0 "" 2
 3449              	.LVL297:
 3450              		.thumb
 3451              		.syntax unified
 3452              	.L314:
 3453 0060 FEE7     		b	.L314
 3454              	.LVL298:
 3455              	.L323:
 3456              	.LBE172:
 3457              	.LBE171:
 3458              	.LBB173:
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3459              		.loc 1 3205 0
 3460 0062 9B1A     		subs	r3, r3, r2
 3461 0064 2360     		str	r3, [r4]
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3462              		.loc 1 3206 0
 3463 0066 2846     		mov	r0, r5
 3464              	.LVL299:
 3465 0068 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3466              	.LVL300:
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3467              		.loc 1 3207 0
 3468 006c 0024     		movs	r4, #0
 3469              	.LVL301:
ARM GAS  /tmp/ccz3PNNG.s 			page 160


 3470 006e E2E7     		b	.L315
 3471              	.LVL302:
 3472              	.L318:
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3473              		.loc 1 3188 0
 3474 0070 0024     		movs	r4, #0
 3475              	.LVL303:
 3476 0072 E0E7     		b	.L315
 3477              	.LVL304:
 3478              	.L319:
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3479              		.loc 1 3200 0
 3480 0074 0124     		movs	r4, #1
 3481              	.LVL305:
 3482 0076 DEE7     		b	.L315
 3483              	.L325:
 3484              		.align	2
 3485              	.L324:
 3486 0078 00000000 		.word	.LANCHOR15
 3487 007c 00000000 		.word	.LANCHOR18
 3488              	.LBE173:
 3489              		.cfi_endproc
 3490              	.LFE33:
 3492              		.section	.text.vTaskMissedYield,"ax",%progbits
 3493              		.align	1
 3494              		.global	vTaskMissedYield
 3495              		.syntax unified
 3496              		.thumb
 3497              		.thumb_func
 3498              		.fpu softvfp
 3500              	vTaskMissedYield:
 3501              	.LFB34:
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3502              		.loc 1 3222 0
 3503              		.cfi_startproc
 3504              		@ args = 0, pretend = 0, frame = 0
 3505              		@ frame_needed = 0, uses_anonymous_args = 0
 3506              		@ link register save eliminated.
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3507              		.loc 1 3223 0
 3508 0000 0122     		movs	r2, #1
 3509 0002 014B     		ldr	r3, .L327
 3510 0004 1A60     		str	r2, [r3]
 3511 0006 7047     		bx	lr
 3512              	.L328:
 3513              		.align	2
 3514              	.L327:
 3515 0008 00000000 		.word	.LANCHOR20
 3516              		.cfi_endproc
 3517              	.LFE34:
 3519              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3520              		.align	1
 3521              		.global	xTaskGetCurrentTaskHandle
 3522              		.syntax unified
 3523              		.thumb
 3524              		.thumb_func
 3525              		.fpu softvfp
ARM GAS  /tmp/ccz3PNNG.s 			page 161


 3527              	xTaskGetCurrentTaskHandle:
 3528              	.LFB40:
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 3529              		.loc 1 3811 0
 3530              		.cfi_startproc
 3531              		@ args = 0, pretend = 0, frame = 0
 3532              		@ frame_needed = 0, uses_anonymous_args = 0
 3533              		@ link register save eliminated.
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3534              		.loc 1 3817 0
 3535 0000 014B     		ldr	r3, .L330
 3536 0002 1868     		ldr	r0, [r3]
 3537              	.LVL306:
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3538              		.loc 1 3820 0
 3539 0004 7047     		bx	lr
 3540              	.L331:
 3541 0006 00BF     		.align	2
 3542              	.L330:
 3543 0008 00000000 		.word	.LANCHOR10
 3544              		.cfi_endproc
 3545              	.LFE40:
 3547              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 3548              		.align	1
 3549              		.global	xTaskGetSchedulerState
 3550              		.syntax unified
 3551              		.thumb
 3552              		.thumb_func
 3553              		.fpu softvfp
 3555              	xTaskGetSchedulerState:
 3556              	.LFB41:
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 3557              		.loc 1 3828 0
 3558              		.cfi_startproc
 3559              		@ args = 0, pretend = 0, frame = 0
 3560              		@ frame_needed = 0, uses_anonymous_args = 0
 3561              		@ link register save eliminated.
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3562              		.loc 1 3831 0
 3563 0000 054B     		ldr	r3, .L336
 3564 0002 1B68     		ldr	r3, [r3]
 3565 0004 23B1     		cbz	r3, .L334
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3566              		.loc 1 3837 0
 3567 0006 054B     		ldr	r3, .L336+4
 3568 0008 1B68     		ldr	r3, [r3]
 3569 000a 1BB9     		cbnz	r3, .L335
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3570              		.loc 1 3839 0
 3571 000c 0220     		movs	r0, #2
 3572 000e 7047     		bx	lr
 3573              	.L334:
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3574              		.loc 1 3833 0
 3575 0010 0120     		movs	r0, #1
 3576 0012 7047     		bx	lr
 3577              	.L335:
ARM GAS  /tmp/ccz3PNNG.s 			page 162


3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3578              		.loc 1 3843 0
 3579 0014 0020     		movs	r0, #0
 3580              	.LVL307:
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3581              		.loc 1 3848 0
 3582 0016 7047     		bx	lr
 3583              	.L337:
 3584              		.align	2
 3585              	.L336:
 3586 0018 00000000 		.word	.LANCHOR11
 3587 001c 00000000 		.word	.LANCHOR16
 3588              		.cfi_endproc
 3589              	.LFE41:
 3591              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 3592              		.align	1
 3593              		.global	xTaskPriorityInherit
 3594              		.syntax unified
 3595              		.thumb
 3596              		.thumb_func
 3597              		.fpu softvfp
 3599              	xTaskPriorityInherit:
 3600              	.LFB42:
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3601              		.loc 1 3856 0
 3602              		.cfi_startproc
 3603              		@ args = 0, pretend = 0, frame = 0
 3604              		@ frame_needed = 0, uses_anonymous_args = 0
 3605              	.LVL308:
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3606              		.loc 1 3863 0
 3607 0000 0028     		cmp	r0, #0
 3608 0002 50D0     		beq	.L344
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3609              		.loc 1 3856 0
 3610 0004 38B5     		push	{r3, r4, r5, lr}
 3611              	.LCFI37:
 3612              		.cfi_def_cfa_offset 16
 3613              		.cfi_offset 3, -16
 3614              		.cfi_offset 4, -12
 3615              		.cfi_offset 5, -8
 3616              		.cfi_offset 14, -4
 3617 0006 0446     		mov	r4, r0
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3618              		.loc 1 3868 0
 3619 0008 C26A     		ldr	r2, [r0, #44]
 3620 000a 2849     		ldr	r1, .L352
 3621 000c 0968     		ldr	r1, [r1]
 3622 000e C96A     		ldr	r1, [r1, #44]
 3623 0010 8A42     		cmp	r2, r1
 3624 0012 3ED2     		bcs	.L340
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3625              		.loc 1 3873 0
 3626 0014 8169     		ldr	r1, [r0, #24]
 3627 0016 0029     		cmp	r1, #0
 3628 0018 05DB     		blt	.L341
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccz3PNNG.s 			page 163


 3629              		.loc 1 3875 0
 3630 001a 2449     		ldr	r1, .L352
 3631 001c 0968     		ldr	r1, [r1]
 3632 001e C96A     		ldr	r1, [r1, #44]
 3633 0020 C1F10701 		rsb	r1, r1, #7
 3634 0024 8161     		str	r1, [r0, #24]
 3635              	.L341:
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3636              		.loc 1 3884 0
 3637 0026 6069     		ldr	r0, [r4, #20]
 3638              	.LVL309:
 3639 0028 02EB8202 		add	r2, r2, r2, lsl #2
 3640 002c 9100     		lsls	r1, r2, #2
 3641 002e 204A     		ldr	r2, .L352+4
 3642 0030 0A44     		add	r2, r2, r1
 3643 0032 9042     		cmp	r0, r2
 3644 0034 05D0     		beq	.L350
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3645              		.loc 1 3902 0
 3646 0036 1D4A     		ldr	r2, .L352
 3647 0038 1268     		ldr	r2, [r2]
 3648 003a D26A     		ldr	r2, [r2, #44]
 3649 003c E262     		str	r2, [r4, #44]
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3650              		.loc 1 3908 0
 3651 003e 0120     		movs	r0, #1
 3652 0040 38BD     		pop	{r3, r4, r5, pc}
 3653              	.LVL310:
 3654              	.L350:
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3655              		.loc 1 3886 0
 3656 0042 251D     		adds	r5, r4, #4
 3657 0044 2846     		mov	r0, r5
 3658 0046 FFF7FEFF 		bl	uxListRemove
 3659              	.LVL311:
 3660 004a 68B9     		cbnz	r0, .L343
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3661              		.loc 1 3888 0
 3662 004c E36A     		ldr	r3, [r4, #44]
 3663 004e 03EB8301 		add	r1, r3, r3, lsl #2
 3664 0052 8A00     		lsls	r2, r1, #2
 3665 0054 1649     		ldr	r1, .L352+4
 3666 0056 8A58     		ldr	r2, [r1, r2]
 3667 0058 32B9     		cbnz	r2, .L343
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3668              		.loc 1 3888 0 is_stmt 0 discriminator 1
 3669 005a 0122     		movs	r2, #1
 3670 005c 9A40     		lsls	r2, r2, r3
 3671 005e 1549     		ldr	r1, .L352+8
 3672 0060 0B68     		ldr	r3, [r1]
 3673 0062 23EA0203 		bic	r3, r3, r2
 3674 0066 0B60     		str	r3, [r1]
 3675              	.L343:
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 3676              		.loc 1 3896 0 is_stmt 1
 3677 0068 104B     		ldr	r3, .L352
 3678 006a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccz3PNNG.s 			page 164


 3679 006c DB6A     		ldr	r3, [r3, #44]
 3680 006e E362     		str	r3, [r4, #44]
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3681              		.loc 1 3897 0
 3682 0070 0124     		movs	r4, #1
 3683              	.LVL312:
 3684 0072 04FA03F2 		lsl	r2, r4, r3
 3685 0076 0F49     		ldr	r1, .L352+8
 3686 0078 0868     		ldr	r0, [r1]
 3687 007a 0243     		orrs	r2, r2, r0
 3688 007c 0A60     		str	r2, [r1]
 3689 007e 03EB8303 		add	r3, r3, r3, lsl #2
 3690 0082 9A00     		lsls	r2, r3, #2
 3691 0084 2946     		mov	r1, r5
 3692 0086 0A48     		ldr	r0, .L352+4
 3693 0088 1044     		add	r0, r0, r2
 3694 008a FFF7FEFF 		bl	vListInsertEnd
 3695              	.LVL313:
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3696              		.loc 1 3908 0
 3697 008e 2046     		mov	r0, r4
 3698 0090 38BD     		pop	{r3, r4, r5, pc}
 3699              	.LVL314:
 3700              	.L340:
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3701              		.loc 1 3912 0
 3702 0092 426C     		ldr	r2, [r0, #68]
 3703 0094 054B     		ldr	r3, .L352
 3704 0096 1B68     		ldr	r3, [r3]
 3705 0098 DB6A     		ldr	r3, [r3, #44]
 3706 009a 9A42     		cmp	r2, r3
 3707 009c 01D2     		bcs	.L351
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3708              		.loc 1 3921 0
 3709 009e 0120     		movs	r0, #1
 3710              	.LVL315:
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3711              		.loc 1 3935 0
 3712 00a0 38BD     		pop	{r3, r4, r5, pc}
 3713              	.LVL316:
 3714              	.L351:
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3715              		.loc 1 3858 0
 3716 00a2 0020     		movs	r0, #0
 3717              	.LVL317:
 3718 00a4 38BD     		pop	{r3, r4, r5, pc}
 3719              	.LVL318:
 3720              	.L344:
 3721              	.LCFI38:
 3722              		.cfi_def_cfa_offset 0
 3723              		.cfi_restore 3
 3724              		.cfi_restore 4
 3725              		.cfi_restore 5
 3726              		.cfi_restore 14
 3727 00a6 0020     		movs	r0, #0
 3728              	.LVL319:
 3729 00a8 7047     		bx	lr
ARM GAS  /tmp/ccz3PNNG.s 			page 165


 3730              	.L353:
 3731 00aa 00BF     		.align	2
 3732              	.L352:
 3733 00ac 00000000 		.word	.LANCHOR10
 3734 00b0 00000000 		.word	.LANCHOR4
 3735 00b4 00000000 		.word	.LANCHOR13
 3736              		.cfi_endproc
 3737              	.LFE42:
 3739              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3740              		.align	1
 3741              		.global	xTaskPriorityDisinherit
 3742              		.syntax unified
 3743              		.thumb
 3744              		.thumb_func
 3745              		.fpu softvfp
 3747              	xTaskPriorityDisinherit:
 3748              	.LFB43:
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3749              		.loc 1 3943 0
 3750              		.cfi_startproc
 3751              		@ args = 0, pretend = 0, frame = 0
 3752              		@ frame_needed = 0, uses_anonymous_args = 0
 3753              	.LVL320:
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3754              		.loc 1 3947 0
 3755 0000 0028     		cmp	r0, #0
 3756 0002 4AD0     		beq	.L361
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3757              		.loc 1 3943 0
 3758 0004 38B5     		push	{r3, r4, r5, lr}
 3759              	.LCFI39:
 3760              		.cfi_def_cfa_offset 16
 3761              		.cfi_offset 3, -16
 3762              		.cfi_offset 4, -12
 3763              		.cfi_offset 5, -8
 3764              		.cfi_offset 14, -4
 3765 0006 0446     		mov	r4, r0
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 3766              		.loc 1 3953 0
 3767 0008 274A     		ldr	r2, .L368
 3768 000a 1268     		ldr	r2, [r2]
 3769 000c 9042     		cmp	r0, r2
 3770 000e 08D0     		beq	.L356
 3771              	.LBB174:
 3772              	.LBB175:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3773              		.loc 2 195 0
 3774              		.syntax unified
 3775              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3776 0010 4FF05003 			mov r3, #80												
 3777 0014 83F31188 		msr basepri, r3											
 3778 0018 BFF36F8F 		isb														
 3779 001c BFF34F8F 		dsb														
 3780              	
 3781              	@ 0 "" 2
 3782              	.LVL321:
 3783              		.thumb
ARM GAS  /tmp/ccz3PNNG.s 			page 166


 3784              		.syntax unified
 3785              	.L357:
 3786 0020 FEE7     		b	.L357
 3787              	.L356:
 3788              	.LBE175:
 3789              	.LBE174:
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3790              		.loc 1 3954 0
 3791 0022 826C     		ldr	r2, [r0, #72]
 3792 0024 42B9     		cbnz	r2, .L358
 3793              	.LBB176:
 3794              	.LBB177:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3795              		.loc 2 195 0
 3796              		.syntax unified
 3797              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3798 0026 4FF05003 			mov r3, #80												
 3799 002a 83F31188 		msr basepri, r3											
 3800 002e BFF36F8F 		isb														
 3801 0032 BFF34F8F 		dsb														
 3802              	
 3803              	@ 0 "" 2
 3804              	.LVL322:
 3805              		.thumb
 3806              		.syntax unified
 3807              	.L359:
 3808 0036 FEE7     		b	.L359
 3809              	.L358:
 3810              	.LBE177:
 3811              	.LBE176:
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3812              		.loc 1 3955 0
 3813 0038 013A     		subs	r2, r2, #1
 3814 003a 8264     		str	r2, [r0, #72]
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3815              		.loc 1 3959 0
 3816 003c C06A     		ldr	r0, [r0, #44]
 3817              	.LVL323:
 3818 003e 616C     		ldr	r1, [r4, #68]
 3819 0040 8842     		cmp	r0, r1
 3820 0042 2CD0     		beq	.L362
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3821              		.loc 1 3962 0
 3822 0044 6ABB     		cbnz	r2, .L363
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3823              		.loc 1 3969 0
 3824 0046 251D     		adds	r5, r4, #4
 3825 0048 2846     		mov	r0, r5
 3826 004a FFF7FEFF 		bl	uxListRemove
 3827              	.LVL324:
 3828 004e 70B9     		cbnz	r0, .L360
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3829              		.loc 1 3971 0
 3830 0050 E26A     		ldr	r2, [r4, #44]
 3831 0052 02EB8201 		add	r1, r2, r2, lsl #2
 3832 0056 8B00     		lsls	r3, r1, #2
 3833 0058 1449     		ldr	r1, .L368+4
ARM GAS  /tmp/ccz3PNNG.s 			page 167


 3834 005a CB58     		ldr	r3, [r1, r3]
 3835 005c 3BB9     		cbnz	r3, .L360
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3836              		.loc 1 3971 0 is_stmt 0 discriminator 1
 3837 005e 0123     		movs	r3, #1
 3838 0060 03FA02F2 		lsl	r2, r3, r2
 3839 0064 1249     		ldr	r1, .L368+8
 3840 0066 0B68     		ldr	r3, [r1]
 3841 0068 23EA0203 		bic	r3, r3, r2
 3842 006c 0B60     		str	r3, [r1]
 3843              	.L360:
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3844              		.loc 1 3981 0 is_stmt 1
 3845 006e 636C     		ldr	r3, [r4, #68]
 3846 0070 E362     		str	r3, [r4, #44]
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3847              		.loc 1 3986 0
 3848 0072 C3F10702 		rsb	r2, r3, #7
 3849 0076 A261     		str	r2, [r4, #24]
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3850              		.loc 1 3987 0
 3851 0078 0124     		movs	r4, #1
 3852              	.LVL325:
 3853 007a 04FA03F2 		lsl	r2, r4, r3
 3854 007e 0C49     		ldr	r1, .L368+8
 3855 0080 0868     		ldr	r0, [r1]
 3856 0082 0243     		orrs	r2, r2, r0
 3857 0084 0A60     		str	r2, [r1]
 3858 0086 03EB8303 		add	r3, r3, r3, lsl #2
 3859 008a 9A00     		lsls	r2, r3, #2
 3860 008c 2946     		mov	r1, r5
 3861 008e 0748     		ldr	r0, .L368+4
 3862 0090 1044     		add	r0, r0, r2
 3863 0092 FFF7FEFF 		bl	vListInsertEnd
 3864              	.LVL326:
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3865              		.loc 1 3997 0
 3866 0096 2046     		mov	r0, r4
 3867 0098 38BD     		pop	{r3, r4, r5, pc}
 3868              	.LVL327:
 3869              	.L361:
 3870              	.LCFI40:
 3871              		.cfi_def_cfa_offset 0
 3872              		.cfi_restore 3
 3873              		.cfi_restore 4
 3874              		.cfi_restore 5
 3875              		.cfi_restore 14
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3876              		.loc 1 3945 0
 3877 009a 0020     		movs	r0, #0
 3878              	.LVL328:
 3879 009c 7047     		bx	lr
 3880              	.LVL329:
 3881              	.L362:
 3882              	.LCFI41:
 3883              		.cfi_def_cfa_offset 16
 3884              		.cfi_offset 3, -16
ARM GAS  /tmp/ccz3PNNG.s 			page 168


 3885              		.cfi_offset 4, -12
 3886              		.cfi_offset 5, -8
 3887              		.cfi_offset 14, -4
 3888 009e 0020     		movs	r0, #0
 3889 00a0 38BD     		pop	{r3, r4, r5, pc}
 3890              	.LVL330:
 3891              	.L363:
 3892 00a2 0020     		movs	r0, #0
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3893              		.loc 1 4015 0
 3894 00a4 38BD     		pop	{r3, r4, r5, pc}
 3895              	.LVL331:
 3896              	.L369:
 3897 00a6 00BF     		.align	2
 3898              	.L368:
 3899 00a8 00000000 		.word	.LANCHOR10
 3900 00ac 00000000 		.word	.LANCHOR4
 3901 00b0 00000000 		.word	.LANCHOR13
 3902              		.cfi_endproc
 3903              	.LFE43:
 3905              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 3906              		.align	1
 3907              		.global	vTaskPriorityDisinheritAfterTimeout
 3908              		.syntax unified
 3909              		.thumb
 3910              		.thumb_func
 3911              		.fpu softvfp
 3913              	vTaskPriorityDisinheritAfterTimeout:
 3914              	.LFB44:
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3915              		.loc 1 4023 0
 3916              		.cfi_startproc
 3917              		@ args = 0, pretend = 0, frame = 0
 3918              		@ frame_needed = 0, uses_anonymous_args = 0
 3919              	.LVL332:
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3920              		.loc 1 4028 0
 3921 0000 0028     		cmp	r0, #0
 3922 0002 56D0     		beq	.L380
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3923              		.loc 1 4023 0
 3924 0004 38B5     		push	{r3, r4, r5, lr}
 3925              	.LCFI42:
 3926              		.cfi_def_cfa_offset 16
 3927              		.cfi_offset 3, -16
 3928              		.cfi_offset 4, -12
 3929              		.cfi_offset 5, -8
 3930              		.cfi_offset 14, -4
 3931 0006 0446     		mov	r4, r0
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3932              		.loc 1 4032 0
 3933 0008 806C     		ldr	r0, [r0, #72]
 3934              	.LVL333:
 3935 000a 40B9     		cbnz	r0, .L372
 3936              	.LBB178:
 3937              	.LBB179:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
ARM GAS  /tmp/ccz3PNNG.s 			page 169


 3938              		.loc 2 195 0
 3939              		.syntax unified
 3940              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3941 000c 4FF05003 			mov r3, #80												
 3942 0010 83F31188 		msr basepri, r3											
 3943 0014 BFF36F8F 		isb														
 3944 0018 BFF34F8F 		dsb														
 3945              	
 3946              	@ 0 "" 2
 3947              	.LVL334:
 3948              		.thumb
 3949              		.syntax unified
 3950              	.L373:
 3951 001c FEE7     		b	.L373
 3952              	.L372:
 3953              	.LBE179:
 3954              	.LBE178:
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3955              		.loc 1 4038 0
 3956 001e 626C     		ldr	r2, [r4, #68]
 3957 0020 8A42     		cmp	r2, r1
 3958 0022 00D2     		bcs	.L374
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3959              		.loc 1 4040 0
 3960 0024 0A46     		mov	r2, r1
 3961              	.L374:
 3962              	.LVL335:
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3963              		.loc 1 4048 0
 3964 0026 E16A     		ldr	r1, [r4, #44]
 3965              	.LVL336:
 3966 0028 8A42     		cmp	r2, r1
 3967 002a 01D0     		beq	.L370
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3968              		.loc 1 4054 0
 3969 002c 0128     		cmp	r0, #1
 3970 002e 00D0     		beq	.L383
 3971              	.LVL337:
 3972              	.L370:
 3973 0030 38BD     		pop	{r3, r4, r5, pc}
 3974              	.LVL338:
 3975              	.L383:
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3976              		.loc 1 4059 0
 3977 0032 2048     		ldr	r0, .L384
 3978 0034 0068     		ldr	r0, [r0]
 3979 0036 8442     		cmp	r4, r0
 3980 0038 08D1     		bne	.L375
 3981              	.LBB180:
 3982              	.LBB181:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3983              		.loc 2 195 0
 3984              		.syntax unified
 3985              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3986 003a 4FF05003 			mov r3, #80												
 3987 003e 83F31188 		msr basepri, r3											
 3988 0042 BFF36F8F 		isb														
ARM GAS  /tmp/ccz3PNNG.s 			page 170


 3989 0046 BFF34F8F 		dsb														
 3990              	
 3991              	@ 0 "" 2
 3992              	.LVL339:
 3993              		.thumb
 3994              		.syntax unified
 3995              	.L376:
 3996 004a FEE7     		b	.L376
 3997              	.L375:
 3998              	.LVL340:
 3999              	.LBE181:
 4000              	.LBE180:
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4001              		.loc 1 4066 0
 4002 004c E262     		str	r2, [r4, #44]
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4003              		.loc 1 4070 0
 4004 004e A069     		ldr	r0, [r4, #24]
 4005 0050 0028     		cmp	r0, #0
 4006 0052 02DB     		blt	.L377
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4007              		.loc 1 4072 0
 4008 0054 C2F10702 		rsb	r2, r2, #7
 4009              	.LVL341:
 4010 0058 A261     		str	r2, [r4, #24]
 4011              	.L377:
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4012              		.loc 1 4085 0
 4013 005a 6369     		ldr	r3, [r4, #20]
 4014 005c 01EB8101 		add	r1, r1, r1, lsl #2
 4015              	.LVL342:
 4016 0060 8800     		lsls	r0, r1, #2
 4017 0062 154A     		ldr	r2, .L384+4
 4018 0064 0244     		add	r2, r2, r0
 4019 0066 9342     		cmp	r3, r2
 4020 0068 E2D1     		bne	.L370
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 4021              		.loc 1 4087 0
 4022 006a 251D     		adds	r5, r4, #4
 4023 006c 2846     		mov	r0, r5
 4024 006e FFF7FEFF 		bl	uxListRemove
 4025              	.LVL343:
 4026 0072 70B9     		cbnz	r0, .L378
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 4027              		.loc 1 4089 0
 4028 0074 E26A     		ldr	r2, [r4, #44]
 4029 0076 02EB8201 		add	r1, r2, r2, lsl #2
 4030 007a 8B00     		lsls	r3, r1, #2
 4031 007c 0E49     		ldr	r1, .L384+4
 4032 007e CB58     		ldr	r3, [r1, r3]
 4033 0080 3BB9     		cbnz	r3, .L378
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 4034              		.loc 1 4089 0 is_stmt 0 discriminator 1
 4035 0082 0123     		movs	r3, #1
 4036 0084 03FA02F2 		lsl	r2, r3, r2
 4037 0088 0C49     		ldr	r1, .L384+8
 4038 008a 0B68     		ldr	r3, [r1]
ARM GAS  /tmp/ccz3PNNG.s 			page 171


 4039 008c 23EA0203 		bic	r3, r3, r2
 4040 0090 0B60     		str	r3, [r1]
 4041              	.L378:
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4042              		.loc 1 4096 0 is_stmt 1
 4043 0092 E36A     		ldr	r3, [r4, #44]
 4044 0094 0122     		movs	r2, #1
 4045 0096 9A40     		lsls	r2, r2, r3
 4046 0098 0849     		ldr	r1, .L384+8
 4047 009a 0868     		ldr	r0, [r1]
 4048 009c 0243     		orrs	r2, r2, r0
 4049 009e 0A60     		str	r2, [r1]
 4050 00a0 03EB8303 		add	r3, r3, r3, lsl #2
 4051 00a4 9A00     		lsls	r2, r3, #2
 4052 00a6 2946     		mov	r1, r5
 4053 00a8 0348     		ldr	r0, .L384+4
 4054 00aa 1044     		add	r0, r0, r2
 4055 00ac FFF7FEFF 		bl	vListInsertEnd
 4056              	.LVL344:
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4057              		.loc 1 4117 0
 4058 00b0 BEE7     		b	.L370
 4059              	.LVL345:
 4060              	.L380:
 4061              	.LCFI43:
 4062              		.cfi_def_cfa_offset 0
 4063              		.cfi_restore 3
 4064              		.cfi_restore 4
 4065              		.cfi_restore 5
 4066              		.cfi_restore 14
 4067 00b2 7047     		bx	lr
 4068              	.L385:
 4069              		.align	2
 4070              	.L384:
 4071 00b4 00000000 		.word	.LANCHOR10
 4072 00b8 00000000 		.word	.LANCHOR4
 4073 00bc 00000000 		.word	.LANCHOR13
 4074              		.cfi_endproc
 4075              	.LFE44:
 4077              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4078              		.align	1
 4079              		.global	uxTaskResetEventItemValue
 4080              		.syntax unified
 4081              		.thumb
 4082              		.thumb_func
 4083              		.fpu softvfp
 4085              	uxTaskResetEventItemValue:
 4086              	.LFB45:
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 4087              		.loc 1 4438 0
 4088              		.cfi_startproc
 4089              		@ args = 0, pretend = 0, frame = 0
 4090              		@ frame_needed = 0, uses_anonymous_args = 0
 4091              		@ link register save eliminated.
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4092              		.loc 1 4441 0
 4093 0000 044B     		ldr	r3, .L387
ARM GAS  /tmp/ccz3PNNG.s 			page 172


 4094 0002 1A68     		ldr	r2, [r3]
 4095 0004 9069     		ldr	r0, [r2, #24]
 4096              	.LVL346:
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4097              		.loc 1 4445 0
 4098 0006 1A68     		ldr	r2, [r3]
 4099 0008 1B68     		ldr	r3, [r3]
 4100 000a DB6A     		ldr	r3, [r3, #44]
 4101 000c C3F10703 		rsb	r3, r3, #7
 4102 0010 9361     		str	r3, [r2, #24]
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4103              		.loc 1 4448 0
 4104 0012 7047     		bx	lr
 4105              	.L388:
 4106              		.align	2
 4107              	.L387:
 4108 0014 00000000 		.word	.LANCHOR10
 4109              		.cfi_endproc
 4110              	.LFE45:
 4112              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4113              		.align	1
 4114              		.global	pvTaskIncrementMutexHeldCount
 4115              		.syntax unified
 4116              		.thumb
 4117              		.thumb_func
 4118              		.fpu softvfp
 4120              	pvTaskIncrementMutexHeldCount:
 4121              	.LFB46:
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 4122              		.loc 1 4454 0
 4123              		.cfi_startproc
 4124              		@ args = 0, pretend = 0, frame = 0
 4125              		@ frame_needed = 0, uses_anonymous_args = 0
 4126              		@ link register save eliminated.
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4127              		.loc 1 4457 0
 4128 0000 054B     		ldr	r3, .L391
 4129 0002 1B68     		ldr	r3, [r3]
 4130 0004 23B1     		cbz	r3, .L390
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4131              		.loc 1 4459 0
 4132 0006 044B     		ldr	r3, .L391
 4133 0008 1A68     		ldr	r2, [r3]
 4134 000a 936C     		ldr	r3, [r2, #72]
 4135 000c 0133     		adds	r3, r3, #1
 4136 000e 9364     		str	r3, [r2, #72]
 4137              	.L390:
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4138              		.loc 1 4462 0
 4139 0010 014B     		ldr	r3, .L391
 4140 0012 1868     		ldr	r0, [r3]
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4141              		.loc 1 4463 0
 4142 0014 7047     		bx	lr
 4143              	.L392:
 4144 0016 00BF     		.align	2
 4145              	.L391:
ARM GAS  /tmp/ccz3PNNG.s 			page 173


 4146 0018 00000000 		.word	.LANCHOR10
 4147              		.cfi_endproc
 4148              	.LFE46:
 4150              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4151              		.align	1
 4152              		.global	ulTaskNotifyTake
 4153              		.syntax unified
 4154              		.thumb
 4155              		.thumb_func
 4156              		.fpu softvfp
 4158              	ulTaskNotifyTake:
 4159              	.LFB47:
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 4160              		.loc 1 4471 0
 4161              		.cfi_startproc
 4162              		@ args = 0, pretend = 0, frame = 0
 4163              		@ frame_needed = 0, uses_anonymous_args = 0
 4164              	.LVL347:
 4165 0000 38B5     		push	{r3, r4, r5, lr}
 4166              	.LCFI44:
 4167              		.cfi_def_cfa_offset 16
 4168              		.cfi_offset 3, -16
 4169              		.cfi_offset 4, -12
 4170              		.cfi_offset 5, -8
 4171              		.cfi_offset 14, -4
 4172 0002 0546     		mov	r5, r0
 4173 0004 0C46     		mov	r4, r1
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4174              		.loc 1 4474 0
 4175 0006 FFF7FEFF 		bl	vPortEnterCritical
 4176              	.LVL348:
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4177              		.loc 1 4477 0
 4178 000a 194B     		ldr	r3, .L400
 4179 000c 1B68     		ldr	r3, [r3]
 4180 000e DB6C     		ldr	r3, [r3, #76]
 4181 0010 2BB9     		cbnz	r3, .L394
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4182              		.loc 1 4480 0
 4183 0012 174B     		ldr	r3, .L400
 4184 0014 1B68     		ldr	r3, [r3]
 4185 0016 0122     		movs	r2, #1
 4186 0018 83F85020 		strb	r2, [r3, #80]
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4187              		.loc 1 4482 0
 4188 001c ACB9     		cbnz	r4, .L398
 4189              	.L394:
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4190              		.loc 1 4503 0
 4191 001e FFF7FEFF 		bl	vPortExitCritical
 4192              	.LVL349:
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4193              		.loc 1 4505 0
 4194 0022 FFF7FEFF 		bl	vPortEnterCritical
 4195              	.LVL350:
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4196              		.loc 1 4508 0
ARM GAS  /tmp/ccz3PNNG.s 			page 174


 4197 0026 124B     		ldr	r3, .L400
 4198 0028 1B68     		ldr	r3, [r3]
 4199 002a DC6C     		ldr	r4, [r3, #76]
 4200              	.LVL351:
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4201              		.loc 1 4510 0
 4202 002c 24B1     		cbz	r4, .L395
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4203              		.loc 1 4512 0
 4204 002e CDB9     		cbnz	r5, .L399
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4205              		.loc 1 4518 0
 4206 0030 0F4B     		ldr	r3, .L400
 4207 0032 1B68     		ldr	r3, [r3]
 4208 0034 621E     		subs	r2, r4, #1
 4209 0036 DA64     		str	r2, [r3, #76]
 4210              	.L395:
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4211              		.loc 1 4526 0
 4212 0038 0D4B     		ldr	r3, .L400
 4213 003a 1B68     		ldr	r3, [r3]
 4214 003c 0022     		movs	r2, #0
 4215 003e 83F85020 		strb	r2, [r3, #80]
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4216              		.loc 1 4528 0
 4217 0042 FFF7FEFF 		bl	vPortExitCritical
 4218              	.LVL352:
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4219              		.loc 1 4531 0
 4220 0046 2046     		mov	r0, r4
 4221 0048 38BD     		pop	{r3, r4, r5, pc}
 4222              	.LVL353:
 4223              	.L398:
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 4224              		.loc 1 4484 0
 4225 004a 1146     		mov	r1, r2
 4226 004c 2046     		mov	r0, r4
 4227 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4228              	.LVL354:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4229              		.loc 1 4491 0
 4230 0052 4FF08052 		mov	r2, #268435456
 4231 0056 074B     		ldr	r3, .L400+4
 4232 0058 1A60     		str	r2, [r3]
 4233              		.syntax unified
 4234              	@ 4491 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4235 005a BFF34F8F 		dsb
 4236              	@ 0 "" 2
 4237              	@ 4491 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4238 005e BFF36F8F 		isb
 4239              	@ 0 "" 2
 4240              		.thumb
 4241              		.syntax unified
 4242 0062 DCE7     		b	.L394
 4243              	.LVL355:
 4244              	.L399:
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccz3PNNG.s 			page 175


 4245              		.loc 1 4514 0
 4246 0064 024B     		ldr	r3, .L400
 4247 0066 1B68     		ldr	r3, [r3]
 4248 0068 0022     		movs	r2, #0
 4249 006a DA64     		str	r2, [r3, #76]
 4250 006c E4E7     		b	.L395
 4251              	.L401:
 4252 006e 00BF     		.align	2
 4253              	.L400:
 4254 0070 00000000 		.word	.LANCHOR10
 4255 0074 04ED00E0 		.word	-536810236
 4256              		.cfi_endproc
 4257              	.LFE47:
 4259              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4260              		.align	1
 4261              		.global	xTaskNotifyWait
 4262              		.syntax unified
 4263              		.thumb
 4264              		.thumb_func
 4265              		.fpu softvfp
 4267              	xTaskNotifyWait:
 4268              	.LFB48:
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4269              		.loc 1 4539 0
 4270              		.cfi_startproc
 4271              		@ args = 0, pretend = 0, frame = 0
 4272              		@ frame_needed = 0, uses_anonymous_args = 0
 4273              	.LVL356:
 4274 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4275              	.LCFI45:
 4276              		.cfi_def_cfa_offset 24
 4277              		.cfi_offset 3, -24
 4278              		.cfi_offset 4, -20
 4279              		.cfi_offset 5, -16
 4280              		.cfi_offset 6, -12
 4281              		.cfi_offset 7, -8
 4282              		.cfi_offset 14, -4
 4283 0002 0746     		mov	r7, r0
 4284 0004 0D46     		mov	r5, r1
 4285 0006 1446     		mov	r4, r2
 4286 0008 1E46     		mov	r6, r3
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4287              		.loc 1 4542 0
 4288 000a FFF7FEFF 		bl	vPortEnterCritical
 4289              	.LVL357:
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4290              		.loc 1 4545 0
 4291 000e 204B     		ldr	r3, .L410
 4292 0010 1B68     		ldr	r3, [r3]
 4293 0012 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4294 0016 DBB2     		uxtb	r3, r3
 4295 0018 022B     		cmp	r3, #2
 4296 001a 0AD0     		beq	.L403
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4297              		.loc 1 4550 0
 4298 001c 1C4B     		ldr	r3, .L410
 4299 001e 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccz3PNNG.s 			page 176


 4300 0020 D06C     		ldr	r0, [r2, #76]
 4301 0022 20EA0700 		bic	r0, r0, r7
 4302 0026 D064     		str	r0, [r2, #76]
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4303              		.loc 1 4553 0
 4304 0028 1B68     		ldr	r3, [r3]
 4305 002a 0122     		movs	r2, #1
 4306 002c 83F85020 		strb	r2, [r3, #80]
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4307              		.loc 1 4555 0
 4308 0030 CEB9     		cbnz	r6, .L408
 4309              	.L403:
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4310              		.loc 1 4576 0
 4311 0032 FFF7FEFF 		bl	vPortExitCritical
 4312              	.LVL358:
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4313              		.loc 1 4578 0
 4314 0036 FFF7FEFF 		bl	vPortEnterCritical
 4315              	.LVL359:
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4316              		.loc 1 4582 0
 4317 003a 1CB1     		cbz	r4, .L404
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4318              		.loc 1 4586 0
 4319 003c 144B     		ldr	r3, .L410
 4320 003e 1B68     		ldr	r3, [r3]
 4321 0040 DB6C     		ldr	r3, [r3, #76]
 4322 0042 2360     		str	r3, [r4]
 4323              	.L404:
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4324              		.loc 1 4593 0
 4325 0044 124B     		ldr	r3, .L410
 4326 0046 1B68     		ldr	r3, [r3]
 4327 0048 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4328 004c DBB2     		uxtb	r3, r3
 4329 004e 022B     		cmp	r3, #2
 4330 0050 16D0     		beq	.L409
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4331              		.loc 1 4596 0
 4332 0052 0024     		movs	r4, #0
 4333              	.LVL360:
 4334              	.L405:
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4335              		.loc 1 4606 0
 4336 0054 0E4B     		ldr	r3, .L410
 4337 0056 1B68     		ldr	r3, [r3]
 4338 0058 0022     		movs	r2, #0
 4339 005a 83F85020 		strb	r2, [r3, #80]
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4340              		.loc 1 4608 0
 4341 005e FFF7FEFF 		bl	vPortExitCritical
 4342              	.LVL361:
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4343              		.loc 1 4611 0
 4344 0062 2046     		mov	r0, r4
 4345 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  /tmp/ccz3PNNG.s 			page 177


 4346              	.LVL362:
 4347              	.L408:
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 4348              		.loc 1 4557 0
 4349 0066 1146     		mov	r1, r2
 4350 0068 3046     		mov	r0, r6
 4351 006a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4352              	.LVL363:
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4353              		.loc 1 4564 0
 4354 006e 4FF08052 		mov	r2, #268435456
 4355 0072 084B     		ldr	r3, .L410+4
 4356 0074 1A60     		str	r2, [r3]
 4357              		.syntax unified
 4358              	@ 4564 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4359 0076 BFF34F8F 		dsb
 4360              	@ 0 "" 2
 4361              	@ 4564 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4362 007a BFF36F8F 		isb
 4363              	@ 0 "" 2
 4364              		.thumb
 4365              		.syntax unified
 4366 007e D8E7     		b	.L403
 4367              	.L409:
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 4368              		.loc 1 4602 0
 4369 0080 034B     		ldr	r3, .L410
 4370 0082 1A68     		ldr	r2, [r3]
 4371 0084 D36C     		ldr	r3, [r2, #76]
 4372 0086 23EA0505 		bic	r5, r3, r5
 4373              	.LVL364:
 4374 008a D564     		str	r5, [r2, #76]
 4375              	.LVL365:
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4376              		.loc 1 4603 0
 4377 008c 0124     		movs	r4, #1
 4378              	.LVL366:
 4379 008e E1E7     		b	.L405
 4380              	.L411:
 4381              		.align	2
 4382              	.L410:
 4383 0090 00000000 		.word	.LANCHOR10
 4384 0094 04ED00E0 		.word	-536810236
 4385              		.cfi_endproc
 4386              	.LFE48:
 4388              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4389              		.align	1
 4390              		.global	xTaskGenericNotify
 4391              		.syntax unified
 4392              		.thumb
 4393              		.thumb_func
 4394              		.fpu softvfp
 4396              	xTaskGenericNotify:
 4397              	.LFB49:
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4398              		.loc 1 4619 0
 4399              		.cfi_startproc
ARM GAS  /tmp/ccz3PNNG.s 			page 178


 4400              		@ args = 0, pretend = 0, frame = 0
 4401              		@ frame_needed = 0, uses_anonymous_args = 0
 4402              	.LVL367:
 4403 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4404              	.LCFI46:
 4405              		.cfi_def_cfa_offset 24
 4406              		.cfi_offset 3, -24
 4407              		.cfi_offset 4, -20
 4408              		.cfi_offset 5, -16
 4409              		.cfi_offset 6, -12
 4410              		.cfi_offset 7, -8
 4411              		.cfi_offset 14, -4
 4412              	.LVL368:
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 4413              		.loc 1 4624 0
 4414 0002 A8B1     		cbz	r0, .L431
 4415 0004 0446     		mov	r4, r0
 4416 0006 1F46     		mov	r7, r3
 4417 0008 1646     		mov	r6, r2
 4418 000a 0D46     		mov	r5, r1
 4419              	.LVL369:
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4420              		.loc 1 4627 0
 4421 000c FFF7FEFF 		bl	vPortEnterCritical
 4422              	.LVL370:
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4423              		.loc 1 4629 0
 4424 0010 0FB1     		cbz	r7, .L415
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4425              		.loc 1 4631 0
 4426 0012 E36C     		ldr	r3, [r4, #76]
 4427 0014 3B60     		str	r3, [r7]
 4428              	.L415:
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4429              		.loc 1 4634 0
 4430 0016 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4431 001a DBB2     		uxtb	r3, r3
 4432              	.LVL371:
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4433              		.loc 1 4636 0
 4434 001c 0222     		movs	r2, #2
 4435 001e 84F85020 		strb	r2, [r4, #80]
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4436              		.loc 1 4638 0
 4437 0022 042E     		cmp	r6, #4
 4438 0024 3ED8     		bhi	.L416
 4439 0026 DFE806F0 		tbb	[pc, r6]
 4440              	.L418:
 4441 002a 4A       		.byte	(.L427-.L418)/2
 4442 002b 0C       		.byte	(.L419-.L418)/2
 4443 002c 30       		.byte	(.L420-.L418)/2
 4444 002d 35       		.byte	(.L421-.L418)/2
 4445 002e 38       		.byte	(.L422-.L418)/2
 4446              	.LVL372:
 4447 002f 00       		.p2align 1
 4448              	.L431:
 4449              	.LBB182:
ARM GAS  /tmp/ccz3PNNG.s 			page 179


 4450              	.LBB183:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4451              		.loc 2 195 0
 4452              		.syntax unified
 4453              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4454 0030 4FF05003 			mov r3, #80												
 4455 0034 83F31188 		msr basepri, r3											
 4456 0038 BFF36F8F 		isb														
 4457 003c BFF34F8F 		dsb														
 4458              	
 4459              	@ 0 "" 2
 4460              	.LVL373:
 4461              		.thumb
 4462              		.syntax unified
 4463              	.L414:
 4464 0040 FEE7     		b	.L414
 4465              	.LVL374:
 4466              	.L419:
 4467              	.LBE183:
 4468              	.LBE182:
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4469              		.loc 1 4641 0
 4470 0042 E26C     		ldr	r2, [r4, #76]
 4471 0044 1543     		orrs	r5, r5, r2
 4472              	.LVL375:
 4473 0046 E564     		str	r5, [r4, #76]
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4474              		.loc 1 4621 0
 4475 0048 0125     		movs	r5, #1
 4476              	.L417:
 4477              	.LVL376:
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4478              		.loc 1 4682 0
 4479 004a 012B     		cmp	r3, #1
 4480 004c 4BD1     		bne	.L424
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4481              		.loc 1 4684 0
 4482 004e 261D     		adds	r6, r4, #4
 4483 0050 3046     		mov	r0, r6
 4484 0052 FFF7FEFF 		bl	uxListRemove
 4485              	.LVL377:
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4486              		.loc 1 4685 0
 4487 0056 E36A     		ldr	r3, [r4, #44]
 4488 0058 0122     		movs	r2, #1
 4489 005a 9A40     		lsls	r2, r2, r3
 4490 005c 2449     		ldr	r1, .L432
 4491 005e 0868     		ldr	r0, [r1]
 4492 0060 0243     		orrs	r2, r2, r0
 4493 0062 0A60     		str	r2, [r1]
 4494 0064 03EB8303 		add	r3, r3, r3, lsl #2
 4495 0068 9A00     		lsls	r2, r3, #2
 4496 006a 3146     		mov	r1, r6
 4497 006c 2148     		ldr	r0, .L432+4
 4498 006e 1044     		add	r0, r0, r2
 4499 0070 FFF7FEFF 		bl	vListInsertEnd
 4500              	.LVL378:
ARM GAS  /tmp/ccz3PNNG.s 			page 180


4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4501              		.loc 1 4688 0
 4502 0074 A36A     		ldr	r3, [r4, #40]
 4503 0076 43B3     		cbz	r3, .L425
 4504              	.LBB184:
 4505              	.LBB185:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4506              		.loc 2 195 0
 4507              		.syntax unified
 4508              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4509 0078 4FF05003 			mov r3, #80												
 4510 007c 83F31188 		msr basepri, r3											
 4511 0080 BFF36F8F 		isb														
 4512 0084 BFF34F8F 		dsb														
 4513              	
 4514              	@ 0 "" 2
 4515              	.LVL379:
 4516              		.thumb
 4517              		.syntax unified
 4518              	.L426:
 4519 0088 FEE7     		b	.L426
 4520              	.LVL380:
 4521              	.L420:
 4522              	.LBE185:
 4523              	.LBE184:
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4524              		.loc 1 4645 0
 4525 008a E26C     		ldr	r2, [r4, #76]
 4526 008c 0132     		adds	r2, r2, #1
 4527 008e E264     		str	r2, [r4, #76]
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4528              		.loc 1 4621 0
 4529 0090 0125     		movs	r5, #1
 4530              	.LVL381:
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4531              		.loc 1 4646 0
 4532 0092 DAE7     		b	.L417
 4533              	.LVL382:
 4534              	.L421:
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4535              		.loc 1 4649 0
 4536 0094 E564     		str	r5, [r4, #76]
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4537              		.loc 1 4621 0
 4538 0096 0125     		movs	r5, #1
 4539              	.LVL383:
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4540              		.loc 1 4650 0
 4541 0098 D7E7     		b	.L417
 4542              	.LVL384:
 4543              	.L422:
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4544              		.loc 1 4653 0
 4545 009a 022B     		cmp	r3, #2
 4546 009c 11D0     		beq	.L428
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4547              		.loc 1 4655 0
ARM GAS  /tmp/ccz3PNNG.s 			page 181


 4548 009e E564     		str	r5, [r4, #76]
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4549              		.loc 1 4621 0
 4550 00a0 0125     		movs	r5, #1
 4551              	.LVL385:
 4552 00a2 D2E7     		b	.L417
 4553              	.LVL386:
 4554              	.L416:
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4555              		.loc 1 4673 0
 4556 00a4 E26C     		ldr	r2, [r4, #76]
 4557 00a6 B2F1FF3F 		cmp	r2, #-1
 4558 00aa 0CD0     		beq	.L429
 4559              	.LBB186:
 4560              	.LBB187:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4561              		.loc 2 195 0
 4562              		.syntax unified
 4563              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4564 00ac 4FF05003 			mov r3, #80												
 4565 00b0 83F31188 		msr basepri, r3											
 4566 00b4 BFF36F8F 		isb														
 4567 00b8 BFF34F8F 		dsb														
 4568              	
 4569              	@ 0 "" 2
 4570              	.LVL387:
 4571              		.thumb
 4572              		.syntax unified
 4573              	.L423:
 4574 00bc FEE7     		b	.L423
 4575              	.LVL388:
 4576              	.L427:
 4577              	.LBE187:
 4578              	.LBE186:
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4579              		.loc 1 4621 0
 4580 00be 0125     		movs	r5, #1
 4581              	.LVL389:
 4582 00c0 C3E7     		b	.L417
 4583              	.LVL390:
 4584              	.L428:
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4585              		.loc 1 4660 0
 4586 00c2 0025     		movs	r5, #0
 4587              	.LVL391:
 4588 00c4 C1E7     		b	.L417
 4589              	.LVL392:
 4590              	.L429:
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4591              		.loc 1 4621 0
 4592 00c6 0125     		movs	r5, #1
 4593              	.LVL393:
 4594 00c8 BFE7     		b	.L417
 4595              	.LVL394:
 4596              	.L425:
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4597              		.loc 1 4706 0
ARM GAS  /tmp/ccz3PNNG.s 			page 182


 4598 00ca E26A     		ldr	r2, [r4, #44]
 4599 00cc 0A4B     		ldr	r3, .L432+8
 4600 00ce 1B68     		ldr	r3, [r3]
 4601 00d0 DB6A     		ldr	r3, [r3, #44]
 4602 00d2 9A42     		cmp	r2, r3
 4603 00d4 07D9     		bls	.L424
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4604              		.loc 1 4710 0
 4605 00d6 4FF08052 		mov	r2, #268435456
 4606 00da 084B     		ldr	r3, .L432+12
 4607 00dc 1A60     		str	r2, [r3]
 4608              		.syntax unified
 4609              	@ 4710 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4610 00de BFF34F8F 		dsb
 4611              	@ 0 "" 2
 4612              	@ 4710 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4613 00e2 BFF36F8F 		isb
 4614              	@ 0 "" 2
 4615              		.thumb
 4616              		.syntax unified
 4617              	.L424:
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4618              		.loc 1 4722 0
 4619 00e6 FFF7FEFF 		bl	vPortExitCritical
 4620              	.LVL395:
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4621              		.loc 1 4725 0
 4622 00ea 2846     		mov	r0, r5
 4623 00ec F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4624              	.LVL396:
 4625              	.L433:
 4626 00ee 00BF     		.align	2
 4627              	.L432:
 4628 00f0 00000000 		.word	.LANCHOR13
 4629 00f4 00000000 		.word	.LANCHOR4
 4630 00f8 00000000 		.word	.LANCHOR10
 4631 00fc 04ED00E0 		.word	-536810236
 4632              		.cfi_endproc
 4633              	.LFE49:
 4635              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4636              		.align	1
 4637              		.global	xTaskGenericNotifyFromISR
 4638              		.syntax unified
 4639              		.thumb
 4640              		.thumb_func
 4641              		.fpu softvfp
 4643              	xTaskGenericNotifyFromISR:
 4644              	.LFB50:
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4645              		.loc 1 4733 0
 4646              		.cfi_startproc
 4647              		@ args = 4, pretend = 0, frame = 0
 4648              		@ frame_needed = 0, uses_anonymous_args = 0
 4649              	.LVL397:
 4650 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 4651              	.LCFI47:
 4652              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccz3PNNG.s 			page 183


 4653              		.cfi_offset 3, -32
 4654              		.cfi_offset 4, -28
 4655              		.cfi_offset 5, -24
 4656              		.cfi_offset 6, -20
 4657              		.cfi_offset 7, -16
 4658              		.cfi_offset 8, -12
 4659              		.cfi_offset 9, -8
 4660              		.cfi_offset 14, -4
 4661 0004 089E     		ldr	r6, [sp, #32]
 4662              	.LVL398:
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4663              		.loc 1 4739 0
 4664 0006 10B3     		cbz	r0, .L456
 4665 0008 0446     		mov	r4, r0
 4666 000a 9946     		mov	r9, r3
 4667 000c 1746     		mov	r7, r2
 4668 000e 0D46     		mov	r5, r1
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4669              		.loc 1 4757 0
 4670 0010 FFF7FEFF 		bl	vPortValidateInterruptPriority
 4671              	.LVL399:
 4672              	.LBB188:
 4673              	.LBB189:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4674              		.loc 2 211 0
 4675              		.syntax unified
 4676              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4677 0014 EFF31188 			mrs r8, basepri											
 4678 0018 4FF05003 		mov r3, #80												
 4679 001c 83F31188 		msr basepri, r3											
 4680 0020 BFF36F8F 		isb														
 4681 0024 BFF34F8F 		dsb														
 4682              	
 4683              	@ 0 "" 2
 4684              		.thumb
 4685              		.syntax unified
 4686              	.LBE189:
 4687              	.LBE188:
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4688              		.loc 1 4763 0
 4689 0028 B9F1000F 		cmp	r9, #0
 4690 002c 02D0     		beq	.L437
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4691              		.loc 1 4765 0
 4692 002e E36C     		ldr	r3, [r4, #76]
 4693 0030 C9F80030 		str	r3, [r9]
 4694              	.L437:
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4695              		.loc 1 4768 0
 4696 0034 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4697 0038 DBB2     		uxtb	r3, r3
 4698              	.LVL400:
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4699              		.loc 1 4769 0
 4700 003a 0222     		movs	r2, #2
 4701 003c 84F85020 		strb	r2, [r4, #80]
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccz3PNNG.s 			page 184


 4702              		.loc 1 4771 0
 4703 0040 042F     		cmp	r7, #4
 4704 0042 2BD8     		bhi	.L438
 4705 0044 DFE807F0 		tbb	[pc, r7]
 4706              	.L440:
 4707 0048 37       		.byte	(.L452-.L440)/2
 4708 0049 0C       		.byte	(.L441-.L440)/2
 4709 004a 1D       		.byte	(.L442-.L440)/2
 4710 004b 22       		.byte	(.L443-.L440)/2
 4711 004c 25       		.byte	(.L444-.L440)/2
 4712              	.LVL401:
 4713 004d 00       		.p2align 1
 4714              	.L456:
 4715              	.LBB190:
 4716              	.LBB191:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4717              		.loc 2 195 0
 4718              		.syntax unified
 4719              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4720 004e 4FF05003 			mov r3, #80												
 4721 0052 83F31188 		msr basepri, r3											
 4722 0056 BFF36F8F 		isb														
 4723 005a BFF34F8F 		dsb														
 4724              	
 4725              	@ 0 "" 2
 4726              	.LVL402:
 4727              		.thumb
 4728              		.syntax unified
 4729              	.L436:
 4730 005e FEE7     		b	.L436
 4731              	.LVL403:
 4732              	.L441:
 4733              	.LBE191:
 4734              	.LBE190:
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4735              		.loc 1 4774 0
 4736 0060 E26C     		ldr	r2, [r4, #76]
 4737 0062 1543     		orrs	r5, r5, r2
 4738              	.LVL404:
 4739 0064 E564     		str	r5, [r4, #76]
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4740              		.loc 1 4736 0
 4741 0066 0125     		movs	r5, #1
 4742              	.L439:
 4743              	.LVL405:
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4744              		.loc 1 4814 0
 4745 0068 012B     		cmp	r3, #1
 4746 006a 4CD1     		bne	.L446
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4747              		.loc 1 4817 0
 4748 006c A36A     		ldr	r3, [r4, #40]
 4749              	.LVL406:
 4750 006e 43B3     		cbz	r3, .L447
 4751              	.LBB192:
 4752              	.LBB193:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
ARM GAS  /tmp/ccz3PNNG.s 			page 185


 4753              		.loc 2 195 0
 4754              		.syntax unified
 4755              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4756 0070 4FF05003 			mov r3, #80												
 4757 0074 83F31188 		msr basepri, r3											
 4758 0078 BFF36F8F 		isb														
 4759 007c BFF34F8F 		dsb														
 4760              	
 4761              	@ 0 "" 2
 4762              	.LVL407:
 4763              		.thumb
 4764              		.syntax unified
 4765              	.L448:
 4766 0080 FEE7     		b	.L448
 4767              	.LVL408:
 4768              	.L442:
 4769              	.LBE193:
 4770              	.LBE192:
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4771              		.loc 1 4778 0
 4772 0082 E26C     		ldr	r2, [r4, #76]
 4773 0084 0132     		adds	r2, r2, #1
 4774 0086 E264     		str	r2, [r4, #76]
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4775              		.loc 1 4736 0
 4776 0088 0125     		movs	r5, #1
 4777              	.LVL409:
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4778              		.loc 1 4779 0
 4779 008a EDE7     		b	.L439
 4780              	.LVL410:
 4781              	.L443:
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4782              		.loc 1 4782 0
 4783 008c E564     		str	r5, [r4, #76]
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4784              		.loc 1 4736 0
 4785 008e 0125     		movs	r5, #1
 4786              	.LVL411:
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4787              		.loc 1 4783 0
 4788 0090 EAE7     		b	.L439
 4789              	.LVL412:
 4790              	.L444:
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4791              		.loc 1 4786 0
 4792 0092 022B     		cmp	r3, #2
 4793 0094 11D0     		beq	.L453
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4794              		.loc 1 4788 0
 4795 0096 E564     		str	r5, [r4, #76]
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4796              		.loc 1 4736 0
 4797 0098 0125     		movs	r5, #1
 4798              	.LVL413:
 4799 009a E5E7     		b	.L439
 4800              	.LVL414:
ARM GAS  /tmp/ccz3PNNG.s 			page 186


 4801              	.L438:
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4802              		.loc 1 4806 0
 4803 009c E26C     		ldr	r2, [r4, #76]
 4804 009e B2F1FF3F 		cmp	r2, #-1
 4805 00a2 0CD0     		beq	.L454
 4806              	.LBB194:
 4807              	.LBB195:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4808              		.loc 2 195 0
 4809              		.syntax unified
 4810              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4811 00a4 4FF05003 			mov r3, #80												
 4812 00a8 83F31188 		msr basepri, r3											
 4813 00ac BFF36F8F 		isb														
 4814 00b0 BFF34F8F 		dsb														
 4815              	
 4816              	@ 0 "" 2
 4817              	.LVL415:
 4818              		.thumb
 4819              		.syntax unified
 4820              	.L445:
 4821 00b4 FEE7     		b	.L445
 4822              	.LVL416:
 4823              	.L452:
 4824              	.LBE195:
 4825              	.LBE194:
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4826              		.loc 1 4736 0
 4827 00b6 0125     		movs	r5, #1
 4828              	.LVL417:
 4829 00b8 D6E7     		b	.L439
 4830              	.LVL418:
 4831              	.L453:
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4832              		.loc 1 4793 0
 4833 00ba 0025     		movs	r5, #0
 4834              	.LVL419:
 4835 00bc D4E7     		b	.L439
 4836              	.LVL420:
 4837              	.L454:
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4838              		.loc 1 4736 0
 4839 00be 0125     		movs	r5, #1
 4840              	.LVL421:
 4841 00c0 D2E7     		b	.L439
 4842              	.LVL422:
 4843              	.L447:
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4844              		.loc 1 4819 0
 4845 00c2 164B     		ldr	r3, .L457
 4846 00c4 1B68     		ldr	r3, [r3]
 4847 00c6 1BBB     		cbnz	r3, .L449
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4848              		.loc 1 4821 0
 4849 00c8 271D     		adds	r7, r4, #4
 4850 00ca 3846     		mov	r0, r7
ARM GAS  /tmp/ccz3PNNG.s 			page 187


 4851 00cc FFF7FEFF 		bl	uxListRemove
 4852              	.LVL423:
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4853              		.loc 1 4822 0
 4854 00d0 E36A     		ldr	r3, [r4, #44]
 4855 00d2 0122     		movs	r2, #1
 4856 00d4 9A40     		lsls	r2, r2, r3
 4857 00d6 1249     		ldr	r1, .L457+4
 4858 00d8 0868     		ldr	r0, [r1]
 4859 00da 0243     		orrs	r2, r2, r0
 4860 00dc 0A60     		str	r2, [r1]
 4861 00de 03EB8303 		add	r3, r3, r3, lsl #2
 4862 00e2 9A00     		lsls	r2, r3, #2
 4863 00e4 3946     		mov	r1, r7
 4864 00e6 0F48     		ldr	r0, .L457+8
 4865 00e8 1044     		add	r0, r0, r2
 4866 00ea FFF7FEFF 		bl	vListInsertEnd
 4867              	.LVL424:
 4868              	.L450:
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4869              		.loc 1 4831 0
 4870 00ee E26A     		ldr	r2, [r4, #44]
 4871 00f0 0D4B     		ldr	r3, .L457+12
 4872 00f2 1B68     		ldr	r3, [r3]
 4873 00f4 DB6A     		ldr	r3, [r3, #44]
 4874 00f6 9A42     		cmp	r2, r3
 4875 00f8 05D9     		bls	.L446
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4876              		.loc 1 4835 0
 4877 00fa 0EB1     		cbz	r6, .L451
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4878              		.loc 1 4837 0
 4879 00fc 0123     		movs	r3, #1
 4880 00fe 3360     		str	r3, [r6]
 4881              	.L451:
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4882              		.loc 1 4843 0
 4883 0100 0122     		movs	r2, #1
 4884 0102 0A4B     		ldr	r3, .L457+16
 4885 0104 1A60     		str	r2, [r3]
 4886              	.L446:
 4887              	.LVL425:
 4888              	.LBB196:
 4889              	.LBB197:
 4890              		.loc 2 229 0
 4891              		.syntax unified
 4892              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4893 0106 88F31188 			msr basepri, r8	
 4894              	@ 0 "" 2
 4895              	.LVL426:
 4896              		.thumb
 4897              		.syntax unified
 4898              	.LBE197:
 4899              	.LBE196:
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4900              		.loc 1 4854 0
 4901 010a 2846     		mov	r0, r5
ARM GAS  /tmp/ccz3PNNG.s 			page 188


 4902 010c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4903              	.LVL427:
 4904              	.L449:
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4905              		.loc 1 4828 0
 4906 0110 04F11801 		add	r1, r4, #24
 4907 0114 0648     		ldr	r0, .L457+20
 4908 0116 FFF7FEFF 		bl	vListInsertEnd
 4909              	.LVL428:
 4910 011a E8E7     		b	.L450
 4911              	.L458:
 4912              		.align	2
 4913              	.L457:
 4914 011c 00000000 		.word	.LANCHOR16
 4915 0120 00000000 		.word	.LANCHOR13
 4916 0124 00000000 		.word	.LANCHOR4
 4917 0128 00000000 		.word	.LANCHOR10
 4918 012c 00000000 		.word	.LANCHOR20
 4919 0130 00000000 		.word	.LANCHOR1
 4920              		.cfi_endproc
 4921              	.LFE50:
 4923              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4924              		.align	1
 4925              		.global	vTaskNotifyGiveFromISR
 4926              		.syntax unified
 4927              		.thumb
 4928              		.thumb_func
 4929              		.fpu softvfp
 4931              	vTaskNotifyGiveFromISR:
 4932              	.LFB51:
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4933              		.loc 1 4862 0
 4934              		.cfi_startproc
 4935              		@ args = 0, pretend = 0, frame = 0
 4936              		@ frame_needed = 0, uses_anonymous_args = 0
 4937              	.LVL429:
 4938 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4939              	.LCFI48:
 4940              		.cfi_def_cfa_offset 24
 4941              		.cfi_offset 3, -24
 4942              		.cfi_offset 4, -20
 4943              		.cfi_offset 5, -16
 4944              		.cfi_offset 6, -12
 4945              		.cfi_offset 7, -8
 4946              		.cfi_offset 14, -4
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4947              		.loc 1 4867 0
 4948 0002 18B3     		cbz	r0, .L469
 4949 0004 0446     		mov	r4, r0
 4950 0006 0D46     		mov	r5, r1
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4951              		.loc 1 4885 0
 4952 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 4953              	.LVL430:
 4954              	.LBB198:
 4955              	.LBB199:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
ARM GAS  /tmp/ccz3PNNG.s 			page 189


 4956              		.loc 2 211 0
 4957              		.syntax unified
 4958              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4959 000c EFF31187 			mrs r7, basepri											
 4960 0010 4FF05003 		mov r3, #80												
 4961 0014 83F31188 		msr basepri, r3											
 4962 0018 BFF36F8F 		isb														
 4963 001c BFF34F8F 		dsb														
 4964              	
 4965              	@ 0 "" 2
 4966              		.thumb
 4967              		.syntax unified
 4968              	.LBE199:
 4969              	.LBE198:
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4970              		.loc 1 4891 0
 4971 0020 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4972 0024 DBB2     		uxtb	r3, r3
 4973              	.LVL431:
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4974              		.loc 1 4892 0
 4975 0026 0222     		movs	r2, #2
 4976 0028 84F85020 		strb	r2, [r4, #80]
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4977              		.loc 1 4896 0
 4978 002c E26C     		ldr	r2, [r4, #76]
 4979 002e 0132     		adds	r2, r2, #1
 4980 0030 E264     		str	r2, [r4, #76]
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4981              		.loc 1 4902 0
 4982 0032 012B     		cmp	r3, #1
 4983 0034 35D1     		bne	.L462
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4984              		.loc 1 4905 0
 4985 0036 A36A     		ldr	r3, [r4, #40]
 4986              	.LVL432:
 4987 0038 8BB1     		cbz	r3, .L463
 4988              	.LBB200:
 4989              	.LBB201:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4990              		.loc 2 195 0
 4991              		.syntax unified
 4992              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4993 003a 4FF05003 			mov r3, #80												
 4994 003e 83F31188 		msr basepri, r3											
 4995 0042 BFF36F8F 		isb														
 4996 0046 BFF34F8F 		dsb														
 4997              	
 4998              	@ 0 "" 2
 4999              	.LVL433:
 5000              		.thumb
 5001              		.syntax unified
 5002              	.L464:
 5003 004a FEE7     		b	.L464
 5004              	.LVL434:
 5005              	.L469:
 5006              	.LBE201:
ARM GAS  /tmp/ccz3PNNG.s 			page 190


 5007              	.LBE200:
 5008              	.LBB202:
 5009              	.LBB203:
 5010              		.syntax unified
 5011              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5012 004c 4FF05003 			mov r3, #80												
 5013 0050 83F31188 		msr basepri, r3											
 5014 0054 BFF36F8F 		isb														
 5015 0058 BFF34F8F 		dsb														
 5016              	
 5017              	@ 0 "" 2
 5018              	.LVL435:
 5019              		.thumb
 5020              		.syntax unified
 5021              	.L461:
 5022 005c FEE7     		b	.L461
 5023              	.LVL436:
 5024              	.L463:
 5025              	.LBE203:
 5026              	.LBE202:
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5027              		.loc 1 4907 0
 5028 005e 154B     		ldr	r3, .L470
 5029 0060 1B68     		ldr	r3, [r3]
 5030 0062 0BBB     		cbnz	r3, .L465
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5031              		.loc 1 4909 0
 5032 0064 261D     		adds	r6, r4, #4
 5033 0066 3046     		mov	r0, r6
 5034 0068 FFF7FEFF 		bl	uxListRemove
 5035              	.LVL437:
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5036              		.loc 1 4910 0
 5037 006c E36A     		ldr	r3, [r4, #44]
 5038 006e 0122     		movs	r2, #1
 5039 0070 9A40     		lsls	r2, r2, r3
 5040 0072 1149     		ldr	r1, .L470+4
 5041 0074 0868     		ldr	r0, [r1]
 5042 0076 0243     		orrs	r2, r2, r0
 5043 0078 0A60     		str	r2, [r1]
 5044 007a 03EB8303 		add	r3, r3, r3, lsl #2
 5045 007e 9A00     		lsls	r2, r3, #2
 5046 0080 3146     		mov	r1, r6
 5047 0082 0E48     		ldr	r0, .L470+8
 5048 0084 1044     		add	r0, r0, r2
 5049 0086 FFF7FEFF 		bl	vListInsertEnd
 5050              	.LVL438:
 5051              	.L466:
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5052              		.loc 1 4919 0
 5053 008a E26A     		ldr	r2, [r4, #44]
 5054 008c 0C4B     		ldr	r3, .L470+12
 5055 008e 1B68     		ldr	r3, [r3]
 5056 0090 DB6A     		ldr	r3, [r3, #44]
 5057 0092 9A42     		cmp	r2, r3
 5058 0094 05D9     		bls	.L462
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/ccz3PNNG.s 			page 191


 5059              		.loc 1 4923 0
 5060 0096 0DB1     		cbz	r5, .L467
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5061              		.loc 1 4925 0
 5062 0098 0123     		movs	r3, #1
 5063 009a 2B60     		str	r3, [r5]
 5064              	.L467:
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5065              		.loc 1 4931 0
 5066 009c 0122     		movs	r2, #1
 5067 009e 094B     		ldr	r3, .L470+16
 5068 00a0 1A60     		str	r2, [r3]
 5069              	.L462:
 5070              	.LVL439:
 5071              	.LBB204:
 5072              	.LBB205:
 5073              		.loc 2 229 0
 5074              		.syntax unified
 5075              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5076 00a2 87F31188 			msr basepri, r7	
 5077              	@ 0 "" 2
 5078              	.LVL440:
 5079              		.thumb
 5080              		.syntax unified
 5081 00a6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5082              	.LVL441:
 5083              	.L465:
 5084              	.LBE205:
 5085              	.LBE204:
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5086              		.loc 1 4916 0
 5087 00a8 04F11801 		add	r1, r4, #24
 5088 00ac 0648     		ldr	r0, .L470+20
 5089 00ae FFF7FEFF 		bl	vListInsertEnd
 5090              	.LVL442:
 5091 00b2 EAE7     		b	.L466
 5092              	.L471:
 5093              		.align	2
 5094              	.L470:
 5095 00b4 00000000 		.word	.LANCHOR16
 5096 00b8 00000000 		.word	.LANCHOR13
 5097 00bc 00000000 		.word	.LANCHOR4
 5098 00c0 00000000 		.word	.LANCHOR10
 5099 00c4 00000000 		.word	.LANCHOR20
 5100 00c8 00000000 		.word	.LANCHOR1
 5101              		.cfi_endproc
 5102              	.LFE51:
 5104              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5105              		.align	1
 5106              		.global	xTaskNotifyStateClear
 5107              		.syntax unified
 5108              		.thumb
 5109              		.thumb_func
 5110              		.fpu softvfp
 5112              	xTaskNotifyStateClear:
 5113              	.LFB52:
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /tmp/ccz3PNNG.s 			page 192


 5114              		.loc 1 4949 0
 5115              		.cfi_startproc
 5116              		@ args = 0, pretend = 0, frame = 0
 5117              		@ frame_needed = 0, uses_anonymous_args = 0
 5118              	.LVL443:
 5119 0000 10B5     		push	{r4, lr}
 5120              	.LCFI49:
 5121              		.cfi_def_cfa_offset 8
 5122              		.cfi_offset 4, -8
 5123              		.cfi_offset 14, -4
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5124              		.loc 1 4955 0
 5125 0002 0446     		mov	r4, r0
 5126 0004 58B1     		cbz	r0, .L477
 5127              	.LVL444:
 5128              	.L473:
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5129              		.loc 1 4957 0 discriminator 4
 5130 0006 FFF7FEFF 		bl	vPortEnterCritical
 5131              	.LVL445:
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5132              		.loc 1 4959 0 discriminator 4
 5133 000a 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 5134 000e DBB2     		uxtb	r3, r3
 5135 0010 022B     		cmp	r3, #2
 5136 0012 07D0     		beq	.L478
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5137              		.loc 1 4966 0
 5138 0014 0024     		movs	r4, #0
 5139              	.LVL446:
 5140              	.L474:
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5141              		.loc 1 4969 0
 5142 0016 FFF7FEFF 		bl	vPortExitCritical
 5143              	.LVL447:
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5144              		.loc 1 4972 0
 5145 001a 2046     		mov	r0, r4
 5146 001c 10BD     		pop	{r4, pc}
 5147              	.LVL448:
 5148              	.L477:
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5149              		.loc 1 4955 0 discriminator 1
 5150 001e 044B     		ldr	r3, .L479
 5151 0020 1C68     		ldr	r4, [r3]
 5152              	.LVL449:
 5153 0022 F0E7     		b	.L473
 5154              	.LVL450:
 5155              	.L478:
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 5156              		.loc 1 4961 0
 5157 0024 0023     		movs	r3, #0
 5158 0026 84F85030 		strb	r3, [r4, #80]
 5159              	.LVL451:
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5160              		.loc 1 4962 0
 5161 002a 0124     		movs	r4, #1
ARM GAS  /tmp/ccz3PNNG.s 			page 193


 5162              	.LVL452:
 5163 002c F3E7     		b	.L474
 5164              	.L480:
 5165 002e 00BF     		.align	2
 5166              	.L479:
 5167 0030 00000000 		.word	.LANCHOR10
 5168              		.cfi_endproc
 5169              	.LFE52:
 5171              		.global	pxCurrentTCB
 5172              		.section	.bss.pxCurrentTCB,"aw",%nobits
 5173              		.align	2
 5174              		.set	.LANCHOR10,. + 0
 5177              	pxCurrentTCB:
 5178 0000 00000000 		.space	4
 5179              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 5180              		.align	2
 5181              		.set	.LANCHOR2,. + 0
 5184              	pxDelayedTaskList:
 5185 0000 00000000 		.space	4
 5186              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 5187              		.align	2
 5188              		.set	.LANCHOR8,. + 0
 5191              	pxOverflowDelayedTaskList:
 5192 0000 00000000 		.space	4
 5193              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 5194              		.align	2
 5195              		.set	.LANCHOR4,. + 0
 5198              	pxReadyTasksLists:
 5199 0000 00000000 		.space	140
 5199      00000000 
 5199      00000000 
 5199      00000000 
 5199      00000000 
 5200              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 5201              		.align	2
 5202              		.set	.LANCHOR9,. + 0
 5205              	uxCurrentNumberOfTasks:
 5206 0000 00000000 		.space	4
 5207              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 5208              		.align	2
 5209              		.set	.LANCHOR14,. + 0
 5212              	uxDeletedTasksWaitingCleanUp:
 5213 0000 00000000 		.space	4
 5214              		.section	.bss.uxPendedTicks,"aw",%nobits
 5215              		.align	2
 5216              		.set	.LANCHOR19,. + 0
 5219              	uxPendedTicks:
 5220 0000 00000000 		.space	4
 5221              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 5222              		.align	2
 5223              		.set	.LANCHOR16,. + 0
 5226              	uxSchedulerSuspended:
 5227 0000 00000000 		.space	4
 5228              		.section	.bss.uxTaskNumber,"aw",%nobits
 5229              		.align	2
 5230              		.set	.LANCHOR12,. + 0
 5233              	uxTaskNumber:
ARM GAS  /tmp/ccz3PNNG.s 			page 194


 5234 0000 00000000 		.space	4
 5235              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 5236              		.align	2
 5237              		.set	.LANCHOR13,. + 0
 5240              	uxTopReadyPriority:
 5241 0000 00000000 		.space	4
 5242              		.section	.bss.xDelayedTaskList1.5558,"aw",%nobits
 5243              		.align	2
 5244              		.set	.LANCHOR5,. + 0
 5247              	xDelayedTaskList1.5558:
 5248 0000 00000000 		.space	20
 5248      00000000 
 5248      00000000 
 5248      00000000 
 5248      00000000 
 5249              		.section	.bss.xDelayedTaskList2.5559,"aw",%nobits
 5250              		.align	2
 5251              		.set	.LANCHOR6,. + 0
 5254              	xDelayedTaskList2.5559:
 5255 0000 00000000 		.space	20
 5255      00000000 
 5255      00000000 
 5255      00000000 
 5255      00000000 
 5256              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 5257              		.align	2
 5258              		.set	.LANCHOR17,. + 0
 5261              	xIdleTaskHandle:
 5262 0000 00000000 		.space	4
 5263              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 5264              		.align	2
 5265              		.set	.LANCHOR3,. + 0
 5268              	xNextTaskUnblockTime:
 5269 0000 00000000 		.space	4
 5270              		.section	.bss.xNumOfOverflows,"aw",%nobits
 5271              		.align	2
 5272              		.set	.LANCHOR18,. + 0
 5275              	xNumOfOverflows:
 5276 0000 00000000 		.space	4
 5277              		.section	.bss.xPendingReadyList,"aw",%nobits
 5278              		.align	2
 5279              		.set	.LANCHOR1,. + 0
 5282              	xPendingReadyList:
 5283 0000 00000000 		.space	20
 5283      00000000 
 5283      00000000 
 5283      00000000 
 5283      00000000 
 5284              		.section	.bss.xSchedulerRunning,"aw",%nobits
 5285              		.align	2
 5286              		.set	.LANCHOR11,. + 0
 5289              	xSchedulerRunning:
 5290 0000 00000000 		.space	4
 5291              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 5292              		.align	2
 5293              		.set	.LANCHOR0,. + 0
 5296              	xSuspendedTaskList:
ARM GAS  /tmp/ccz3PNNG.s 			page 195


 5297 0000 00000000 		.space	20
 5297      00000000 
 5297      00000000 
 5297      00000000 
 5297      00000000 
 5298              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 5299              		.align	2
 5300              		.set	.LANCHOR7,. + 0
 5303              	xTasksWaitingTermination:
 5304 0000 00000000 		.space	20
 5304      00000000 
 5304      00000000 
 5304      00000000 
 5304      00000000 
 5305              		.section	.bss.xTickCount,"aw",%nobits
 5306              		.align	2
 5307              		.set	.LANCHOR15,. + 0
 5310              	xTickCount:
 5311 0000 00000000 		.space	4
 5312              		.section	.bss.xYieldPending,"aw",%nobits
 5313              		.align	2
 5314              		.set	.LANCHOR20,. + 0
 5317              	xYieldPending:
 5318 0000 00000000 		.space	4
 5319              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 5320              		.align	2
 5321              	.LC0:
 5322 0000 49444C45 		.ascii	"IDLE\000"
 5322      00
 5323              		.text
 5324              	.Letext0:
 5325              		.file 3 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 5326              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 5327              		.file 5 "/usr/include/newlib/sys/lock.h"
 5328              		.file 6 "/usr/include/newlib/sys/_types.h"
 5329              		.file 7 "/usr/include/newlib/sys/reent.h"
 5330              		.file 8 "/usr/include/newlib/stdlib.h"
 5331              		.file 9 "/usr/include/newlib/sys/_stdint.h"
 5332              		.file 10 "Core/Inc/FreeRTOSConfig.h"
 5333              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 5334              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 5335              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 5336              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  /tmp/ccz3PNNG.s 			page 196


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccz3PNNG.s:16     .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccz3PNNG.s:22     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccz3PNNG.s:90     .text.prvTaskIsTaskSuspended:0000000000000038 $d
     /tmp/ccz3PNNG.s:96     .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccz3PNNG.s:102    .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccz3PNNG.s:135    .text.prvResetNextTaskUnblockTime:0000000000000024 $d
     /tmp/ccz3PNNG.s:141    .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccz3PNNG.s:147    .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/ccz3PNNG.s:174    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/ccz3PNNG.s:180    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/ccz3PNNG.s:316    .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccz3PNNG.s:322    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccz3PNNG.s:388    .text.prvInitialiseTaskLists:0000000000000048 $d
     /tmp/ccz3PNNG.s:400    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/ccz3PNNG.s:406    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/ccz3PNNG.s:512    .text.prvAddNewTaskToReadyList:000000000000008c $d
     /tmp/ccz3PNNG.s:523    .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccz3PNNG.s:529    .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccz3PNNG.s:596    .text.prvCheckTasksWaitingTermination:0000000000000040 $d
     /tmp/ccz3PNNG.s:603    .text.prvIdleTask:0000000000000000 $t
     /tmp/ccz3PNNG.s:609    .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccz3PNNG.s:649    .text.prvIdleTask:0000000000000020 $d
     /tmp/ccz3PNNG.s:655    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccz3PNNG.s:661    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccz3PNNG.s:760    .text.prvAddCurrentTaskToDelayedList:000000000000007c $d
     /tmp/ccz3PNNG.s:771    .text.xTaskCreate:0000000000000000 $t
     /tmp/ccz3PNNG.s:778    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/ccz3PNNG.s:883    .text.vTaskDelete:0000000000000000 $t
     /tmp/ccz3PNNG.s:890    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccz3PNNG.s:1041   .text.vTaskDelete:00000000000000b8 $d
     /tmp/ccz3PNNG.s:1055   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccz3PNNG.s:1062   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccz3PNNG.s:1101   .text.uxTaskPriorityGet:000000000000001c $d
     /tmp/ccz3PNNG.s:1106   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccz3PNNG.s:1113   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccz3PNNG.s:1176   .text.uxTaskPriorityGetFromISR:000000000000002c $d
     /tmp/ccz3PNNG.s:1181   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccz3PNNG.s:1188   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccz3PNNG.s:1368   .text.vTaskPrioritySet:00000000000000d0 $d
     /tmp/ccz3PNNG.s:1376   .text.vTaskResume:0000000000000000 $t
     /tmp/ccz3PNNG.s:1383   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccz3PNNG.s:1486   .text.vTaskResume:0000000000000078 $d
     /tmp/ccz3PNNG.s:1494   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccz3PNNG.s:1501   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccz3PNNG.s:1638   .text.xTaskResumeFromISR:0000000000000094 $d
     /tmp/ccz3PNNG.s:1647   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccz3PNNG.s:1654   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccz3PNNG.s:1748   .text.vTaskStartScheduler:0000000000000064 $d
     /tmp/ccz3PNNG.s:1760   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccz3PNNG.s:1767   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccz3PNNG.s:1804   .text.vTaskEndScheduler:0000000000000020 $d
     /tmp/ccz3PNNG.s:1809   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccz3PNNG.s:1816   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccz3PNNG.s:1832   .text.vTaskSuspendAll:000000000000000c $d
     /tmp/ccz3PNNG.s:1837   .text.xTaskGetTickCount:0000000000000000 $t
ARM GAS  /tmp/ccz3PNNG.s 			page 197


     /tmp/ccz3PNNG.s:1844   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccz3PNNG.s:1860   .text.xTaskGetTickCount:0000000000000008 $d
     /tmp/ccz3PNNG.s:1865   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccz3PNNG.s:1872   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccz3PNNG.s:1895   .text.xTaskGetTickCountFromISR:000000000000000c $d
     /tmp/ccz3PNNG.s:1900   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccz3PNNG.s:1907   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/ccz3PNNG.s:1922   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
     /tmp/ccz3PNNG.s:1927   .text.pcTaskGetName:0000000000000000 $t
     /tmp/ccz3PNNG.s:1934   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/ccz3PNNG.s:1980   .text.pcTaskGetName:0000000000000024 $d
     /tmp/ccz3PNNG.s:1987   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/ccz3PNNG.s:1994   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccz3PNNG.s:2195   .text.xTaskIncrementTick:00000000000000ec $d
     /tmp/ccz3PNNG.s:2210   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccz3PNNG.s:2217   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccz3PNNG.s:2406   .text.xTaskResumeAll:00000000000000d8 $d
     /tmp/ccz3PNNG.s:2419   .text.vTaskDelay:0000000000000000 $t
     /tmp/ccz3PNNG.s:2426   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccz3PNNG.s:2503   .text.vTaskDelay:0000000000000048 $d
     /tmp/ccz3PNNG.s:2509   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccz3PNNG.s:2516   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccz3PNNG.s:2644   .text.vTaskSwitchContext:0000000000000084 $d
     /tmp/ccz3PNNG.s:2655   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccz3PNNG.s:2662   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccz3PNNG.s:2829   .text.vTaskSuspend:00000000000000cc $d
     /tmp/ccz3PNNG.s:2841   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccz3PNNG.s:2848   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccz3PNNG.s:2900   .text.vTaskPlaceOnEventList:000000000000002c $d
     /tmp/ccz3PNNG.s:2905   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccz3PNNG.s:2912   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccz3PNNG.s:2999   .text.vTaskPlaceOnUnorderedEventList:0000000000000054 $d
     /tmp/ccz3PNNG.s:3005   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccz3PNNG.s:3012   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccz3PNNG.s:3114   .text.xTaskRemoveFromEventList:0000000000000074 $d
     /tmp/ccz3PNNG.s:3124   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccz3PNNG.s:3131   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
     /tmp/ccz3PNNG.s:3234   .text.vTaskRemoveFromUnorderedEventList:0000000000000074 $d
     /tmp/ccz3PNNG.s:3245   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccz3PNNG.s:3252   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccz3PNNG.s:3306   .text.vTaskSetTimeOutState:0000000000000030 $d
     /tmp/ccz3PNNG.s:3312   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
     /tmp/ccz3PNNG.s:3319   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
     /tmp/ccz3PNNG.s:3339   .text.vTaskInternalSetTimeOutState:0000000000000010 $d
     /tmp/ccz3PNNG.s:3345   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccz3PNNG.s:3352   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccz3PNNG.s:3486   .text.xTaskCheckForTimeOut:0000000000000078 $d
     /tmp/ccz3PNNG.s:3493   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccz3PNNG.s:3500   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccz3PNNG.s:3515   .text.vTaskMissedYield:0000000000000008 $d
     /tmp/ccz3PNNG.s:3520   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccz3PNNG.s:3527   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccz3PNNG.s:3543   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
     /tmp/ccz3PNNG.s:3548   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/ccz3PNNG.s:3555   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/ccz3PNNG.s:3586   .text.xTaskGetSchedulerState:0000000000000018 $d
     /tmp/ccz3PNNG.s:3592   .text.xTaskPriorityInherit:0000000000000000 $t
ARM GAS  /tmp/ccz3PNNG.s 			page 198


     /tmp/ccz3PNNG.s:3599   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
     /tmp/ccz3PNNG.s:3733   .text.xTaskPriorityInherit:00000000000000ac $d
     /tmp/ccz3PNNG.s:3740   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccz3PNNG.s:3747   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccz3PNNG.s:3899   .text.xTaskPriorityDisinherit:00000000000000a8 $d
     /tmp/ccz3PNNG.s:3906   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
     /tmp/ccz3PNNG.s:3913   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/ccz3PNNG.s:4071   .text.vTaskPriorityDisinheritAfterTimeout:00000000000000b4 $d
     /tmp/ccz3PNNG.s:4078   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccz3PNNG.s:4085   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccz3PNNG.s:4108   .text.uxTaskResetEventItemValue:0000000000000014 $d
     /tmp/ccz3PNNG.s:4113   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccz3PNNG.s:4120   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/ccz3PNNG.s:4146   .text.pvTaskIncrementMutexHeldCount:0000000000000018 $d
     /tmp/ccz3PNNG.s:4151   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/ccz3PNNG.s:4158   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/ccz3PNNG.s:4254   .text.ulTaskNotifyTake:0000000000000070 $d
     /tmp/ccz3PNNG.s:4260   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/ccz3PNNG.s:4267   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/ccz3PNNG.s:4383   .text.xTaskNotifyWait:0000000000000090 $d
     /tmp/ccz3PNNG.s:4389   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/ccz3PNNG.s:4396   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/ccz3PNNG.s:4441   .text.xTaskGenericNotify:000000000000002a $d
     /tmp/ccz3PNNG.s:4628   .text.xTaskGenericNotify:00000000000000f0 $d
     /tmp/ccz3PNNG.s:4636   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccz3PNNG.s:4643   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/ccz3PNNG.s:4707   .text.xTaskGenericNotifyFromISR:0000000000000048 $d
     /tmp/ccz3PNNG.s:4914   .text.xTaskGenericNotifyFromISR:000000000000011c $d
     /tmp/ccz3PNNG.s:4924   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/ccz3PNNG.s:4931   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/ccz3PNNG.s:5095   .text.vTaskNotifyGiveFromISR:00000000000000b4 $d
     /tmp/ccz3PNNG.s:5105   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/ccz3PNNG.s:5112   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/ccz3PNNG.s:5167   .text.xTaskNotifyStateClear:0000000000000030 $d
     /tmp/ccz3PNNG.s:5177   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccz3PNNG.s:5173   .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccz3PNNG.s:5180   .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccz3PNNG.s:5184   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccz3PNNG.s:5187   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccz3PNNG.s:5191   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccz3PNNG.s:5194   .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccz3PNNG.s:5198   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccz3PNNG.s:5201   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccz3PNNG.s:5205   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccz3PNNG.s:5208   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/ccz3PNNG.s:5212   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccz3PNNG.s:5215   .bss.uxPendedTicks:0000000000000000 $d
     /tmp/ccz3PNNG.s:5219   .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/ccz3PNNG.s:5222   .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccz3PNNG.s:5226   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccz3PNNG.s:5229   .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccz3PNNG.s:5233   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccz3PNNG.s:5236   .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccz3PNNG.s:5240   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccz3PNNG.s:5243   .bss.xDelayedTaskList1.5558:0000000000000000 $d
     /tmp/ccz3PNNG.s:5247   .bss.xDelayedTaskList1.5558:0000000000000000 xDelayedTaskList1.5558
     /tmp/ccz3PNNG.s:5250   .bss.xDelayedTaskList2.5559:0000000000000000 $d
ARM GAS  /tmp/ccz3PNNG.s 			page 199


     /tmp/ccz3PNNG.s:5254   .bss.xDelayedTaskList2.5559:0000000000000000 xDelayedTaskList2.5559
     /tmp/ccz3PNNG.s:5257   .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/ccz3PNNG.s:5261   .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/ccz3PNNG.s:5264   .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccz3PNNG.s:5268   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccz3PNNG.s:5271   .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccz3PNNG.s:5275   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccz3PNNG.s:5278   .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccz3PNNG.s:5282   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccz3PNNG.s:5285   .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccz3PNNG.s:5289   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccz3PNNG.s:5292   .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccz3PNNG.s:5296   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccz3PNNG.s:5299   .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccz3PNNG.s:5303   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccz3PNNG.s:5306   .bss.xTickCount:0000000000000000 $d
     /tmp/ccz3PNNG.s:5310   .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccz3PNNG.s:5313   .bss.xYieldPending:0000000000000000 $d
     /tmp/ccz3PNNG.s:5317   .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/ccz3PNNG.s:5320   .rodata.vTaskStartScheduler.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
     /tmp/ccz3PNNG.s:4447   .text.xTaskGenericNotify:000000000000002f $d
     /tmp/ccz3PNNG.s:4447   .text.xTaskGenericNotify:0000000000000030 $t
     /tmp/ccz3PNNG.s:4713   .text.xTaskGenericNotifyFromISR:000000000000004d $d
     /tmp/ccz3PNNG.s:4713   .text.xTaskGenericNotifyFromISR:000000000000004e $t

UNDEFINED SYMBOLS
vPortFree
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
xPortStartScheduler
vPortEndScheduler
