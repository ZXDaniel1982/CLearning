ARM GAS  /tmp/ccNzrNGN.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_TIM_PeriodElapsedCallback
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_TIM_PeriodElapsedCallback:
  24              	.LFB71:
  25              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** 
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * This notice applies to any and all portions of this file
   8:Core/Src/main.c ****   * that are not between comment pairs USER CODE BEGIN and
   9:Core/Src/main.c ****   * USER CODE END. Other portions of this file, whether 
  10:Core/Src/main.c ****   * inserted by the user or by software development tools
  11:Core/Src/main.c ****   * are owned by their respective copyright owners.
  12:Core/Src/main.c ****   *
  13:Core/Src/main.c ****   * Copyright (c) 2018 STMicroelectronics International N.V. 
  14:Core/Src/main.c ****   * All rights reserved.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   * Redistribution and use in source and binary forms, with or without 
  17:Core/Src/main.c ****   * modification, are permitted, provided that the following conditions are met:
  18:Core/Src/main.c ****   *
  19:Core/Src/main.c ****   * 1. Redistribution of source code must retain the above copyright notice, 
  20:Core/Src/main.c ****   *    this list of conditions and the following disclaimer.
  21:Core/Src/main.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Core/Src/main.c ****   *    this list of conditions and the following disclaimer in the documentation
  23:Core/Src/main.c ****   *    and/or other materials provided with the distribution.
  24:Core/Src/main.c ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  25:Core/Src/main.c ****   *    contributors to this software may be used to endorse or promote products 
  26:Core/Src/main.c ****   *    derived from this software without specific written permission.
  27:Core/Src/main.c ****   * 4. This software, including modifications and/or derivative works of this 
  28:Core/Src/main.c ****   *    software, must execute solely and exclusively on microcontroller or
  29:Core/Src/main.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Core/Src/main.c ****   * 5. Redistribution and use of this software other than as permitted under 
  31:Core/Src/main.c ****   *    this license is void and will automatically terminate your rights under 
  32:Core/Src/main.c ****   *    this license. 
  33:Core/Src/main.c ****   *
ARM GAS  /tmp/ccNzrNGN.s 			page 2


  34:Core/Src/main.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  35:Core/Src/main.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  36:Core/Src/main.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  37:Core/Src/main.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Core/Src/main.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  39:Core/Src/main.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Core/Src/main.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Core/Src/main.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  42:Core/Src/main.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  43:Core/Src/main.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  44:Core/Src/main.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Core/Src/main.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Core/Src/main.c ****   *
  47:Core/Src/main.c ****   ******************************************************************************
  48:Core/Src/main.c ****   */
  49:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  50:Core/Src/main.c **** #include "main.h"
  51:Core/Src/main.c **** #include "stm32f1xx_hal.h"
  52:Core/Src/main.c **** #include "cmsis_os.h"
  53:Core/Src/main.c **** #include "sdio.h"
  54:Core/Src/main.c **** #include "spi.h"
  55:Core/Src/main.c **** #include "usart.h"
  56:Core/Src/main.c **** #include "gpio.h"
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** /* USER CODE END Includes */
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* USER CODE BEGIN PV */
  65:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* USER CODE END PV */
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  70:Core/Src/main.c **** void SystemClock_Config(void);
  71:Core/Src/main.c **** void MX_FREERTOS_Init(void);
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  74:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** /* USER CODE END PFP */
  77:Core/Src/main.c **** 
  78:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** /* USER CODE END 0 */
  81:Core/Src/main.c **** 
  82:Core/Src/main.c **** /**
  83:Core/Src/main.c ****   * @brief  The application entry point.
  84:Core/Src/main.c ****   *
  85:Core/Src/main.c ****   * @retval None
  86:Core/Src/main.c ****   */
  87:Core/Src/main.c **** int main(void)
  88:Core/Src/main.c **** {
  89:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  90:Core/Src/main.c **** 
ARM GAS  /tmp/ccNzrNGN.s 			page 3


  91:Core/Src/main.c ****   /* USER CODE END 1 */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* MCU Configuration----------------------------------------------------------*/
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  96:Core/Src/main.c ****   HAL_Init();
  97:Core/Src/main.c **** 
  98:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE END Init */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* Configure the system clock */
 103:Core/Src/main.c ****   SystemClock_Config();
 104:Core/Src/main.c **** 
 105:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****   /* USER CODE END SysInit */
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   /* Initialize all configured peripherals */
 110:Core/Src/main.c ****   MX_GPIO_Init();
 111:Core/Src/main.c ****   MX_USART1_UART_Init();
 112:Core/Src/main.c ****   MX_SPI1_Init();
 113:Core/Src/main.c ****   MX_SDIO_SD_Init();
 114:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   /* USER CODE END 2 */
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****   /* Call init function for freertos objects (in freertos.c) */
 119:Core/Src/main.c ****   MX_FREERTOS_Init();
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****   /* Start scheduler */
 122:Core/Src/main.c ****   osKernelStart();
 123:Core/Src/main.c ****   
 124:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 125:Core/Src/main.c **** 
 126:Core/Src/main.c ****   /* Infinite loop */
 127:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 128:Core/Src/main.c ****   while (1)
 129:Core/Src/main.c ****   {
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****   /* USER CODE END WHILE */
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****   /* USER CODE BEGIN 3 */
 134:Core/Src/main.c **** 
 135:Core/Src/main.c ****   }
 136:Core/Src/main.c ****   /* USER CODE END 3 */
 137:Core/Src/main.c **** 
 138:Core/Src/main.c **** }
 139:Core/Src/main.c **** 
 140:Core/Src/main.c **** /**
 141:Core/Src/main.c ****   * @brief System Clock Configuration
 142:Core/Src/main.c ****   * @retval None
 143:Core/Src/main.c ****   */
 144:Core/Src/main.c **** void SystemClock_Config(void)
 145:Core/Src/main.c **** {
 146:Core/Src/main.c **** 
 147:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct;
ARM GAS  /tmp/ccNzrNGN.s 			page 4


 148:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 149:Core/Src/main.c **** 
 150:Core/Src/main.c ****     /**Initializes the CPU, AHB and APB busses clocks 
 151:Core/Src/main.c ****     */
 152:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 153:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 154:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 155:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 156:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 157:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 158:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 159:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 160:Core/Src/main.c ****   {
 161:Core/Src/main.c ****     _Error_Handler(__FILE__, __LINE__);
 162:Core/Src/main.c ****   }
 163:Core/Src/main.c **** 
 164:Core/Src/main.c ****     /**Initializes the CPU, AHB and APB busses clocks 
 165:Core/Src/main.c ****     */
 166:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 167:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 168:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 169:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 170:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 171:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 172:Core/Src/main.c **** 
 173:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 174:Core/Src/main.c ****   {
 175:Core/Src/main.c ****     _Error_Handler(__FILE__, __LINE__);
 176:Core/Src/main.c ****   }
 177:Core/Src/main.c **** 
 178:Core/Src/main.c ****     /**Configure the Systick interrupt time 
 179:Core/Src/main.c ****     */
 180:Core/Src/main.c ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 181:Core/Src/main.c **** 
 182:Core/Src/main.c ****     /**Configure the Systick 
 183:Core/Src/main.c ****     */
 184:Core/Src/main.c ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   /* SysTick_IRQn interrupt configuration */
 187:Core/Src/main.c ****   HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 188:Core/Src/main.c **** }
 189:Core/Src/main.c **** 
 190:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 191:Core/Src/main.c **** 
 192:Core/Src/main.c **** /* USER CODE END 4 */
 193:Core/Src/main.c **** 
 194:Core/Src/main.c **** /**
 195:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 196:Core/Src/main.c ****   * @note   This function is called  when TIM1 interrupt took place, inside
 197:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 198:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 199:Core/Src/main.c ****   * @param  htim : TIM handle
 200:Core/Src/main.c ****   * @retval None
 201:Core/Src/main.c ****   */
 202:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 203:Core/Src/main.c **** {
  26              		.loc 1 203 0
ARM GAS  /tmp/ccNzrNGN.s 			page 5


  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 08B5     		push	{r3, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
 204:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 205:Core/Src/main.c **** 
 206:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 207:Core/Src/main.c ****   if (htim->Instance == TIM1) {
  36              		.loc 1 207 0
  37 0002 0268     		ldr	r2, [r0]
  38 0004 034B     		ldr	r3, .L5
  39 0006 9A42     		cmp	r2, r3
  40 0008 00D0     		beq	.L4
  41              	.LVL1:
  42              	.L1:
  43 000a 08BD     		pop	{r3, pc}
  44              	.LVL2:
  45              	.L4:
 208:Core/Src/main.c ****     HAL_IncTick();
  46              		.loc 1 208 0
  47 000c FFF7FEFF 		bl	HAL_IncTick
  48              	.LVL3:
 209:Core/Src/main.c ****   }
 210:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 213:Core/Src/main.c **** }
  49              		.loc 1 213 0
  50 0010 FBE7     		b	.L1
  51              	.L6:
  52 0012 00BF     		.align	2
  53              	.L5:
  54 0014 002C0140 		.word	1073818624
  55              		.cfi_endproc
  56              	.LFE71:
  58              		.section	.text._Error_Handler,"ax",%progbits
  59              		.align	1
  60              		.global	_Error_Handler
  61              		.syntax unified
  62              		.thumb
  63              		.thumb_func
  64              		.fpu softvfp
  66              	_Error_Handler:
  67              	.LFB72:
 214:Core/Src/main.c **** 
 215:Core/Src/main.c **** /**
 216:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 217:Core/Src/main.c ****   * @param  file: The file name as string.
 218:Core/Src/main.c ****   * @param  line: The line in file as a number.
 219:Core/Src/main.c ****   * @retval None
 220:Core/Src/main.c ****   */
 221:Core/Src/main.c **** void _Error_Handler(char *file, int line)
ARM GAS  /tmp/ccNzrNGN.s 			page 6


 222:Core/Src/main.c **** {
  68              		.loc 1 222 0
  69              		.cfi_startproc
  70              		@ Volatile: function does not return.
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 0, uses_anonymous_args = 0
  73              		@ link register save eliminated.
  74              	.LVL4:
  75              	.L8:
  76 0000 FEE7     		b	.L8
  77              		.cfi_endproc
  78              	.LFE72:
  80              		.section	.text.SystemClock_Config,"ax",%progbits
  81              		.align	1
  82              		.global	SystemClock_Config
  83              		.syntax unified
  84              		.thumb
  85              		.thumb_func
  86              		.fpu softvfp
  88              	SystemClock_Config:
  89              	.LFB70:
 145:Core/Src/main.c **** 
  90              		.loc 1 145 0
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 64
  93              		@ frame_needed = 0, uses_anonymous_args = 0
 145:Core/Src/main.c **** 
  94              		.loc 1 145 0
  95 0000 00B5     		push	{lr}
  96              	.LCFI1:
  97              		.cfi_def_cfa_offset 4
  98              		.cfi_offset 14, -4
  99 0002 91B0     		sub	sp, sp, #68
 100              	.LCFI2:
 101              		.cfi_def_cfa_offset 72
 152:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 102              		.loc 1 152 0
 103 0004 0122     		movs	r2, #1
 104 0006 0692     		str	r2, [sp, #24]
 153:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 105              		.loc 1 153 0
 106 0008 4FF48033 		mov	r3, #65536
 107 000c 0793     		str	r3, [sp, #28]
 154:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 108              		.loc 1 154 0
 109 000e 0021     		movs	r1, #0
 110 0010 0891     		str	r1, [sp, #32]
 155:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 111              		.loc 1 155 0
 112 0012 0A92     		str	r2, [sp, #40]
 156:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 113              		.loc 1 156 0
 114 0014 0222     		movs	r2, #2
 115 0016 0D92     		str	r2, [sp, #52]
 157:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 116              		.loc 1 157 0
 117 0018 0E93     		str	r3, [sp, #56]
ARM GAS  /tmp/ccNzrNGN.s 			page 7


 158:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 118              		.loc 1 158 0
 119 001a 4FF4E013 		mov	r3, #1835008
 120 001e 0F93     		str	r3, [sp, #60]
 159:Core/Src/main.c ****   {
 121              		.loc 1 159 0
 122 0020 06A8     		add	r0, sp, #24
 123 0022 FFF7FEFF 		bl	HAL_RCC_OscConfig
 124              	.LVL5:
 125 0026 08BB     		cbnz	r0, .L13
 166:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 126              		.loc 1 166 0
 127 0028 0F23     		movs	r3, #15
 128 002a 0193     		str	r3, [sp, #4]
 168:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 129              		.loc 1 168 0
 130 002c 0221     		movs	r1, #2
 131 002e 0291     		str	r1, [sp, #8]
 169:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 132              		.loc 1 169 0
 133 0030 0023     		movs	r3, #0
 134 0032 0393     		str	r3, [sp, #12]
 170:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 135              		.loc 1 170 0
 136 0034 4FF48062 		mov	r2, #1024
 137 0038 0492     		str	r2, [sp, #16]
 171:Core/Src/main.c **** 
 138              		.loc 1 171 0
 139 003a 0593     		str	r3, [sp, #20]
 173:Core/Src/main.c ****   {
 140              		.loc 1 173 0
 141 003c 01A8     		add	r0, sp, #4
 142 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 143              	.LVL6:
 144 0042 B8B9     		cbnz	r0, .L14
 180:Core/Src/main.c **** 
 145              		.loc 1 180 0
 146 0044 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 147              	.LVL7:
 148 0048 0C4B     		ldr	r3, .L15
 149 004a A3FB0030 		umull	r3, r0, r3, r0
 150 004e 8009     		lsrs	r0, r0, #6
 151 0050 FFF7FEFF 		bl	HAL_SYSTICK_Config
 152              	.LVL8:
 184:Core/Src/main.c **** 
 153              		.loc 1 184 0
 154 0054 0420     		movs	r0, #4
 155 0056 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 156              	.LVL9:
 187:Core/Src/main.c **** }
 157              		.loc 1 187 0
 158 005a 0022     		movs	r2, #0
 159 005c 0F21     		movs	r1, #15
 160 005e 4FF0FF30 		mov	r0, #-1
 161 0062 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 162              	.LVL10:
 188:Core/Src/main.c **** 
ARM GAS  /tmp/ccNzrNGN.s 			page 8


 163              		.loc 1 188 0
 164 0066 11B0     		add	sp, sp, #68
 165              	.LCFI3:
 166              		.cfi_remember_state
 167              		.cfi_def_cfa_offset 4
 168              		@ sp needed
 169 0068 5DF804FB 		ldr	pc, [sp], #4
 170              	.L13:
 171              	.LCFI4:
 172              		.cfi_restore_state
 161:Core/Src/main.c ****   }
 173              		.loc 1 161 0
 174 006c A121     		movs	r1, #161
 175 006e 0448     		ldr	r0, .L15+4
 176 0070 FFF7FEFF 		bl	_Error_Handler
 177              	.LVL11:
 178              	.L14:
 175:Core/Src/main.c ****   }
 179              		.loc 1 175 0
 180 0074 AF21     		movs	r1, #175
 181 0076 0248     		ldr	r0, .L15+4
 182 0078 FFF7FEFF 		bl	_Error_Handler
 183              	.LVL12:
 184              	.L16:
 185              		.align	2
 186              	.L15:
 187 007c D34D6210 		.word	274877907
 188 0080 00000000 		.word	.LC0
 189              		.cfi_endproc
 190              	.LFE70:
 192              		.section	.text.main,"ax",%progbits
 193              		.align	1
 194              		.global	main
 195              		.syntax unified
 196              		.thumb
 197              		.thumb_func
 198              		.fpu softvfp
 200              	main:
 201              	.LFB69:
  88:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 202              		.loc 1 88 0
 203              		.cfi_startproc
 204              		@ Volatile: function does not return.
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207 0000 08B5     		push	{r3, lr}
 208              	.LCFI5:
 209              		.cfi_def_cfa_offset 8
 210              		.cfi_offset 3, -8
 211              		.cfi_offset 14, -4
  96:Core/Src/main.c **** 
 212              		.loc 1 96 0
 213 0002 FFF7FEFF 		bl	HAL_Init
 214              	.LVL13:
 103:Core/Src/main.c **** 
 215              		.loc 1 103 0
 216 0006 FFF7FEFF 		bl	SystemClock_Config
ARM GAS  /tmp/ccNzrNGN.s 			page 9


 217              	.LVL14:
 110:Core/Src/main.c ****   MX_USART1_UART_Init();
 218              		.loc 1 110 0
 219 000a FFF7FEFF 		bl	MX_GPIO_Init
 220              	.LVL15:
 111:Core/Src/main.c ****   MX_SPI1_Init();
 221              		.loc 1 111 0
 222 000e FFF7FEFF 		bl	MX_USART1_UART_Init
 223              	.LVL16:
 112:Core/Src/main.c ****   MX_SDIO_SD_Init();
 224              		.loc 1 112 0
 225 0012 FFF7FEFF 		bl	MX_SPI1_Init
 226              	.LVL17:
 113:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 227              		.loc 1 113 0
 228 0016 FFF7FEFF 		bl	MX_SDIO_SD_Init
 229              	.LVL18:
 119:Core/Src/main.c **** 
 230              		.loc 1 119 0
 231 001a FFF7FEFF 		bl	MX_FREERTOS_Init
 232              	.LVL19:
 122:Core/Src/main.c ****   
 233              		.loc 1 122 0
 234 001e FFF7FEFF 		bl	osKernelStart
 235              	.LVL20:
 236              	.L18:
 237 0022 FEE7     		b	.L18
 238              		.cfi_endproc
 239              	.LFE69:
 241              		.section	.rodata.SystemClock_Config.str1.4,"aMS",%progbits,1
 242              		.align	2
 243              	.LC0:
 244 0000 436F7265 		.ascii	"Core/Src/main.c\000"
 244      2F537263 
 244      2F6D6169 
 244      6E2E6300 
 245              		.text
 246              	.Letext0:
 247              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 248              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 249              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 250              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 251              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 252              		.file 7 "/usr/include/newlib/sys/lock.h"
 253              		.file 8 "/usr/include/newlib/sys/_types.h"
 254              		.file 9 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 255              		.file 10 "/usr/include/newlib/sys/reent.h"
 256              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 257              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 258              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 259              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 260              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_sdmmc.h"
 261              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_sd.h"
 262              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 263              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 264              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 265              		.file 20 "Core/Inc/spi.h"
ARM GAS  /tmp/ccNzrNGN.s 			page 10


 266              		.file 21 "Core/Inc/usart.h"
 267              		.file 22 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 268              		.file 23 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 269              		.file 24 "Core/Inc/gpio.h"
 270              		.file 25 "Core/Inc/sdio.h"
 271              		.file 26 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
ARM GAS  /tmp/ccNzrNGN.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccNzrNGN.s:16     .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccNzrNGN.s:23     .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccNzrNGN.s:54     .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccNzrNGN.s:59     .text._Error_Handler:0000000000000000 $t
     /tmp/ccNzrNGN.s:66     .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccNzrNGN.s:81     .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccNzrNGN.s:88     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccNzrNGN.s:187    .text.SystemClock_Config:000000000000007c $d
     /tmp/ccNzrNGN.s:193    .text.main:0000000000000000 $t
     /tmp/ccNzrNGN.s:200    .text.main:0000000000000000 main
     /tmp/ccNzrNGN.s:242    .rodata.SystemClock_Config.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_USART1_UART_Init
MX_SPI1_Init
MX_SDIO_SD_Init
MX_FREERTOS_Init
osKernelStart
