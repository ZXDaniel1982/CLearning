ARM GAS  /tmp/ccXf4wQt.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"queue.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	prvGetDisinheritPriorityAfterTimeout:
  23              	.LFB22:
  24              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/queue.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * FreeRTOS Kernel V10.1.0
   3:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include <stdlib.h>
  29:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include <string.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  31:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** task.h is included from an application file. */
  34:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
ARM GAS  /tmp/ccXf4wQt.s 			page 2


  35:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "FreeRTOS.h"
  37:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "task.h"
  38:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "queue.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  40:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  41:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#include "croutine.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
  43:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  44:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  45:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** for the header files above, but not in this file, in order to generate the
  47:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** correct privileged Vs unprivileged linkage and placement. */
  48:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  49:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  50:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  51:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  52:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  53:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  54:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  57:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** structure instead holds a pointer to the mutex holder (if any).  Map alternative
  60:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** names to the pcHead and structure member to ensure the readability of the code
  61:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  62:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** a union as their usage is mutually exclusive dependent on what the queue is
  63:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** being used for. */
  64:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define uxQueueType						pcHead
  65:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
  66:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** typedef struct QueuePointers
  68:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
  69:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
  70:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcReadFrom;				/*< Points to the last place that a queued item was read from when the stru
  71:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } QueuePointers_t;
  72:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  73:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** typedef struct SemaphoreData
  74:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
  75:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	TaskHandle_t xMutexHolder;		 /*< The handle of the task that holds the mutex. */
  76:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex ha
  77:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } SemaphoreData_t;
  78:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  79:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  80:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** zero. */
  81:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
  82:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
  83:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  84:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_PREEMPTION == 0 )
  85:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  86:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	performed just because a higher priority task has been woken. */
  87:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
  88:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  90:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccXf4wQt.s 			page 3


  92:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
  93:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Definition of the queue used by the scheduler.
  94:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  95:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * rationale: https://www.freertos.org/Embedded-RTOS-Queues.html
  96:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
  97:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** typedef struct QueueDef_t
  98:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
  99:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 101:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	union
 103:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 104:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		QueuePointers_t xQueue;		/*< Data required exclusively when this structure is used as a queue. */
 105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		SemaphoreData_t xSemaphore; /*< Data required exclusively when this structure is used as a semaph
 106:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} u;
 107:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 116:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 117:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		struct QueueDef_t *pxQueueSetContainer;
 124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 126:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 127:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		UBaseType_t uxQueueNumber;
 128:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uint8_t ucQueueType;
 129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } xQUEUE;
 132:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 134:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** name below to enable the use of older kernel aware debuggers. */
 135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** typedef xQUEUE Queue_t;
 136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 138:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 139:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 140:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 141:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 142:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 147:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	more user friendly. */
 148:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
ARM GAS  /tmp/ccXf4wQt.s 			page 4


 149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		QueueHandle_t xHandle;
 152:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} xQueueRegistryItem;
 153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	debuggers. */
 157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 158:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 159:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 160:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 161:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	array position being vacant. */
 162:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 163:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 165:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 167:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 168:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 169:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 170:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 171:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 172:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 173:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 174:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 175:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 177:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 178:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
 179:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 180:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 181:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 182:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 183:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 184:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 185:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
 186:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 187:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 188:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 189:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 190:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 191:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 192:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * back of the queue.
 193:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 197:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Copies an item out of a queue.
 198:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 200:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 201:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 202:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/*
 203:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 204:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * the queue set that the queue contains data.
 205:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 */
ARM GAS  /tmp/ccXf4wQt.s 			page 5


 206:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 207:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 208:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 209:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 210:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 211:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * dynamically to fill in the structure's members.
 212:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 213:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 214:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 215:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 216:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 217:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 218:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * as a mutex.
 219:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 220:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 221:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/*
 226:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * If a task waiting for a mutex causes the mutex holder to inherit a
 227:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * priority, but the waiting task times out, then the holder should
 228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * disinherit the priority - but only down to the highest priority of any
 229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * other tasks that are waiting for the same mutex.  This function returns
 230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * that priority.
 231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 */
 232:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVILEGE
 233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 237:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 238:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * accessing the queue event lists.
 239:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define prvLockQueue( pxQueue )								\
 241:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();									\
 242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{														\
 243:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 244:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{													\
 245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}													\
 247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{													\
 249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}													\
 251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}														\
 252:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL()
 253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 254:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
ARM GAS  /tmp/ccXf4wQt.s 			page 6


 263:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint 
 264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xNewQueue == pdFALSE )
 271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			it will be possible to write to it. */
 277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
 284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	versions. */
 304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return pdPASS;
 305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 307:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 311:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 312:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		supplied. */
 318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccXf4wQt.s 			page 7


 320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		should not be provided if the item size is 0. */
 322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 327:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the real queue and semaphore structures. */
 330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#endif /* configASSERT_DEFINED */
 335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		The address of a statically allocated storage area was also passed in
 338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		but is already set. */
 339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structure
 340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 345:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 346:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				note this queue was allocated statically in case the queue is
 347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				later deleted. */
 348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 353:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 354:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 357:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 358:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 361:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 362:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 365:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 368:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 370:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	size_t xQueueSizeInBytes;
 372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uint8_t *pucQueueStorage;
 373:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
ARM GAS  /tmp/ccXf4wQt.s 			page 8


 377:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* There is not going to be a queue storage area. */
 379:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 380:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 381:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 382:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 383:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 384:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			can be in the queue at any time. */
 385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 386:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 387:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 388:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Allocate the queue and storage area.  Justification for MISRA
 389:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		deviation as follows:  pvPortMalloc() always ensures returned memory
 390:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		blocks are aligned per the requirements of the MCU stack.  In this case
 391:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pvPortMalloc() must return a pointer that is guaranteed to meet the
 392:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		alignment requirements of the Queue_t structure - which in this case
 393:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		is an int8_t *.  Therefore, whenever the stack alignment requirements
 394:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		are greater than or equal to the pointer to char requirements the cast
 395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		is safe.  In other cases alignment requirements are not strict (one or
 396:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		two bytes). */
 397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !
 398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 399:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 401:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 402:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			storage area. */
 403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 404:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, es
 405:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 406:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 407:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 408:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Queues can be created either statically or dynamically, so
 409:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				note this task was created dynamically in case it is later
 410:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				deleted. */
 411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 412:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 413:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 414:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 416:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 417:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 418:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 420:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 421:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 422:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 424:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 427:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 428:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 431:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 432:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 433:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) ucQueueType;
ARM GAS  /tmp/ccXf4wQt.s 			page 9


 434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 435:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 436:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 437:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 438:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 439:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 440:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		value that is known to be within the memory map. */
 441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 443:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
 444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 445:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Set the head to the start of the queue storage area. */
 446:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 447:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 449:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Initialise the queue members as described where the queue type is
 450:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	defined. */
 451:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 452:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 454:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 455:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 456:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 457:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 458:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 459:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 460:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 462:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 463:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 464:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 465:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 466:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 467:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 468:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 469:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 470:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 471:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 472:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 473:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 474:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 475:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 476:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The queue create function will set all the queue structure members
 478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			correctly for a generic queue, but this function is creating a
 479:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 480:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in particular the information required for priority inheritance. */
 481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 483:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 484:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* In case this is a recursive mutex. */
 485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 486:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 487:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 488:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 489:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Start with the semaphore in the expected state. */
 490:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
ARM GAS  /tmp/ccXf4wQt.s 			page 10


 491:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 492:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 493:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 494:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 495:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 496:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 497:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 498:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 499:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 500:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 501:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 504:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xNewQueue;
 506:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 507:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 509:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 510:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xNewQueue;
 512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 513:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 514:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 515:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 516:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 517:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 518:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 520:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 521:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xNewQueue;
 522:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 523:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 524:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 525:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 526:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) ucQueueType;
 527:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueTy
 529:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 530:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xNewQueue;
 532:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 536:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 537:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 538:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 540:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 541:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	TaskHandle_t pxReturn;
 542:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 543:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 544:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 545:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 546:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 547:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		identity of the mutex holder, as the holder may change between the
ARM GAS  /tmp/ccXf4wQt.s 			page 11


 548:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		following critical section exiting and the function returning. */
 549:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 550:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 551:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 553:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 554:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 555:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 556:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 557:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxReturn = NULL;
 558:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 559:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 560:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 561:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 562:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxReturn;
 563:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 564:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 565:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 566:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 567:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 568:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 569:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 570:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 571:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 572:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	TaskHandle_t pxReturn;
 573:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 574:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( xSemaphore );
 575:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Mutexes cannot be used in interrupt service routines, so the mutex
 577:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		holder should not change in an ISR, and therefore a critical section is
 578:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		not required here. */
 579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 581:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 582:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 583:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 584:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 585:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxReturn = NULL;
 586:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxReturn;
 589:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 590:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 591:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 592:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 593:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 594:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 595:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 597:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 598:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 599:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 600:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 601:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 602:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If this is the task that holds the mutex then xMutexHolder will not
 604:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
ARM GAS  /tmp/ccXf4wQt.s 			page 12


 605:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 606:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		this is the only condition we are interested in it does not matter if
 607:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 608:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 609:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 612:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 613:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 614:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount member. */
 618:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 619:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 620:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Has the recursive call count unwound to 0? */
 621:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 622:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 623:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 624:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				task that might be waiting to access the mutex. */
 625:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 626:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 627:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 628:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 631:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 632:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 633:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 634:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 635:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 636:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 637:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			holder. */
 638:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 639:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 641:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 642:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
 644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 645:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 648:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 651:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 652:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 653:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 654:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 655:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 657:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 658:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 659:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xQueueGiveMutexRecursive(). */
 660:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 661:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
ARM GAS  /tmp/ccXf4wQt.s 			page 13


 662:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 663:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 664:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 666:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 667:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 668:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 669:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 670:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 671:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 673:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			before reaching here. */
 675:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xReturn != pdFAIL )
 676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 677:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 679:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 681:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 683:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 684:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 685:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
 686:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 687:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 688:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 689:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 690:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 692:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 693:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 694:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 695:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 696:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 697:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 701:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 703:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 704:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 705:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 707:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 708:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 709:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 711:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 712:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 713:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xHandle;
 714:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 715:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 716:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 717:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 718:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccXf4wQt.s 			page 14


 719:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 720:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 721:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 722:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 723:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 724:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 726:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 727:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 729:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 734:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 735:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 736:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 737:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 738:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 739:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 740:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 741:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xHandle;
 742:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 743:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 744:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 745:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 746:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 747:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 748:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 749:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 750:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
 751:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 752:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 756:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 757:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 759:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 760:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 761:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 762:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 763:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/*lint -save -e904 This function relaxes the coding standard somewhat to
 764:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	allow return statements within the function itself.  This is done in the
 765:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	interest of execution time efficiency. */
 766:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
 767:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 768:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 769:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 770:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 771:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 772:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 773:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			queue is full. */
 774:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 775:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
ARM GAS  /tmp/ccXf4wQt.s 			page 15


 776:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 777:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 778:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 779:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 780:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 781:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 782:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 783:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 784:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 785:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 786:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 )
 787:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* Do not notify the queue set as an existing item
 789:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							was overwritten in the queue so the number of items
 790:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							in the queue has not changed. */
 791:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 792:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 793:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 794:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 795:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 796:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 797:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							unblock. A context switch is required. */
 798:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 799:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 800:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 801:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 802:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 803:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 804:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 805:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 806:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 807:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* If there was a task waiting for data to arrive on the
 808:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queue then unblock it now. */
 809:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 811:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 812:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 813:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The unblocked task has a priority higher than
 814:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								our own so yield immediately.  Yes it is ok to
 815:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								do this from within the critical section - the
 816:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								kernel takes care of that. */
 817:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 818:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 819:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
 820:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 821:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 822:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 823:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 824:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else if( xYieldRequired != pdFALSE )
 825:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 826:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* This path is a special case that will only get
 827:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							executed if the task was holding multiple mutexes
 828:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							and the mutexes were given back in an order that is
 829:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							different to that in which they were taken. */
 830:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 831:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 832:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
ARM GAS  /tmp/ccXf4wQt.s 			page 16


 833:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 834:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 835:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 836:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 837:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 838:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 839:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 840:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 841:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 842:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 843:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					queue then unblock it now. */
 844:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 845:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 846:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 847:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 848:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The unblocked task has a priority higher than
 849:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 850:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							this from within the critical section - the kernel
 851:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							takes care of that. */
 852:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 853:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 854:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 855:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 856:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 857:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 858:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 859:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else if( xYieldRequired != pdFALSE )
 860:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 861:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* This path is a special case that will only get
 862:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						executed if the task was holding multiple mutexes and
 863:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						the mutexes were given back in an order that is
 864:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						different to that in which they were taken. */
 865:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 866:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 867:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 868:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 869:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 870:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 871:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 872:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 873:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 874:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 877:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 878:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 881:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was full and no block time is specified (or
 882:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
 883:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 884:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 885:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Return to the original privilege level before exiting
 886:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the function. */
 887:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 888:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
 889:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
ARM GAS  /tmp/ccXf4wQt.s 			page 17


 890:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 891:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 892:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was full and a block time was specified so
 893:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
 894:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 895:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 896:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 897:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
 898:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 899:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
 900:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 901:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 902:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 903:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 904:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 905:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 906:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 907:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
 908:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 909:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 911:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 912:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 913:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 914:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 915:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 916:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 917:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 918:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 919:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 920:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Unlocking the queue means queue events can effect the
 921:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				event list.  It is possible that interrupts occurring now
 922:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				remove this task from the event list again - but as the
 923:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				scheduler is suspended the task will go onto the pending
 924:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				ready last instead of the actual ready list. */
 925:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 926:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 927:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 928:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				ready list into the ready list - so it is feasible that this
 929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				task is already in a ready list before it yields - in which
 930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				case the yield will not cause a context switch unless there
 931:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				is also a higher priority task in the pending ready list. */
 932:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 933:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 934:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 935:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 936:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 937:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 938:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 939:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Try again. */
 940:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 941:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 942:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 943:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 944:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 945:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 946:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The timeout has expired. */
ARM GAS  /tmp/ccXf4wQt.s 			page 18


 947:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 948:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 949:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 950:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 951:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			return errQUEUE_FULL;
 952:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 953:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint -restore */
 954:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 955:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 956:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 957:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 958:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 959:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 960:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
 961:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 962:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 963:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 966:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 967:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 968:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 969:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 970:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 971:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 972:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 973:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 974:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
 975:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 976:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 977:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 978:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 979:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 980:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 981:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 982:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 983:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 984:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 985:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 986:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 987:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	post). */
 988:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 989:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 990:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 991:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 992:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 993:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 994:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 995:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 996:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 997:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 998:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 999:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			called here even though the disinherit function does not check if
1000:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
1001:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1002:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1003:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
ARM GAS  /tmp/ccXf4wQt.s 			page 19


1004:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
1005:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
1006:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1007:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1008:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1009:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1010:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1011:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
1012:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1013:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
1014:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
1015:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							unblock.  A context switch is required. */
1016:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1017:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1018:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1019:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1020:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1021:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1022:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1023:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1024:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1025:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1026:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1027:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1028:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1029:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1030:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1031:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1032:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1033:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1034:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1035:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1036:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1037:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1038:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1039:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1040:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1041:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1042:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								else
1043:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1044:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1045:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1046:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1047:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1048:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1049:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1050:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1051:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1052:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1053:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1054:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1055:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1056:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1057:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1058:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1059:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1060:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
ARM GAS  /tmp/ccXf4wQt.s 			page 20


1061:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1062:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1063:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1064:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1065:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1066:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1067:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1068:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1069:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1070:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1071:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1072:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1073:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1074:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1075:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1076:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1077:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1078:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1079:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1080:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1081:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1082:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1083:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1084:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1085:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1086:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1087:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1088:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1089:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1090:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1091:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1092:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1093:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1095:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1096:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1097:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1098:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1099:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
1100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1101:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1103:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1104:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1106:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1107:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1108:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
1113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1116:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1117:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
ARM GAS  /tmp/ccXf4wQt.s 			page 21


1118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	post). */
1119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if the item size is not 0. */
1124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1127:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1128:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	interrupts, only tasks. */
1129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutex
1130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1132:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1133:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1134:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1138:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1139:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1140:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1141:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1142:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1147:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1148:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1152:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		space'. */
1154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1158:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1159:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1160:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1161:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1162:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1163:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1164:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1165:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			messages (semaphores) available. */
1166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1167:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1168:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1169:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
1170:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
1171:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1172:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1173:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1174:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
ARM GAS  /tmp/ccXf4wQt.s 			page 22


1175:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1176:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1177:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1178:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The semaphore is a member of a queue set, and
1179:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							posting	to the queue set caused a higher priority
1180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							task to	unblock.  A context switch is required. */
1181:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1182:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1183:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1184:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1185:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1186:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1187:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1188:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1189:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1190:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1192:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1193:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1198:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1200:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1201:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1202:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1203:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1204:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1205:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1206:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1207:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								else
1208:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1209:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1210:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1211:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1212:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1213:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1214:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1215:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1216:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1217:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1218:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1219:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1220:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1221:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1226:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1227:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
ARM GAS  /tmp/ccXf4wQt.s 			page 23


1232:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1237:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1238:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1239:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1241:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1243:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1244:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1252:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1254:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1263:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
1265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
1278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Check the pointer is not NULL. */
1280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( ( pxQueue ) );
1281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	is zero (so no data is copied into the buffer. */
1284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
ARM GAS  /tmp/ccXf4wQt.s 			page 24


1289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/*lint -save -e904  This function relaxes the coding standard somewhat to
1295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	allow return statements within the function itself.  This is done in the
1296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	interest of execution time efficiency. */
1297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
1298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
1300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1307:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Data available, remove one item. */
1308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1311:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1312:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There is now space in the queue, were any tasks waiting to
1313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				post to the queue?  If so, unblock the highest priority waiting
1314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				task. */
1315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1327:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
1333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
1340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1345:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
ARM GAS  /tmp/ccXf4wQt.s 			page 25


1346:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
1348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1352:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1353:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1354:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1357:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1358:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1360:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1361:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1362:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1365:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1367:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1368:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The timeout has not expired.  If the queue is still empty place
1370:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the task on the list of tasks waiting to receive from the queue. */
1371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1373:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1377:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1379:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1380:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1381:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1382:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1383:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1384:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1386:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1387:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The queue contains data again.  Loop back to try and read the
1388:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				data. */
1389:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1390:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1391:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1392:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1393:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1394:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Timed out.  If there is no data in the queue exit, otherwise loop
1396:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			back and attempt to read the data. */
1397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1399:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1401:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1402:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
ARM GAS  /tmp/ccXf4wQt.s 			page 26


1403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
1404:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1405:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1406:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1407:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1408:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1409:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1410:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint -restore */
1411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1412:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1413:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1414:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
1415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1416:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1417:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1418:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
1419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
1421:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xInheritanceOccurred = pdFALSE;
1422:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
1423:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1424:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Check the queue pointer is not NULL. */
1425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( ( pxQueue ) );
1426:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1427:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Check this really is a semaphore, in which case the item size will be
1428:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	0. */
1429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1431:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1432:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1433:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1435:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1436:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1437:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1438:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1439:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
1440:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
1442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
1443:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
1445:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1446:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Semaphores are queues with an item size of 0, and where the
1447:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			number of messages in the queue is the semaphore's count value. */
1448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1449:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1450:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1451:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1452:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1454:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1455:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1456:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Semaphores are queues with a data size of zero and where the
1457:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				messages waiting is the semaphore's count.  Reduce the count. */
1458:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1459:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccXf4wQt.s 			page 27


1460:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1462:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1463:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1464:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* Record the information required to implement
1465:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						priority inheritance should it become necessary. */
1466:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
1467:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1468:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1469:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1470:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1471:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1472:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1473:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_MUTEXES */
1474:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1475:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Check to see if other tasks are blocked waiting to give the
1476:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				semaphore, and if so, unblock the highest priority such task. */
1477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1479:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1480:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1483:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1484:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1486:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1487:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1488:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1489:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1490:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1491:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1492:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1493:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1494:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
1495:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1496:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1497:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1498:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1499:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1500:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* For inheritance to have occurred there must have been an
1501:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					initial timeout, and an adjusted timeout cannot become 0, as
1502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if it were 0 the function would have exited. */
1503:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					#if( configUSE_MUTEXES == 1 )
1504:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						configASSERT( xInheritanceOccurred == pdFALSE );
1506:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1507:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					#endif /* configUSE_MUTEXES */
1508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1509:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The semaphore count was 0 and no block time is specified
1510:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					(or the block time has expired) so exit now. */
1511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1513:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1514:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1515:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1516:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
ARM GAS  /tmp/ccXf4wQt.s 			page 28


1517:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The semaphore count was 0 and a block time was specified
1518:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					so configure the timeout structure ready to block. */
1519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1520:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1521:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1522:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1523:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1524:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1525:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1526:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1527:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1528:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1529:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1530:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1531:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can give to and take from the semaphore
1532:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1536:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1537:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1538:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1539:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1540:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* A block time is specified and not expired.  If the semaphore
1541:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			count is 0 then enter the Blocked state to wait for a semaphore to
1542:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			become available.  As semaphores are implemented with queues the
1543:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1544:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1545:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1546:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1547:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1548:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1549:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1550:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1551:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskENTER_CRITICAL();
1553:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1554:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
1555:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1556:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
1557:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1558:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1559:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1560:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1561:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1562:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1563:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif
1564:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1565:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1566:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1567:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1568:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1569:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1570:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1571:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1572:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1573:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccXf4wQt.s 			page 29


1574:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1575:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1576:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1577:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1578:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There was no timeout and the semaphore count was not 0, so
1579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				attempt to take the semaphore again. */
1580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1581:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1582:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1583:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1584:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1585:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1586:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Timed out. */
1587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1589:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1590:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* If the semaphore count is 0 exit now as the timeout has
1591:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			expired.  Otherwise return to attempt to take the semaphore that is
1592:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			known to be available.  As semaphores are implemented by queues the
1593:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1594:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1595:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1597:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1598:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* xInheritanceOccurred could only have be set if
1599:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1600:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					test the mutex type again to check it is actually a mutex. */
1601:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xInheritanceOccurred != pdFALSE )
1602:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskENTER_CRITICAL();
1604:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1605:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							UBaseType_t uxHighestWaitingPriority;
1606:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1607:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* This task blocking on the mutex caused another
1608:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							task to inherit this task's priority.  Now this task
1609:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							has timed out the priority should be disinherited
1610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							again, but only as low as the next highest priority
1611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							task that is waiting for the same mutex. */
1612:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1613:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPri
1614:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
1616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1618:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_MUTEXES */
1619:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1620:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1621:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
1622:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1623:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1624:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1625:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1626:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1627:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1628:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint -restore */
1629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccXf4wQt.s 			page 30


1631:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1632:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1633:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1634:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1635:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1636:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1637:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
1638:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1639:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Check the pointer is not NULL. */
1640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( ( pxQueue ) );
1641:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1642:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	is zero (so no data is copied into the buffer. */
1644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1645:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1646:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1648:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1651:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1652:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1653:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1654:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/*lint -save -e904  This function relaxes the coding standard somewhat to
1655:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	allow return statements within the function itself.  This is done in the
1656:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	interest of execution time efficiency. */
1657:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
1658:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1659:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
1660:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1661:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1662:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1663:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1664:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1666:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1667:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Remember the read position so it can be reset after the data
1668:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				is read from the queue as this function is only peeking the
1669:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				data, not removing it. */
1670:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1671:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1673:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_PEEK( pxQueue );
1674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1675:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The data is not being removed, so reset the read pointer. */
1676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1677:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The data is being left in the queue, so see if there are
1679:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				any other tasks waiting for the data. */
1680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1681:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1683:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1684:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority than this task. */
1685:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1686:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1687:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
ARM GAS  /tmp/ccXf4wQt.s 			page 31


1688:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1689:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1690:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1691:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1692:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1693:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1694:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1695:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1696:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1697:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
1699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1701:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1703:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1704:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1705:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
1706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1707:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
1708:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1709:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1711:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1712:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1713:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					configure the timeout structure ready to enter the blocked
1714:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					state. */
1715:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1716:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1717:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1718:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1719:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1720:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1721:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1722:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1723:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1724:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1725:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1726:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1727:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1728:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1729:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1734:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1735:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1736:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Timeout has not expired yet, check to see if there is data in the
1737:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			queue now, and if not enter the Blocked state to wait for data. */
1738:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1739:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1740:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1741:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1742:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1743:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1744:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
ARM GAS  /tmp/ccXf4wQt.s 			page 32


1745:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1746:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1747:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1748:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1749:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1750:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1751:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1752:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1753:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There is data in the queue now, so don't enter the blocked
1755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				state, instead return to try and obtain the data. */
1756:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1757:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1759:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1760:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1761:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1762:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The timeout has expired.  If there is still no data in the queue
1763:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			exit, otherwise go back and try to read the data again. */
1764:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1765:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1766:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1767:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1768:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1769:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_PEEK_FAILED( pxQueue );
1770:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
1771:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1772:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1773:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1774:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1775:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1776:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1777:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint -restore */
1778:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1779:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1780:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1781:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1782:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1783:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1784:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1785:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
1786:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1787:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1789:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1790:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1791:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1792:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1793:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1794:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1795:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1796:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1797:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1798:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1799:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1800:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1801:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
ARM GAS  /tmp/ccXf4wQt.s 			page 33


1802:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1803:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1804:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1805:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1806:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1807:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1808:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1809:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1810:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1811:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1812:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1813:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1814:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1815:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1816:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1817:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1818:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1819:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1820:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* If the queue is locked the event list will not be modified.
1821:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1822:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			will know that an ISR has removed data while the queue was
1823:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			locked. */
1824:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( cRxLock == queueUNLOCKED )
1825:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1826:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1827:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1828:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1829:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1830:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority than us so
1831:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						force a context switch. */
1832:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1833:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1834:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1835:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1836:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1837:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1838:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1839:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1840:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1841:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1842:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1843:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1844:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1845:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1846:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1847:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1848:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1849:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1850:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1851:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1852:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1853:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1854:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was removed while it was locked. */
1855:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1856:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1857:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1858:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
ARM GAS  /tmp/ccXf4wQt.s 			page 34


1859:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1860:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1861:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1862:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
1863:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1864:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1865:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1866:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1867:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1869:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1870:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1871:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1872:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1873:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1874:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1877:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
1878:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1881:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1882:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1883:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1884:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1885:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1886:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1887:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1888:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1889:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1890:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1891:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1892:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1893:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1894:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1895:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1896:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1897:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1898:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1900:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1901:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1902:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1903:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1904:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1905:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1906:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1907:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			actually being removed from the queue. */
1908:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1909:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1911:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1912:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1913:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1914:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1915:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
ARM GAS  /tmp/ccXf4wQt.s 			page 35


1916:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
1917:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1918:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1919:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1920:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1921:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1922:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1923:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1924:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1925:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1926:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1927:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1928:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1931:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1932:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1933:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1934:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1935:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1936:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1937:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1938:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
1939:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1940:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1941:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1942:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1943:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1944:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1945:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
1946:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1947:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1948:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1949:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1950:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1951:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1952:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1953:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1954:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1955:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
1956:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1957:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1958:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1959:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1960:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1961:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1962:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
1963:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
1966:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1967:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
1968:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1969:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1970:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1971:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1972:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
ARM GAS  /tmp/ccXf4wQt.s 			page 36


1973:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
1974:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1975:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1976:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1977:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1978:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1979:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1980:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1981:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1982:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1983:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1984:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1985:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1986:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1987:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		again. */
1988:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vPortFree( pxQueue );
1989:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1990:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1991:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1992:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1993:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		check before attempting to free the memory. */
1994:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1995:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1996:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vPortFree( pxQueue );
1997:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1998:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1999:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2000:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2001:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2002:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2003:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#else
2004:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2005:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
2006:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
2007:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) pxQueue;
2008:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2009:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2010:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
2011:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2012:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2013:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2014:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2015:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2016:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2017:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
2018:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2019:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2020:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2021:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2022:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2023:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2024:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2025:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
2026:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2027:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
2028:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2029:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccXf4wQt.s 			page 37


2030:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2031:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2032:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2033:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2034:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2035:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2036:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2037:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
2038:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2039:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2040:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2041:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2042:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2043:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
2044:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2045:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2046:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
  25              		.loc 1 2046 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
2047:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxHighestPriorityOfWaitingTasks;
2048:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If a task waiting for a mutex causes the mutex holder to inherit a
2050:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		priority, but the waiting task times out, then the holder should
2051:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		disinherit the priority - but only down to the highest priority of any
2052:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		other tasks that are waiting for the same mutex.  For this purpose,
2053:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return the priority of the highest priority task that is waiting for the
2054:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		mutex. */
2055:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
  31              		.loc 1 2055 0
  32 0000 436A     		ldr	r3, [r0, #36]
  33 0002 23B1     		cbz	r3, .L3
2056:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2057:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET
  34              		.loc 1 2057 0
  35 0004 036B     		ldr	r3, [r0, #48]
  36 0006 1868     		ldr	r0, [r3]
  37              	.LVL1:
  38 0008 C0F10700 		rsb	r0, r0, #7
  39              	.LVL2:
  40 000c 7047     		bx	lr
  41              	.LVL3:
  42              	.L3:
2058:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2059:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2060:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2061:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  43              		.loc 1 2061 0
  44 000e 0020     		movs	r0, #0
  45              	.LVL4:
2062:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2063:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2064:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return uxHighestPriorityOfWaitingTasks;
2065:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
ARM GAS  /tmp/ccXf4wQt.s 			page 38


  46              		.loc 1 2065 0
  47 0010 7047     		bx	lr
  48              		.cfi_endproc
  49              	.LFE22:
  51              		.section	.text.prvIsQueueFull,"ax",%progbits
  52              		.align	1
  53              		.syntax unified
  54              		.thumb
  55              		.thumb_func
  56              		.fpu softvfp
  58              	prvIsQueueFull:
  59              	.LFB28:
2066:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2067:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
2068:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2069:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2070:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
2071:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2072:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn = pdFALSE;
2073:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
2074:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2075:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function is called from a critical section. */
2076:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2077:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2078:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2079:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2080:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2081:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
2082:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2083:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2084:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2085:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The mutex is no longer being held. */
2086:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
2087:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
2088:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2089:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2090:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2091:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2092:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2093:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#endif /* configUSE_MUTEXES */
2095:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2096:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
2097:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2098:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
2099:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
2100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
2101:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
2103:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2104:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2106:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2107:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2108:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
2110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
ARM GAS  /tmp/ccXf4wQt.s 			page 39


2111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxIt
2112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
2113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
2114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
2116:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2117:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xPosition == queueOVERWRITE )
2123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2126:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* An item is not being added but overwritten, so subtract
2127:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				one from the recorded number of items in the queue so when
2128:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				one is added again below the number of recorded items remains
2129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				correct. */
2130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--uxMessagesWaiting;
2131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2132:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2133:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2134:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2138:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2139:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2140:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2141:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2142:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
2147:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2148:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
2150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2152:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char typ
2154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
2155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2158:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2159:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2160:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2161:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2162:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue
2163:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2164:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
2165:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2167:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
ARM GAS  /tmp/ccXf4wQt.s 			page 40


2168:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2169:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2170:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2171:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
2172:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
2173:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
2174:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	updated. */
2175:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
2176:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2177:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
2178:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2179:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if data was added to the queue while it was locked. */
2180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
2181:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2182:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
2183:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			blocked waiting for data to become available? */
2184:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
2185:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2186:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
2187:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2188:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
2189:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2190:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The queue is a member of a queue set, and posting to
2191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						the queue set caused a higher priority task to unblock.
2192:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						A context switch is required. */
2193:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
2194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2198:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2200:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2201:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2202:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Tasks that are removed from the event list will get
2203:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					added to the pending ready list as the scheduler is still
2204:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					suspended. */
2205:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2206:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2207:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2208:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
2209:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
2210:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
2211:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							vTaskMissedYield();
2212:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
2213:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
2214:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
2215:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
2216:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
2217:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2218:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2219:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2220:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						break;
2221:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
ARM GAS  /tmp/ccXf4wQt.s 			page 41


2225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2226:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Tasks that are removed from the event list will get added to
2227:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
2228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2232:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority so record that
2233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						a context switch is required. */
2234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
2235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2237:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2238:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2239:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2241:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2243:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					break;
2244:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
2247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			--cTxLock;
2249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
2252:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
2254:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Do the same for the Rx lock. */
2256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
2257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
2259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
2261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2263:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskMissedYield();
2267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--cRxLock;
2274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
2278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
ARM GAS  /tmp/ccXf4wQt.s 			page 42


2282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
2284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
2285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
2288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
2292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
2294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
2296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
2300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
2303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
2306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2307:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2311:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
2312:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
2314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
2317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
2319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
2321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2327:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
2328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
  60              		.loc 1 2328 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              	.LVL5:
  65 0000 10B5     		push	{r4, lr}
  66              	.LCFI0:
  67              		.cfi_def_cfa_offset 8
  68              		.cfi_offset 4, -8
  69              		.cfi_offset 14, -4
ARM GAS  /tmp/ccXf4wQt.s 			page 43


  70 0002 0446     		mov	r4, r0
2329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
  71              		.loc 1 2331 0
  72 0004 FFF7FEFF 		bl	vPortEnterCritical
  73              	.LVL6:
2332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  74              		.loc 1 2333 0
  75 0008 A26B     		ldr	r2, [r4, #56]
  76 000a E36B     		ldr	r3, [r4, #60]
  77 000c 9A42     		cmp	r2, r3
  78 000e 04D0     		beq	.L8
2334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
2336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
  79              		.loc 1 2339 0
  80 0010 0024     		movs	r4, #0
  81              	.LVL7:
  82              	.L5:
2340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
  83              		.loc 1 2342 0
  84 0012 FFF7FEFF 		bl	vPortExitCritical
  85              	.LVL8:
2343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2345:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
  86              		.loc 1 2345 0
  87 0016 2046     		mov	r0, r4
  88 0018 10BD     		pop	{r4, pc}
  89              	.LVL9:
  90              	.L8:
2335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
  91              		.loc 1 2335 0
  92 001a 0124     		movs	r4, #1
  93              	.LVL10:
  94 001c F9E7     		b	.L5
  95              		.cfi_endproc
  96              	.LFE28:
  98              		.section	.text.prvIsQueueEmpty,"ax",%progbits
  99              		.align	1
 100              		.syntax unified
 101              		.thumb
 102              		.thumb_func
 103              		.fpu softvfp
 105              	prvIsQueueEmpty:
 106              	.LFB26:
2288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 107              		.loc 1 2288 0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccXf4wQt.s 			page 44


 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111              	.LVL11:
 112 0000 10B5     		push	{r4, lr}
 113              	.LCFI1:
 114              		.cfi_def_cfa_offset 8
 115              		.cfi_offset 4, -8
 116              		.cfi_offset 14, -4
 117 0002 0446     		mov	r4, r0
2291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 118              		.loc 1 2291 0
 119 0004 FFF7FEFF 		bl	vPortEnterCritical
 120              	.LVL12:
2293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 121              		.loc 1 2293 0
 122 0008 A36B     		ldr	r3, [r4, #56]
 123 000a 23B1     		cbz	r3, .L13
2299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 124              		.loc 1 2299 0
 125 000c 0024     		movs	r4, #0
 126              	.LVL13:
 127              	.L10:
2302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 128              		.loc 1 2302 0
 129 000e FFF7FEFF 		bl	vPortExitCritical
 130              	.LVL14:
2305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 131              		.loc 1 2305 0
 132 0012 2046     		mov	r0, r4
 133 0014 10BD     		pop	{r4, pc}
 134              	.LVL15:
 135              	.L13:
2295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 136              		.loc 1 2295 0
 137 0016 0124     		movs	r4, #1
 138              	.LVL16:
 139 0018 F9E7     		b	.L10
 140              		.cfi_endproc
 141              	.LFE26:
 143              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 144              		.align	1
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 148              		.fpu softvfp
 150              	prvCopyDataToQueue:
 151              	.LFB23:
2071:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn = pdFALSE;
 152              		.loc 1 2071 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              	.LVL17:
 157 0000 70B5     		push	{r4, r5, r6, lr}
 158              	.LCFI2:
 159              		.cfi_def_cfa_offset 16
 160              		.cfi_offset 4, -16
 161              		.cfi_offset 5, -12
ARM GAS  /tmp/ccXf4wQt.s 			page 45


 162              		.cfi_offset 6, -8
 163              		.cfi_offset 14, -4
 164 0002 0446     		mov	r4, r0
 165 0004 1646     		mov	r6, r2
 166              	.LVL18:
2077:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 167              		.loc 1 2077 0
 168 0006 856B     		ldr	r5, [r0, #56]
 169              	.LVL19:
2079:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 170              		.loc 1 2079 0
 171 0008 026C     		ldr	r2, [r0, #64]
 172              	.LVL20:
 173 000a 4AB9     		cbnz	r2, .L15
2083:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 174              		.loc 1 2083 0
 175 000c 0368     		ldr	r3, [r0]
 176 000e 53BB     		cbnz	r3, .L19
2086:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 177              		.loc 1 2086 0
 178 0010 8068     		ldr	r0, [r0, #8]
 179              	.LVL21:
 180 0012 FFF7FEFF 		bl	xTaskPriorityDisinherit
 181              	.LVL22:
2087:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 182              		.loc 1 2087 0
 183 0016 0023     		movs	r3, #0
 184 0018 A360     		str	r3, [r4, #8]
 185              	.LVL23:
 186              	.L16:
2143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 187              		.loc 1 2143 0
 188 001a 0135     		adds	r5, r5, #1
 189              	.LVL24:
 190 001c A563     		str	r5, [r4, #56]
2146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 191              		.loc 1 2146 0
 192 001e 70BD     		pop	{r4, r5, r6, pc}
 193              	.LVL25:
 194              	.L15:
2096:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 195              		.loc 1 2096 0
 196 0020 6EB9     		cbnz	r6, .L17
2098:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
 197              		.loc 1 2098 0
 198 0022 4068     		ldr	r0, [r0, #4]
 199              	.LVL26:
 200 0024 FFF7FEFF 		bl	memcpy
 201              	.LVL27:
2099:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
 202              		.loc 1 2099 0
 203 0028 226C     		ldr	r2, [r4, #64]
 204 002a 6368     		ldr	r3, [r4, #4]
 205 002c 1344     		add	r3, r3, r2
 206 002e 6360     		str	r3, [r4, #4]
2100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 207              		.loc 1 2100 0
ARM GAS  /tmp/ccXf4wQt.s 			page 46


 208 0030 A268     		ldr	r2, [r4, #8]
 209 0032 9342     		cmp	r3, r2
 210 0034 19D3     		bcc	.L20
2102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 211              		.loc 1 2102 0
 212 0036 2368     		ldr	r3, [r4]
 213 0038 6360     		str	r3, [r4, #4]
2072:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
 214              		.loc 1 2072 0
 215 003a 0020     		movs	r0, #0
 216 003c EDE7     		b	.L16
 217              	.LVL28:
 218              	.L17:
2111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 219              		.loc 1 2111 0
 220 003e C068     		ldr	r0, [r0, #12]
 221              	.LVL29:
 222 0040 FFF7FEFF 		bl	memcpy
 223              	.LVL30:
2112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
 224              		.loc 1 2112 0
 225 0044 236C     		ldr	r3, [r4, #64]
 226 0046 5B42     		negs	r3, r3
 227 0048 E268     		ldr	r2, [r4, #12]
 228 004a 1A44     		add	r2, r2, r3
 229 004c E260     		str	r2, [r4, #12]
2113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 230              		.loc 1 2113 0
 231 004e 2168     		ldr	r1, [r4]
 232 0050 8A42     		cmp	r2, r1
 233 0052 02D2     		bcs	.L18
2115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 234              		.loc 1 2115 0
 235 0054 A268     		ldr	r2, [r4, #8]
 236 0056 1344     		add	r3, r3, r2
 237 0058 E360     		str	r3, [r4, #12]
 238              	.L18:
2122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 239              		.loc 1 2122 0
 240 005a 022E     		cmp	r6, #2
 241 005c 07D1     		bne	.L21
2124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 242              		.loc 1 2124 0
 243 005e 45B1     		cbz	r5, .L22
2130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 244              		.loc 1 2130 0
 245 0060 013D     		subs	r5, r5, #1
 246              	.LVL31:
2072:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
 247              		.loc 1 2072 0
 248 0062 0020     		movs	r0, #0
 249 0064 D9E7     		b	.L16
 250              	.LVL32:
 251              	.L19:
 252 0066 0020     		movs	r0, #0
 253              	.LVL33:
 254 0068 D7E7     		b	.L16
ARM GAS  /tmp/ccXf4wQt.s 			page 47


 255              	.LVL34:
 256              	.L20:
 257 006a 0020     		movs	r0, #0
 258 006c D5E7     		b	.L16
 259              	.L21:
 260 006e 0020     		movs	r0, #0
 261 0070 D3E7     		b	.L16
 262              	.L22:
 263 0072 0020     		movs	r0, #0
 264 0074 D1E7     		b	.L16
 265              		.cfi_endproc
 266              	.LFE23:
 268              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 269              		.align	1
 270              		.syntax unified
 271              		.thumb
 272              		.thumb_func
 273              		.fpu softvfp
 275              	prvCopyDataFromQueue:
 276              	.LFB24:
2150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 277              		.loc 1 2150 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281              	.LVL35:
2151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 282              		.loc 1 2151 0
 283 0000 026C     		ldr	r2, [r0, #64]
 284 0002 72B1     		cbz	r2, .L28
2150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 285              		.loc 1 2150 0
 286 0004 10B5     		push	{r4, lr}
 287              	.LCFI3:
 288              		.cfi_def_cfa_offset 8
 289              		.cfi_offset 4, -8
 290              		.cfi_offset 14, -4
 291 0006 0346     		mov	r3, r0
2153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
 292              		.loc 1 2153 0
 293 0008 C468     		ldr	r4, [r0, #12]
 294 000a 1444     		add	r4, r4, r2
 295 000c C460     		str	r4, [r0, #12]
2154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 296              		.loc 1 2154 0
 297 000e 8068     		ldr	r0, [r0, #8]
 298              	.LVL36:
 299 0010 8442     		cmp	r4, r0
 300 0012 01D3     		bcc	.L26
2156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 301              		.loc 1 2156 0
 302 0014 1868     		ldr	r0, [r3]
 303 0016 D860     		str	r0, [r3, #12]
 304              	.L26:
 305 0018 0846     		mov	r0, r1
2162:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 306              		.loc 1 2162 0
ARM GAS  /tmp/ccXf4wQt.s 			page 48


 307 001a D968     		ldr	r1, [r3, #12]
 308              	.LVL37:
 309 001c FFF7FEFF 		bl	memcpy
 310              	.LVL38:
 311 0020 10BD     		pop	{r4, pc}
 312              	.LVL39:
 313              	.L28:
 314              	.LCFI4:
 315              		.cfi_def_cfa_offset 0
 316              		.cfi_restore 4
 317              		.cfi_restore 14
 318 0022 7047     		bx	lr
 319              		.cfi_endproc
 320              	.LFE24:
 322              		.section	.text.prvUnlockQueue,"ax",%progbits
 323              		.align	1
 324              		.syntax unified
 325              		.thumb
 326              		.thumb_func
 327              		.fpu softvfp
 329              	prvUnlockQueue:
 330              	.LFB25:
2168:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 331              		.loc 1 2168 0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335              	.LVL40:
 336 0000 38B5     		push	{r3, r4, r5, lr}
 337              	.LCFI5:
 338              		.cfi_def_cfa_offset 16
 339              		.cfi_offset 3, -16
 340              		.cfi_offset 4, -12
 341              		.cfi_offset 5, -8
 342              		.cfi_offset 14, -4
 343 0002 0546     		mov	r5, r0
2175:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 344              		.loc 1 2175 0
 345 0004 FFF7FEFF 		bl	vPortEnterCritical
 346              	.LVL41:
 347              	.LBB93:
2177:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 348              		.loc 1 2177 0
 349 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 350 000c 64B2     		sxtb	r4, r4
 351              	.LVL42:
2180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 352              		.loc 1 2180 0
 353 000e 01E0     		b	.L32
 354              	.L34:
2248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 355              		.loc 1 2248 0
 356 0010 013C     		subs	r4, r4, #1
 357              	.LVL43:
 358 0012 64B2     		sxtb	r4, r4
 359              	.LVL44:
 360              	.L32:
ARM GAS  /tmp/ccXf4wQt.s 			page 49


2180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 361              		.loc 1 2180 0
 362 0014 002C     		cmp	r4, #0
 363 0016 0ADD     		ble	.L33
2228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 364              		.loc 1 2228 0
 365 0018 6B6A     		ldr	r3, [r5, #36]
 366 001a 43B1     		cbz	r3, .L33
2230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 367              		.loc 1 2230 0
 368 001c 05F12400 		add	r0, r5, #36
 369 0020 FFF7FEFF 		bl	xTaskRemoveFromEventList
 370              	.LVL45:
 371 0024 0028     		cmp	r0, #0
 372 0026 F3D0     		beq	.L34
2234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 373              		.loc 1 2234 0
 374 0028 FFF7FEFF 		bl	vTaskMissedYield
 375              	.LVL46:
 376 002c F0E7     		b	.L34
 377              	.L33:
2251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 378              		.loc 1 2251 0
 379 002e FF23     		movs	r3, #255
 380 0030 85F84530 		strb	r3, [r5, #69]
 381              	.LBE93:
2253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 382              		.loc 1 2253 0
 383 0034 FFF7FEFF 		bl	vPortExitCritical
 384              	.LVL47:
2256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 385              		.loc 1 2256 0
 386 0038 FFF7FEFF 		bl	vPortEnterCritical
 387              	.LVL48:
 388              	.LBB94:
2258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 389              		.loc 1 2258 0
 390 003c 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 391              	.LVL49:
 392 0040 64B2     		sxtb	r4, r4
 393              	.LVL50:
2260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 394              		.loc 1 2260 0
 395 0042 01E0     		b	.L36
 396              	.L38:
2273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 397              		.loc 1 2273 0
 398 0044 013C     		subs	r4, r4, #1
 399              	.LVL51:
 400 0046 64B2     		sxtb	r4, r4
 401              	.LVL52:
 402              	.L36:
2260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 403              		.loc 1 2260 0
 404 0048 002C     		cmp	r4, #0
 405 004a 0ADD     		ble	.L37
2262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
ARM GAS  /tmp/ccXf4wQt.s 			page 50


 406              		.loc 1 2262 0
 407 004c 2B69     		ldr	r3, [r5, #16]
 408 004e 43B1     		cbz	r3, .L37
2264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 409              		.loc 1 2264 0
 410 0050 05F11000 		add	r0, r5, #16
 411 0054 FFF7FEFF 		bl	xTaskRemoveFromEventList
 412              	.LVL53:
 413 0058 0028     		cmp	r0, #0
 414 005a F3D0     		beq	.L38
2266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 415              		.loc 1 2266 0
 416 005c FFF7FEFF 		bl	vTaskMissedYield
 417              	.LVL54:
 418 0060 F0E7     		b	.L38
 419              	.L37:
2281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 420              		.loc 1 2281 0
 421 0062 FF23     		movs	r3, #255
 422 0064 85F84430 		strb	r3, [r5, #68]
 423              	.LBE94:
2283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 424              		.loc 1 2283 0
 425 0068 FFF7FEFF 		bl	vPortExitCritical
 426              	.LVL55:
 427 006c 38BD     		pop	{r3, r4, r5, pc}
 428              		.cfi_endproc
 429              	.LFE25:
 431              		.section	.text.xQueueGenericReset,"ax",%progbits
 432              		.align	1
 433              		.global	xQueueGenericReset
 434              		.syntax unified
 435              		.thumb
 436              		.thumb_func
 437              		.fpu softvfp
 439              	xQueueGenericReset:
 440              	.LFB5:
 256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 441              		.loc 1 256 0
 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 0
 444              		@ frame_needed = 0, uses_anonymous_args = 0
 445              	.LVL56:
 446 0000 38B5     		push	{r3, r4, r5, lr}
 447              	.LCFI6:
 448              		.cfi_def_cfa_offset 16
 449              		.cfi_offset 3, -16
 450              		.cfi_offset 4, -12
 451              		.cfi_offset 5, -8
 452              		.cfi_offset 14, -4
 453              	.LVL57:
 259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 454              		.loc 1 259 0
 455 0002 30B3     		cbz	r0, .L47
 456 0004 0446     		mov	r4, r0
 457 0006 0D46     		mov	r5, r1
 261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
ARM GAS  /tmp/ccXf4wQt.s 			page 51


 458              		.loc 1 261 0
 459 0008 FFF7FEFF 		bl	vPortEnterCritical
 460              	.LVL58:
 263:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 461              		.loc 1 263 0
 462 000c 2168     		ldr	r1, [r4]
 463 000e E26B     		ldr	r2, [r4, #60]
 464 0010 236C     		ldr	r3, [r4, #64]
 465 0012 03FB0210 		mla	r0, r3, r2, r1
 466 0016 A060     		str	r0, [r4, #8]
 264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 467              		.loc 1 264 0
 468 0018 0020     		movs	r0, #0
 469 001a A063     		str	r0, [r4, #56]
 265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 470              		.loc 1 265 0
 471 001c 6160     		str	r1, [r4, #4]
 266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 472              		.loc 1 266 0
 473 001e 013A     		subs	r2, r2, #1
 474 0020 02FB0313 		mla	r3, r2, r3, r1
 475 0024 E360     		str	r3, [r4, #12]
 267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 476              		.loc 1 267 0
 477 0026 FF23     		movs	r3, #255
 478 0028 84F84430 		strb	r3, [r4, #68]
 268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 479              		.loc 1 268 0
 480 002c 84F84530 		strb	r3, [r4, #69]
 270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 481              		.loc 1 270 0
 482 0030 C5B9     		cbnz	r5, .L44
 277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 483              		.loc 1 277 0
 484 0032 2369     		ldr	r3, [r4, #16]
 485 0034 F3B1     		cbz	r3, .L45
 279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 486              		.loc 1 279 0
 487 0036 04F11000 		add	r0, r4, #16
 488 003a FFF7FEFF 		bl	xTaskRemoveFromEventList
 489              	.LVL59:
 490 003e C8B1     		cbz	r0, .L45
 281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 491              		.loc 1 281 0
 492 0040 4FF08052 		mov	r2, #268435456
 493 0044 0D4B     		ldr	r3, .L48
 494 0046 1A60     		str	r2, [r3]
 495              		.syntax unified
 496              	@ 281 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 497 0048 BFF34F8F 		dsb
 498              	@ 0 "" 2
 499              	@ 281 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 500 004c BFF36F8F 		isb
 501              	@ 0 "" 2
 502              		.thumb
 503              		.syntax unified
 504 0050 10E0     		b	.L45
ARM GAS  /tmp/ccXf4wQt.s 			page 52


 505              	.LVL60:
 506              	.L47:
 507              	.LBB95:
 508              	.LBB96:
 509              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.1.0
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
ARM GAS  /tmp/ccXf4wQt.s 			page 53


  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
ARM GAS  /tmp/ccXf4wQt.s 			page 54


 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
ARM GAS  /tmp/ccXf4wQt.s 			page 55


 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 510              		.loc 2 195 0
 511              		.syntax unified
 512              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 513 0052 4FF05003 			mov r3, #80												
 514 0056 83F31188 		msr basepri, r3											
 515 005a BFF36F8F 		isb														
 516 005e BFF34F8F 		dsb														
 517              	
 518              	@ 0 "" 2
 519              	.LVL61:
 520              		.thumb
 521              		.syntax unified
 522              	.L43:
 523 0062 FEE7     		b	.L43
 524              	.LVL62:
 525              	.L44:
 526              	.LBE96:
 527              	.LBE95:
 296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 528              		.loc 1 296 0
 529 0064 04F11000 		add	r0, r4, #16
 530 0068 FFF7FEFF 		bl	vListInitialise
 531              	.LVL63:
 297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 532              		.loc 1 297 0
 533 006c 04F12400 		add	r0, r4, #36
 534 0070 FFF7FEFF 		bl	vListInitialise
 535              	.LVL64:
ARM GAS  /tmp/ccXf4wQt.s 			page 56


 536              	.L45:
 300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 537              		.loc 1 300 0
 538 0074 FFF7FEFF 		bl	vPortExitCritical
 539              	.LVL65:
 305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 540              		.loc 1 305 0
 541 0078 0120     		movs	r0, #1
 542 007a 38BD     		pop	{r3, r4, r5, pc}
 543              	.LVL66:
 544              	.L49:
 545              		.align	2
 546              	.L48:
 547 007c 04ED00E0 		.word	-536810236
 548              		.cfi_endproc
 549              	.LFE5:
 551              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 552              		.align	1
 553              		.syntax unified
 554              		.thumb
 555              		.thumb_func
 556              		.fpu softvfp
 558              	prvInitialiseNewQueue:
 559              	.LFB7:
 430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 560              		.loc 1 430 0
 561              		.cfi_startproc
 562              		@ args = 4, pretend = 0, frame = 0
 563              		@ frame_needed = 0, uses_anonymous_args = 0
 564              	.LVL67:
 565 0000 10B5     		push	{r4, lr}
 566              	.LCFI7:
 567              		.cfi_def_cfa_offset 8
 568              		.cfi_offset 4, -8
 569              		.cfi_offset 14, -4
 570 0002 029B     		ldr	r3, [sp, #8]
 571              	.LVL68:
 435:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 572              		.loc 1 435 0
 573 0004 0C46     		mov	r4, r1
 574 0006 39B1     		cbz	r1, .L54
 446:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 575              		.loc 1 446 0
 576 0008 1A60     		str	r2, [r3]
 577              	.L52:
 451:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 578              		.loc 1 451 0
 579 000a D863     		str	r0, [r3, #60]
 452:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 580              		.loc 1 452 0
 581 000c 1C64     		str	r4, [r3, #64]
 453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 582              		.loc 1 453 0
 583 000e 0121     		movs	r1, #1
 584              	.LVL69:
 585 0010 1846     		mov	r0, r3
 586              	.LVL70:
ARM GAS  /tmp/ccXf4wQt.s 			page 57


 587 0012 FFF7FEFF 		bl	xQueueGenericReset
 588              	.LVL71:
 589 0016 10BD     		pop	{r4, pc}
 590              	.LVL72:
 591              	.L54:
 441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 592              		.loc 1 441 0
 593 0018 1B60     		str	r3, [r3]
 594 001a F6E7     		b	.L52
 595              		.cfi_endproc
 596              	.LFE7:
 598              		.section	.text.xQueueGenericCreate,"ax",%progbits
 599              		.align	1
 600              		.global	xQueueGenericCreate
 601              		.syntax unified
 602              		.thumb
 603              		.thumb_func
 604              		.fpu softvfp
 606              	xQueueGenericCreate:
 607              	.LFB6:
 369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 608              		.loc 1 369 0
 609              		.cfi_startproc
 610              		@ args = 0, pretend = 0, frame = 0
 611              		@ frame_needed = 0, uses_anonymous_args = 0
 612              	.LVL73:
 374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 613              		.loc 1 374 0
 614 0000 40B9     		cbnz	r0, .L56
 615              	.LBB97:
 616              	.LBB98:
 617              		.loc 2 195 0
 618              		.syntax unified
 619              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 620 0002 4FF05003 			mov r3, #80												
 621 0006 83F31188 		msr basepri, r3											
 622 000a BFF36F8F 		isb														
 623 000e BFF34F8F 		dsb														
 624              	
 625              	@ 0 "" 2
 626              	.LVL74:
 627              		.thumb
 628              		.syntax unified
 629              	.L57:
 630 0012 FEE7     		b	.L57
 631              	.L56:
 632              	.LBE98:
 633              	.LBE97:
 369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 634              		.loc 1 369 0
 635 0014 F0B5     		push	{r4, r5, r6, r7, lr}
 636              	.LCFI8:
 637              		.cfi_def_cfa_offset 20
 638              		.cfi_offset 4, -20
 639              		.cfi_offset 5, -16
 640              		.cfi_offset 6, -12
 641              		.cfi_offset 7, -8
ARM GAS  /tmp/ccXf4wQt.s 			page 58


 642              		.cfi_offset 14, -4
 643 0016 83B0     		sub	sp, sp, #12
 644              	.LCFI9:
 645              		.cfi_def_cfa_offset 32
 646 0018 0546     		mov	r5, r0
 376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 647              		.loc 1 376 0
 648 001a 11B1     		cbz	r1, .L60
 385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 649              		.loc 1 385 0
 650 001c 01FB00F0 		mul	r0, r1, r0
 651              	.LVL75:
 652 0020 00E0     		b	.L58
 653              	.LVL76:
 654              	.L60:
 379:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 655              		.loc 1 379 0
 656 0022 0020     		movs	r0, #0
 657              	.LVL77:
 658              	.L58:
 659 0024 1746     		mov	r7, r2
 660 0026 0C46     		mov	r4, r1
 661              	.LVL78:
 397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 662              		.loc 1 397 0
 663 0028 4830     		adds	r0, r0, #72
 664              	.LVL79:
 665 002a FFF7FEFF 		bl	pvPortMalloc
 666              	.LVL80:
 399:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 667              		.loc 1 399 0
 668 002e 0646     		mov	r6, r0
 669 0030 38B1     		cbz	r0, .L55
 670              	.LVL81:
 415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 671              		.loc 1 415 0
 672 0032 0090     		str	r0, [sp]
 673 0034 3B46     		mov	r3, r7
 674 0036 00F14802 		add	r2, r0, #72
 675              	.LVL82:
 676 003a 2146     		mov	r1, r4
 677 003c 2846     		mov	r0, r5
 678              	.LVL83:
 679 003e FFF7FEFF 		bl	prvInitialiseNewQueue
 680              	.LVL84:
 681              	.L55:
 424:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 682              		.loc 1 424 0
 683 0042 3046     		mov	r0, r6
 684 0044 03B0     		add	sp, sp, #12
 685              	.LCFI10:
 686              		.cfi_def_cfa_offset 20
 687              		@ sp needed
 688 0046 F0BD     		pop	{r4, r5, r6, r7, pc}
 689              		.cfi_endproc
 690              	.LFE6:
 692              		.section	.text.xQueueGenericSend,"ax",%progbits
ARM GAS  /tmp/ccXf4wQt.s 			page 59


 693              		.align	1
 694              		.global	xQueueGenericSend
 695              		.syntax unified
 696              		.thumb
 697              		.thumb_func
 698              		.fpu softvfp
 700              	xQueueGenericSend:
 701              	.LFB10:
 748:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 702              		.loc 1 748 0
 703              		.cfi_startproc
 704              		@ args = 0, pretend = 0, frame = 16
 705              		@ frame_needed = 0, uses_anonymous_args = 0
 706              	.LVL85:
 707 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 708              	.LCFI11:
 709              		.cfi_def_cfa_offset 20
 710              		.cfi_offset 4, -20
 711              		.cfi_offset 5, -16
 712              		.cfi_offset 6, -12
 713              		.cfi_offset 7, -8
 714              		.cfi_offset 14, -4
 715 0002 85B0     		sub	sp, sp, #20
 716              	.LCFI12:
 717              		.cfi_def_cfa_offset 40
 718 0004 0192     		str	r2, [sp, #4]
 719              	.LVL86:
 753:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 720              		.loc 1 753 0
 721 0006 60B1     		cbz	r0, .L93
 722 0008 0446     		mov	r4, r0
 754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 723              		.loc 1 754 0
 724 000a 99B1     		cbz	r1, .L94
 725 000c 0125     		movs	r5, #1
 726              	.LVL87:
 727              	.L66:
 754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 728              		.loc 1 754 0 is_stmt 0 discriminator 6
 729 000e BDB9     		cbnz	r5, .L67
 730              	.LBB99:
 731              	.LBB100:
 732              		.loc 2 195 0 is_stmt 1
 733              		.syntax unified
 734              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 735 0010 4FF05003 			mov r3, #80												
 736 0014 83F31188 		msr basepri, r3											
 737 0018 BFF36F8F 		isb														
 738 001c BFF34F8F 		dsb														
 739              	
 740              	@ 0 "" 2
 741              	.LVL88:
 742              		.thumb
 743              		.syntax unified
 744              	.L68:
 745 0020 FEE7     		b	.L68
 746              	.LVL89:
ARM GAS  /tmp/ccXf4wQt.s 			page 60


 747              	.L93:
 748              	.LBE100:
 749              	.LBE99:
 750              	.LBB101:
 751              	.LBB102:
 752              		.syntax unified
 753              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 754 0022 4FF05003 			mov r3, #80												
 755 0026 83F31188 		msr basepri, r3											
 756 002a BFF36F8F 		isb														
 757 002e BFF34F8F 		dsb														
 758              	
 759              	@ 0 "" 2
 760              	.LVL90:
 761              		.thumb
 762              		.syntax unified
 763              	.L65:
 764 0032 FEE7     		b	.L65
 765              	.LVL91:
 766              	.L94:
 767              	.LBE102:
 768              	.LBE101:
 754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 769              		.loc 1 754 0 discriminator 2
 770 0034 026C     		ldr	r2, [r0, #64]
 771              	.LVL92:
 772 0036 0AB9     		cbnz	r2, .L88
 754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 773              		.loc 1 754 0 is_stmt 0
 774 0038 0125     		movs	r5, #1
 775 003a E8E7     		b	.L66
 776              	.L88:
 777 003c 0025     		movs	r5, #0
 778 003e E6E7     		b	.L66
 779              	.L67:
 755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 780              		.loc 1 755 0 is_stmt 1
 781 0040 022B     		cmp	r3, #2
 782 0042 09D0     		beq	.L95
 783              	.L69:
 755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 784              		.loc 1 755 0 is_stmt 0 discriminator 6
 785 0044 6DB9     		cbnz	r5, .L70
 786              	.LBB103:
 787              	.LBB104:
 788              		.loc 2 195 0 is_stmt 1
 789              		.syntax unified
 790              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 791 0046 4FF05003 			mov r3, #80												
 792 004a 83F31188 		msr basepri, r3											
 793 004e BFF36F8F 		isb														
 794 0052 BFF34F8F 		dsb														
 795              	
 796              	@ 0 "" 2
 797              	.LVL93:
 798              		.thumb
 799              		.syntax unified
ARM GAS  /tmp/ccXf4wQt.s 			page 61


 800              	.L71:
 801 0056 FEE7     		b	.L71
 802              	.LVL94:
 803              	.L95:
 804              	.LBE104:
 805              	.LBE103:
 755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 806              		.loc 1 755 0 discriminator 2
 807 0058 E26B     		ldr	r2, [r4, #60]
 808 005a 012A     		cmp	r2, #1
 809 005c F2D0     		beq	.L69
 755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 810              		.loc 1 755 0 is_stmt 0
 811 005e 0025     		movs	r5, #0
 812 0060 F0E7     		b	.L69
 813              	.L70:
 814 0062 1E46     		mov	r6, r3
 815 0064 0F46     		mov	r7, r1
 758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 816              		.loc 1 758 0 is_stmt 1
 817 0066 FFF7FEFF 		bl	xTaskGetSchedulerState
 818              	.LVL95:
 819 006a 10B9     		cbnz	r0, .L72
 758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 820              		.loc 1 758 0 is_stmt 0 discriminator 2
 821 006c 019B     		ldr	r3, [sp, #4]
 822 006e 03B1     		cbz	r3, .L72
 758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 823              		.loc 1 758 0
 824 0070 0025     		movs	r5, #0
 825              	.L72:
 758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 826              		.loc 1 758 0 discriminator 6
 827 0072 45B9     		cbnz	r5, .L91
 828              	.LBB105:
 829              	.LBB106:
 830              		.loc 2 195 0 is_stmt 1
 831              		.syntax unified
 832              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 833 0074 4FF05003 			mov r3, #80												
 834 0078 83F31188 		msr basepri, r3											
 835 007c BFF36F8F 		isb														
 836 0080 BFF34F8F 		dsb														
 837              	
 838              	@ 0 "" 2
 839              	.LVL96:
 840              		.thumb
 841              		.syntax unified
 842              	.L74:
 843 0084 FEE7     		b	.L74
 844              	.L91:
 845              	.LBE106:
 846              	.LBE105:
 847 0086 0025     		movs	r5, #0
 848 0088 2CE0     		b	.L73
 849              	.LVL97:
 850              	.L75:
ARM GAS  /tmp/ccXf4wQt.s 			page 62


 840:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 851              		.loc 1 840 0
 852 008a 3246     		mov	r2, r6
 853 008c 3946     		mov	r1, r7
 854 008e 2046     		mov	r0, r4
 855 0090 FFF7FEFF 		bl	prvCopyDataToQueue
 856              	.LVL98:
 844:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 857              		.loc 1 844 0
 858 0094 636A     		ldr	r3, [r4, #36]
 859 0096 8BB1     		cbz	r3, .L77
 846:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 860              		.loc 1 846 0
 861 0098 04F12400 		add	r0, r4, #36
 862              	.LVL99:
 863 009c FFF7FEFF 		bl	xTaskRemoveFromEventList
 864              	.LVL100:
 865 00a0 38B1     		cbz	r0, .L78
 852:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 866              		.loc 1 852 0
 867 00a2 4FF08052 		mov	r2, #268435456
 868 00a6 374B     		ldr	r3, .L97
 869 00a8 1A60     		str	r2, [r3]
 870              		.syntax unified
 871              	@ 852 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 872 00aa BFF34F8F 		dsb
 873              	@ 0 "" 2
 874              	@ 852 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 875 00ae BFF36F8F 		isb
 876              	@ 0 "" 2
 877              		.thumb
 878              		.syntax unified
 879              	.L78:
 874:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 880              		.loc 1 874 0
 881 00b2 FFF7FEFF 		bl	vPortExitCritical
 882              	.LVL101:
 875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 883              		.loc 1 875 0
 884 00b6 0120     		movs	r0, #1
 885              	.L63:
 954:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 886              		.loc 1 954 0
 887 00b8 05B0     		add	sp, sp, #20
 888              	.LCFI13:
 889              		.cfi_remember_state
 890              		.cfi_def_cfa_offset 20
 891              		@ sp needed
 892 00ba F0BD     		pop	{r4, r5, r6, r7, pc}
 893              	.LVL102:
 894              	.L77:
 895              	.LCFI14:
 896              		.cfi_restore_state
 859:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 897              		.loc 1 859 0
 898 00bc 0028     		cmp	r0, #0
 899 00be F8D0     		beq	.L78
ARM GAS  /tmp/ccXf4wQt.s 			page 63


 865:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 900              		.loc 1 865 0
 901 00c0 4FF08052 		mov	r2, #268435456
 902 00c4 2F4B     		ldr	r3, .L97
 903 00c6 1A60     		str	r2, [r3]
 904              		.syntax unified
 905              	@ 865 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 906 00c8 BFF34F8F 		dsb
 907              	@ 0 "" 2
 908              	@ 865 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 909 00cc BFF36F8F 		isb
 910              	@ 0 "" 2
 911              		.thumb
 912              		.syntax unified
 913 00d0 EFE7     		b	.L78
 914              	.LVL103:
 915              	.L96:
 883:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 916              		.loc 1 883 0
 917 00d2 FFF7FEFF 		bl	vPortExitCritical
 918              	.LVL104:
 888:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 919              		.loc 1 888 0
 920 00d6 0020     		movs	r0, #0
 921 00d8 EEE7     		b	.L63
 922              	.L85:
 940:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 923              		.loc 1 940 0
 924 00da 2046     		mov	r0, r4
 925 00dc FFF7FEFF 		bl	prvUnlockQueue
 926              	.LVL105:
 941:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 927              		.loc 1 941 0
 928 00e0 FFF7FEFF 		bl	xTaskResumeAll
 929              	.LVL106:
 930              	.L73:
 768:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 931              		.loc 1 768 0
 932 00e4 FFF7FEFF 		bl	vPortEnterCritical
 933              	.LVL107:
 774:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 934              		.loc 1 774 0
 935 00e8 A26B     		ldr	r2, [r4, #56]
 936 00ea E36B     		ldr	r3, [r4, #60]
 937 00ec 9A42     		cmp	r2, r3
 938 00ee CCD3     		bcc	.L75
 774:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 939              		.loc 1 774 0 is_stmt 0 discriminator 1
 940 00f0 022E     		cmp	r6, #2
 941 00f2 CAD0     		beq	.L75
 879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 942              		.loc 1 879 0 is_stmt 1
 943 00f4 019B     		ldr	r3, [sp, #4]
 944 00f6 002B     		cmp	r3, #0
 945 00f8 EBD0     		beq	.L96
 890:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 946              		.loc 1 890 0
ARM GAS  /tmp/ccXf4wQt.s 			page 64


 947 00fa 1DB9     		cbnz	r5, .L81
 894:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 948              		.loc 1 894 0
 949 00fc 02A8     		add	r0, sp, #8
 950 00fe FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 951              	.LVL108:
 895:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 952              		.loc 1 895 0
 953 0102 0125     		movs	r5, #1
 954              	.LVL109:
 955              	.L81:
 904:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 956              		.loc 1 904 0
 957 0104 FFF7FEFF 		bl	vPortExitCritical
 958              	.LVL110:
 909:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 959              		.loc 1 909 0
 960 0108 FFF7FEFF 		bl	vTaskSuspendAll
 961              	.LVL111:
 910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 962              		.loc 1 910 0
 963 010c FFF7FEFF 		bl	vPortEnterCritical
 964              	.LVL112:
 965 0110 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 966 0114 5BB2     		sxtb	r3, r3
 967 0116 B3F1FF3F 		cmp	r3, #-1
 968 011a 02D1     		bne	.L82
 910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 969              		.loc 1 910 0 is_stmt 0 discriminator 1
 970 011c 0023     		movs	r3, #0
 971 011e 84F84430 		strb	r3, [r4, #68]
 972              	.L82:
 910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 973              		.loc 1 910 0 discriminator 3
 974 0122 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 975 0126 5BB2     		sxtb	r3, r3
 976 0128 B3F1FF3F 		cmp	r3, #-1
 977 012c 02D1     		bne	.L83
 910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 978              		.loc 1 910 0 discriminator 4
 979 012e 0023     		movs	r3, #0
 980 0130 84F84530 		strb	r3, [r4, #69]
 981              	.L83:
 910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 982              		.loc 1 910 0 discriminator 6
 983 0134 FFF7FEFF 		bl	vPortExitCritical
 984              	.LVL113:
 913:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 985              		.loc 1 913 0 is_stmt 1 discriminator 6
 986 0138 01A9     		add	r1, sp, #4
 987 013a 02A8     		add	r0, sp, #8
 988 013c FFF7FEFF 		bl	xTaskCheckForTimeOut
 989              	.LVL114:
 990 0140 C8B9     		cbnz	r0, .L84
 915:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 991              		.loc 1 915 0
 992 0142 2046     		mov	r0, r4
ARM GAS  /tmp/ccXf4wQt.s 			page 65


 993 0144 FFF7FEFF 		bl	prvIsQueueFull
 994              	.LVL115:
 995 0148 0028     		cmp	r0, #0
 996 014a C6D0     		beq	.L85
 918:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 997              		.loc 1 918 0
 998 014c 0199     		ldr	r1, [sp, #4]
 999 014e 04F11000 		add	r0, r4, #16
 1000 0152 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1001              	.LVL116:
 925:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1002              		.loc 1 925 0
 1003 0156 2046     		mov	r0, r4
 1004 0158 FFF7FEFF 		bl	prvUnlockQueue
 1005              	.LVL117:
 932:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1006              		.loc 1 932 0
 1007 015c FFF7FEFF 		bl	xTaskResumeAll
 1008              	.LVL118:
 1009 0160 0028     		cmp	r0, #0
 1010 0162 BFD1     		bne	.L73
 934:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1011              		.loc 1 934 0
 1012 0164 4FF08052 		mov	r2, #268435456
 1013 0168 064B     		ldr	r3, .L97
 1014 016a 1A60     		str	r2, [r3]
 1015              		.syntax unified
 1016              	@ 934 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1017 016c BFF34F8F 		dsb
 1018              	@ 0 "" 2
 1019              	@ 934 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1020 0170 BFF36F8F 		isb
 1021              	@ 0 "" 2
 1022              		.thumb
 1023              		.syntax unified
 1024 0174 B6E7     		b	.L73
 1025              	.L84:
 947:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 1026              		.loc 1 947 0
 1027 0176 2046     		mov	r0, r4
 1028 0178 FFF7FEFF 		bl	prvUnlockQueue
 1029              	.LVL119:
 948:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1030              		.loc 1 948 0
 1031 017c FFF7FEFF 		bl	xTaskResumeAll
 1032              	.LVL120:
 951:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1033              		.loc 1 951 0
 1034 0180 0020     		movs	r0, #0
 1035 0182 99E7     		b	.L63
 1036              	.L98:
 1037              		.align	2
 1038              	.L97:
 1039 0184 04ED00E0 		.word	-536810236
 1040              		.cfi_endproc
 1041              	.LFE10:
 1043              		.section	.text.prvInitialiseMutex,"ax",%progbits
ARM GAS  /tmp/ccXf4wQt.s 			page 66


 1044              		.align	1
 1045              		.syntax unified
 1046              		.thumb
 1047              		.thumb_func
 1048              		.fpu softvfp
 1050              	prvInitialiseMutex:
 1051              	.LFB8:
 474:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 1052              		.loc 1 474 0
 1053              		.cfi_startproc
 1054              		@ args = 0, pretend = 0, frame = 0
 1055              		@ frame_needed = 0, uses_anonymous_args = 0
 1056              	.LVL121:
 475:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1057              		.loc 1 475 0
 1058 0000 48B1     		cbz	r0, .L102
 474:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 1059              		.loc 1 474 0
 1060 0002 08B5     		push	{r3, lr}
 1061              	.LCFI15:
 1062              		.cfi_def_cfa_offset 8
 1063              		.cfi_offset 3, -8
 1064              		.cfi_offset 14, -4
 481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1065              		.loc 1 481 0
 1066 0004 0021     		movs	r1, #0
 1067 0006 8160     		str	r1, [r0, #8]
 482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1068              		.loc 1 482 0
 1069 0008 0160     		str	r1, [r0]
 485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1070              		.loc 1 485 0
 1071 000a C160     		str	r1, [r0, #12]
 490:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1072              		.loc 1 490 0
 1073 000c 0B46     		mov	r3, r1
 1074 000e 0A46     		mov	r2, r1
 1075 0010 FFF7FEFF 		bl	xQueueGenericSend
 1076              	.LVL122:
 1077 0014 08BD     		pop	{r3, pc}
 1078              	.LVL123:
 1079              	.L102:
 1080              	.LCFI16:
 1081              		.cfi_def_cfa_offset 0
 1082              		.cfi_restore 3
 1083              		.cfi_restore 14
 1084 0016 7047     		bx	lr
 1085              		.cfi_endproc
 1086              	.LFE8:
 1088              		.section	.text.xQueueCreateMutex,"ax",%progbits
 1089              		.align	1
 1090              		.global	xQueueCreateMutex
 1091              		.syntax unified
 1092              		.thumb
 1093              		.thumb_func
 1094              		.fpu softvfp
 1096              	xQueueCreateMutex:
ARM GAS  /tmp/ccXf4wQt.s 			page 67


 1097              	.LFB9:
 504:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xNewQueue;
 1098              		.loc 1 504 0
 1099              		.cfi_startproc
 1100              		@ args = 0, pretend = 0, frame = 0
 1101              		@ frame_needed = 0, uses_anonymous_args = 0
 1102              	.LVL124:
 1103 0000 10B5     		push	{r4, lr}
 1104              	.LCFI17:
 1105              		.cfi_def_cfa_offset 8
 1106              		.cfi_offset 4, -8
 1107              		.cfi_offset 14, -4
 1108              	.LVL125:
 508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1109              		.loc 1 508 0
 1110 0002 0246     		mov	r2, r0
 1111 0004 0021     		movs	r1, #0
 1112 0006 0120     		movs	r0, #1
 1113              	.LVL126:
 1114 0008 FFF7FEFF 		bl	xQueueGenericCreate
 1115              	.LVL127:
 1116 000c 0446     		mov	r4, r0
 1117              	.LVL128:
 509:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1118              		.loc 1 509 0
 1119 000e FFF7FEFF 		bl	prvInitialiseMutex
 1120              	.LVL129:
 512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1121              		.loc 1 512 0
 1122 0012 2046     		mov	r0, r4
 1123 0014 10BD     		pop	{r4, pc}
 1124              		.cfi_endproc
 1125              	.LFE9:
 1127              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1128              		.align	1
 1129              		.global	xQueueGenericSendFromISR
 1130              		.syntax unified
 1131              		.thumb
 1132              		.thumb_func
 1133              		.fpu softvfp
 1135              	xQueueGenericSendFromISR:
 1136              	.LFB11:
 958:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1137              		.loc 1 958 0
 1138              		.cfi_startproc
 1139              		@ args = 0, pretend = 0, frame = 0
 1140              		@ frame_needed = 0, uses_anonymous_args = 0
 1141              	.LVL130:
 1142 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1143              	.LCFI18:
 1144              		.cfi_def_cfa_offset 32
 1145              		.cfi_offset 3, -32
 1146              		.cfi_offset 4, -28
 1147              		.cfi_offset 5, -24
 1148              		.cfi_offset 6, -20
 1149              		.cfi_offset 7, -16
 1150              		.cfi_offset 8, -12
ARM GAS  /tmp/ccXf4wQt.s 			page 68


 1151              		.cfi_offset 9, -8
 1152              		.cfi_offset 14, -4
 1153              	.LVL131:
 963:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1154              		.loc 1 963 0
 1155 0004 60B1     		cbz	r0, .L127
 1156 0006 0446     		mov	r4, r0
 964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1157              		.loc 1 964 0
 1158 0008 99B1     		cbz	r1, .L128
 1159 000a 0120     		movs	r0, #1
 1160              	.LVL132:
 1161              	.L110:
 964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1162              		.loc 1 964 0 is_stmt 0 discriminator 6
 1163 000c B8B9     		cbnz	r0, .L111
 1164              	.LBB107:
 1165              	.LBB108:
 1166              		.loc 2 195 0 is_stmt 1
 1167              		.syntax unified
 1168              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1169 000e 4FF05003 			mov r3, #80												
 1170 0012 83F31188 		msr basepri, r3											
 1171 0016 BFF36F8F 		isb														
 1172 001a BFF34F8F 		dsb														
 1173              	
 1174              	@ 0 "" 2
 1175              	.LVL133:
 1176              		.thumb
 1177              		.syntax unified
 1178              	.L112:
 1179 001e FEE7     		b	.L112
 1180              	.LVL134:
 1181              	.L127:
 1182              	.LBE108:
 1183              	.LBE107:
 1184              	.LBB109:
 1185              	.LBB110:
 1186              		.syntax unified
 1187              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1188 0020 4FF05003 			mov r3, #80												
 1189 0024 83F31188 		msr basepri, r3											
 1190 0028 BFF36F8F 		isb														
 1191 002c BFF34F8F 		dsb														
 1192              	
 1193              	@ 0 "" 2
 1194              	.LVL135:
 1195              		.thumb
 1196              		.syntax unified
 1197              	.L109:
 1198 0030 FEE7     		b	.L109
 1199              	.LVL136:
 1200              	.L128:
 1201              	.LBE110:
 1202              	.LBE109:
 964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1203              		.loc 1 964 0 discriminator 2
ARM GAS  /tmp/ccXf4wQt.s 			page 69


 1204 0032 006C     		ldr	r0, [r0, #64]
 1205              	.LVL137:
 1206 0034 08B9     		cbnz	r0, .L120
 964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1207              		.loc 1 964 0 is_stmt 0
 1208 0036 0120     		movs	r0, #1
 1209 0038 E8E7     		b	.L110
 1210              	.L120:
 1211 003a 0020     		movs	r0, #0
 1212 003c E6E7     		b	.L110
 1213              	.L111:
 965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1214              		.loc 1 965 0 is_stmt 1
 1215 003e 022B     		cmp	r3, #2
 1216 0040 09D0     		beq	.L129
 1217              	.L113:
 965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1218              		.loc 1 965 0 is_stmt 0 discriminator 6
 1219 0042 68B9     		cbnz	r0, .L114
 1220              	.LBB111:
 1221              	.LBB112:
 1222              		.loc 2 195 0 is_stmt 1
 1223              		.syntax unified
 1224              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1225 0044 4FF05003 			mov r3, #80												
 1226 0048 83F31188 		msr basepri, r3											
 1227 004c BFF36F8F 		isb														
 1228 0050 BFF34F8F 		dsb														
 1229              	
 1230              	@ 0 "" 2
 1231              	.LVL138:
 1232              		.thumb
 1233              		.syntax unified
 1234              	.L115:
 1235 0054 FEE7     		b	.L115
 1236              	.LVL139:
 1237              	.L129:
 1238              	.LBE112:
 1239              	.LBE111:
 965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1240              		.loc 1 965 0 discriminator 2
 1241 0056 E56B     		ldr	r5, [r4, #60]
 1242 0058 012D     		cmp	r5, #1
 1243 005a F2D0     		beq	.L113
 965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1244              		.loc 1 965 0 is_stmt 0
 1245 005c 0020     		movs	r0, #0
 1246 005e F0E7     		b	.L113
 1247              	.L114:
 1248 0060 1F46     		mov	r7, r3
 1249 0062 9046     		mov	r8, r2
 1250 0064 8946     		mov	r9, r1
 981:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1251              		.loc 1 981 0 is_stmt 1
 1252 0066 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1253              	.LVL140:
 1254              	.LBB113:
ARM GAS  /tmp/ccXf4wQt.s 			page 70


 1255              	.LBB114:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1256              		.loc 2 211 0
 1257              		.syntax unified
 1258              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1259 006a EFF31186 			mrs r6, basepri											
 1260 006e 4FF05003 		mov r3, #80												
 1261 0072 83F31188 		msr basepri, r3											
 1262 0076 BFF36F8F 		isb														
 1263 007a BFF34F8F 		dsb														
 1264              	
 1265              	@ 0 "" 2
 1266              		.thumb
 1267              		.syntax unified
 1268              	.LBE114:
 1269              	.LBE113:
 990:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1270              		.loc 1 990 0
 1271 007e A26B     		ldr	r2, [r4, #56]
 1272 0080 E36B     		ldr	r3, [r4, #60]
 1273 0082 9A42     		cmp	r2, r3
 1274 0084 01D3     		bcc	.L116
 990:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1275              		.loc 1 990 0 is_stmt 0 discriminator 1
 1276 0086 022F     		cmp	r7, #2
 1277 0088 21D1     		bne	.L122
 1278              	.L116:
 1279              	.LBB115:
 992:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1280              		.loc 1 992 0 is_stmt 1
 1281 008a 94F84550 		ldrb	r5, [r4, #69]	@ zero_extendqisi2
 1282 008e 6DB2     		sxtb	r5, r5
 1283              	.LVL141:
1001:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1284              		.loc 1 1001 0
 1285 0090 3A46     		mov	r2, r7
 1286 0092 4946     		mov	r1, r9
 1287 0094 2046     		mov	r0, r4
 1288 0096 FFF7FEFF 		bl	prvCopyDataToQueue
 1289              	.LVL142:
1005:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1290              		.loc 1 1005 0
ARM GAS  /tmp/ccXf4wQt.s 			page 71


 1291 009a B5F1FF3F 		cmp	r5, #-1
 1292 009e 10D1     		bne	.L118
1060:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1293              		.loc 1 1060 0
 1294 00a0 636A     		ldr	r3, [r4, #36]
 1295 00a2 B3B1     		cbz	r3, .L123
1062:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1296              		.loc 1 1062 0
 1297 00a4 04F12400 		add	r0, r4, #36
 1298 00a8 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1299              	.LVL143:
 1300 00ac 98B1     		cbz	r0, .L124
1066:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 1301              		.loc 1 1066 0
 1302 00ae B8F1000F 		cmp	r8, #0
 1303 00b2 12D0     		beq	.L125
1068:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 1304              		.loc 1 1068 0
 1305 00b4 0120     		movs	r0, #1
 1306 00b6 C8F80000 		str	r0, [r8]
 1307              	.LVL144:
 1308              	.L117:
 1309              	.LBE115:
 1310              	.LBB116:
 1311              	.LBB117:
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1312              		.loc 2 229 0
 1313              		.syntax unified
 1314              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1315 00ba 86F31188 			msr basepri, r6	
 1316              	@ 0 "" 2
 1317              	.LVL145:
 1318              		.thumb
 1319              		.syntax unified
 1320              	.LBE117:
 1321              	.LBE116:
1105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1322              		.loc 1 1105 0
 1323 00be BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1324              	.LVL146:
ARM GAS  /tmp/ccXf4wQt.s 			page 72


 1325              	.L118:
 1326              	.LBB118:
1091:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1327              		.loc 1 1091 0
 1328 00c2 6B1C     		adds	r3, r5, #1
 1329 00c4 5BB2     		sxtb	r3, r3
 1330 00c6 84F84530 		strb	r3, [r4, #69]
1094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1331              		.loc 1 1094 0
 1332 00ca 0120     		movs	r0, #1
 1333 00cc F5E7     		b	.L117
 1334              	.LVL147:
 1335              	.L122:
 1336              	.LBE118:
1099:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1337              		.loc 1 1099 0
 1338 00ce 0020     		movs	r0, #0
 1339 00d0 F3E7     		b	.L117
 1340              	.LVL148:
 1341              	.L123:
 1342              	.LBB119:
1094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1343              		.loc 1 1094 0
 1344 00d2 0120     		movs	r0, #1
 1345 00d4 F1E7     		b	.L117
 1346              	.L124:
 1347 00d6 0120     		movs	r0, #1
 1348 00d8 EFE7     		b	.L117
 1349              	.L125:
 1350 00da 0120     		movs	r0, #1
 1351 00dc EDE7     		b	.L117
 1352              	.LBE119:
 1353              		.cfi_endproc
 1354              	.LFE11:
 1356              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1357              		.align	1
 1358              		.global	xQueueGiveFromISR
 1359              		.syntax unified
 1360              		.thumb
 1361              		.thumb_func
 1362              		.fpu softvfp
 1364              	xQueueGiveFromISR:
 1365              	.LFB12:
1109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1366              		.loc 1 1109 0
 1367              		.cfi_startproc
 1368              		@ args = 0, pretend = 0, frame = 0
 1369              		@ frame_needed = 0, uses_anonymous_args = 0
 1370              	.LVL149:
1120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1371              		.loc 1 1120 0
 1372 0000 60B1     		cbz	r0, .L148
1109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1373              		.loc 1 1109 0
 1374 0002 70B5     		push	{r4, r5, r6, lr}
 1375              	.LCFI19:
 1376              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccXf4wQt.s 			page 73


 1377              		.cfi_offset 4, -16
 1378              		.cfi_offset 5, -12
 1379              		.cfi_offset 6, -8
 1380              		.cfi_offset 14, -4
 1381 0004 0446     		mov	r4, r0
1124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1382              		.loc 1 1124 0
 1383 0006 036C     		ldr	r3, [r0, #64]
 1384 0008 8BB1     		cbz	r3, .L133
 1385              	.LBB120:
 1386              	.LBB121:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1387              		.loc 2 195 0
 1388              		.syntax unified
 1389              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1390 000a 4FF05003 			mov r3, #80												
 1391 000e 83F31188 		msr basepri, r3											
 1392 0012 BFF36F8F 		isb														
 1393 0016 BFF34F8F 		dsb														
 1394              	
 1395              	@ 0 "" 2
 1396              	.LVL150:
 1397              		.thumb
 1398              		.syntax unified
 1399              	.L134:
 1400 001a FEE7     		b	.L134
 1401              	.L148:
 1402              	.LCFI20:
 1403              		.cfi_def_cfa_offset 0
 1404              		.cfi_restore 4
 1405              		.cfi_restore 5
 1406              		.cfi_restore 6
 1407              		.cfi_restore 14
 1408              	.LBE121:
 1409              	.LBE120:
 1410              	.LBB122:
 1411              	.LBB123:
 1412              		.syntax unified
 1413              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1414 001c 4FF05003 			mov r3, #80												
 1415 0020 83F31188 		msr basepri, r3											
 1416 0024 BFF36F8F 		isb														
 1417 0028 BFF34F8F 		dsb														
 1418              	
 1419              	@ 0 "" 2
 1420              	.LVL151:
 1421              		.thumb
 1422              		.syntax unified
 1423              	.L132:
 1424 002c FEE7     		b	.L132
 1425              	.L133:
 1426              	.LCFI21:
 1427              		.cfi_def_cfa_offset 16
 1428              		.cfi_offset 4, -16
 1429              		.cfi_offset 5, -12
 1430              		.cfi_offset 6, -8
 1431              		.cfi_offset 14, -4
ARM GAS  /tmp/ccXf4wQt.s 			page 74


 1432              	.LBE123:
 1433              	.LBE122:
1129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1434              		.loc 1 1129 0
 1435 002e 0368     		ldr	r3, [r0]
 1436 0030 53B1     		cbz	r3, .L149
 1437 0032 0123     		movs	r3, #1
 1438              	.L135:
1129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1439              		.loc 1 1129 0 is_stmt 0 discriminator 6
 1440 0034 73B9     		cbnz	r3, .L136
 1441              	.LBB124:
 1442              	.LBB125:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1443              		.loc 2 195 0 is_stmt 1
 1444              		.syntax unified
 1445              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1446 0036 4FF05003 			mov r3, #80												
 1447 003a 83F31188 		msr basepri, r3											
 1448 003e BFF36F8F 		isb														
 1449 0042 BFF34F8F 		dsb														
 1450              	
 1451              	@ 0 "" 2
 1452              	.LVL152:
 1453              		.thumb
 1454              		.syntax unified
 1455              	.L137:
 1456 0046 FEE7     		b	.L137
 1457              	.L149:
 1458              	.LBE125:
 1459              	.LBE124:
1129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1460              		.loc 1 1129 0 discriminator 2
 1461 0048 8368     		ldr	r3, [r0, #8]
 1462 004a 0BB9     		cbnz	r3, .L141
1129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1463              		.loc 1 1129 0 is_stmt 0
 1464 004c 0123     		movs	r3, #1
 1465 004e F1E7     		b	.L135
 1466              	.L141:
 1467 0050 0023     		movs	r3, #0
 1468 0052 EFE7     		b	.L135
 1469              	.L136:
 1470 0054 0E46     		mov	r6, r1
1145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1471              		.loc 1 1145 0 is_stmt 1
 1472 0056 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1473              	.LVL153:
 1474              	.LBB126:
 1475              	.LBB127:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1476              		.loc 2 211 0
 1477              		.syntax unified
 1478              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1479 005a EFF31185 			mrs r5, basepri											
 1480 005e 4FF05003 		mov r3, #80												
 1481 0062 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccXf4wQt.s 			page 75


 1482 0066 BFF36F8F 		isb														
 1483 006a BFF34F8F 		dsb														
 1484              	
 1485              	@ 0 "" 2
 1486              		.thumb
 1487              		.syntax unified
 1488              	.LBE127:
 1489              	.LBE126:
 1490              	.LBB128:
1149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1491              		.loc 1 1149 0
 1492 006e A26B     		ldr	r2, [r4, #56]
 1493              	.LVL154:
1154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1494              		.loc 1 1154 0
 1495 0070 E36B     		ldr	r3, [r4, #60]
 1496 0072 9A42     		cmp	r2, r3
 1497 0074 1AD2     		bcs	.L142
 1498              	.LBB129:
1156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1499              		.loc 1 1156 0
 1500 0076 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1501 007a 5BB2     		sxtb	r3, r3
 1502              	.LVL155:
1166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1503              		.loc 1 1166 0
 1504 007c 0132     		adds	r2, r2, #1
 1505              	.LVL156:
 1506 007e A263     		str	r2, [r4, #56]
1170:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1507              		.loc 1 1170 0
 1508 0080 B3F1FF3F 		cmp	r3, #-1
 1509 0084 0CD1     		bne	.L139
1225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1510              		.loc 1 1225 0
 1511 0086 636A     		ldr	r3, [r4, #36]
 1512              	.LVL157:
 1513 0088 93B1     		cbz	r3, .L143
1227:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1514              		.loc 1 1227 0
 1515 008a 04F12400 		add	r0, r4, #36
 1516 008e FFF7FEFF 		bl	xTaskRemoveFromEventList
 1517              	.LVL158:
 1518 0092 78B1     		cbz	r0, .L144
1231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 1519              		.loc 1 1231 0
 1520 0094 86B1     		cbz	r6, .L145
1233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 1521              		.loc 1 1233 0
 1522 0096 0120     		movs	r0, #1
 1523 0098 3060     		str	r0, [r6]
 1524              	.L138:
 1525              	.LVL159:
 1526              	.LBE129:
 1527              	.LBE128:
 1528              	.LBB132:
 1529              	.LBB133:
ARM GAS  /tmp/ccXf4wQt.s 			page 76


 1530              		.loc 2 229 0
 1531              		.syntax unified
 1532              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1533 009a 85F31188 			msr basepri, r5	
 1534              	@ 0 "" 2
 1535              	.LVL160:
 1536              		.thumb
 1537              		.syntax unified
 1538              	.LBE133:
 1539              	.LBE132:
1270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1540              		.loc 1 1270 0
 1541 009e 70BD     		pop	{r4, r5, r6, pc}
 1542              	.LVL161:
 1543              	.L139:
 1544              	.LBB134:
 1545              	.LBB130:
1256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1546              		.loc 1 1256 0
 1547 00a0 0133     		adds	r3, r3, #1
 1548              	.LVL162:
 1549 00a2 5BB2     		sxtb	r3, r3
 1550              	.LVL163:
 1551 00a4 84F84530 		strb	r3, [r4, #69]
1259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1552              		.loc 1 1259 0
 1553 00a8 0120     		movs	r0, #1
 1554 00aa F6E7     		b	.L138
 1555              	.LVL164:
 1556              	.L142:
 1557              	.LBE130:
1264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1558              		.loc 1 1264 0
 1559 00ac 0020     		movs	r0, #0
 1560 00ae F4E7     		b	.L138
 1561              	.LVL165:
 1562              	.L143:
 1563              	.LBB131:
1259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1564              		.loc 1 1259 0
 1565 00b0 0120     		movs	r0, #1
 1566 00b2 F2E7     		b	.L138
 1567              	.LVL166:
 1568              	.L144:
 1569 00b4 0120     		movs	r0, #1
 1570 00b6 F0E7     		b	.L138
 1571              	.L145:
 1572 00b8 0120     		movs	r0, #1
 1573 00ba EEE7     		b	.L138
 1574              	.LBE131:
 1575              	.LBE134:
 1576              		.cfi_endproc
 1577              	.LFE12:
 1579              		.section	.text.xQueueReceive,"ax",%progbits
 1580              		.align	1
 1581              		.global	xQueueReceive
 1582              		.syntax unified
ARM GAS  /tmp/ccXf4wQt.s 			page 77


 1583              		.thumb
 1584              		.thumb_func
 1585              		.fpu softvfp
 1587              	xQueueReceive:
 1588              	.LFB13:
1274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1589              		.loc 1 1274 0
 1590              		.cfi_startproc
 1591              		@ args = 0, pretend = 0, frame = 16
 1592              		@ frame_needed = 0, uses_anonymous_args = 0
 1593              	.LVL167:
 1594 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1595              	.LCFI22:
 1596              		.cfi_def_cfa_offset 20
 1597              		.cfi_offset 4, -20
 1598              		.cfi_offset 5, -16
 1599              		.cfi_offset 6, -12
 1600              		.cfi_offset 7, -8
 1601              		.cfi_offset 14, -4
 1602 0002 85B0     		sub	sp, sp, #20
 1603              	.LCFI23:
 1604              		.cfi_def_cfa_offset 40
 1605 0004 0192     		str	r2, [sp, #4]
 1606              	.LVL168:
1280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1607              		.loc 1 1280 0
 1608 0006 60B1     		cbz	r0, .L174
 1609 0008 0446     		mov	r4, r0
1284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1610              		.loc 1 1284 0
 1611 000a 99B1     		cbz	r1, .L175
 1612 000c 0125     		movs	r5, #1
 1613              	.L153:
1284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1614              		.loc 1 1284 0 is_stmt 0 discriminator 6
 1615 000e BDB9     		cbnz	r5, .L154
 1616              	.LBB135:
 1617              	.LBB136:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1618              		.loc 2 195 0 is_stmt 1
 1619              		.syntax unified
 1620              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1621 0010 4FF05003 			mov r3, #80												
 1622 0014 83F31188 		msr basepri, r3											
 1623 0018 BFF36F8F 		isb														
 1624 001c BFF34F8F 		dsb														
 1625              	
 1626              	@ 0 "" 2
 1627              	.LVL169:
 1628              		.thumb
 1629              		.syntax unified
 1630              	.L155:
 1631 0020 FEE7     		b	.L155
 1632              	.L174:
 1633              	.LBE136:
 1634              	.LBE135:
 1635              	.LBB137:
ARM GAS  /tmp/ccXf4wQt.s 			page 78


 1636              	.LBB138:
 1637              		.syntax unified
 1638              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1639 0022 4FF05003 			mov r3, #80												
 1640 0026 83F31188 		msr basepri, r3											
 1641 002a BFF36F8F 		isb														
 1642 002e BFF34F8F 		dsb														
 1643              	
 1644              	@ 0 "" 2
 1645              	.LVL170:
 1646              		.thumb
 1647              		.syntax unified
 1648              	.L152:
 1649 0032 FEE7     		b	.L152
 1650              	.L175:
 1651              	.LBE138:
 1652              	.LBE137:
1284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1653              		.loc 1 1284 0 discriminator 2
 1654 0034 036C     		ldr	r3, [r0, #64]
 1655 0036 0BB9     		cbnz	r3, .L170
1284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1656              		.loc 1 1284 0 is_stmt 0
 1657 0038 0125     		movs	r5, #1
 1658 003a E8E7     		b	.L153
 1659              	.L170:
 1660 003c 0025     		movs	r5, #0
 1661 003e E6E7     		b	.L153
 1662              	.L154:
 1663 0040 0E46     		mov	r6, r1
1289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1664              		.loc 1 1289 0 is_stmt 1
 1665 0042 FFF7FEFF 		bl	xTaskGetSchedulerState
 1666              	.LVL171:
 1667 0046 10B9     		cbnz	r0, .L156
1289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1668              		.loc 1 1289 0 is_stmt 0 discriminator 2
 1669 0048 019B     		ldr	r3, [sp, #4]
 1670 004a 03B1     		cbz	r3, .L156
1289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1671              		.loc 1 1289 0
 1672 004c 0025     		movs	r5, #0
 1673              	.L156:
1289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1674              		.loc 1 1289 0 discriminator 6
 1675 004e 45B9     		cbnz	r5, .L172
 1676              	.LBB139:
 1677              	.LBB140:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1678              		.loc 2 195 0 is_stmt 1
 1679              		.syntax unified
 1680              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1681 0050 4FF05003 			mov r3, #80												
 1682 0054 83F31188 		msr basepri, r3											
 1683 0058 BFF36F8F 		isb														
 1684 005c BFF34F8F 		dsb														
 1685              	
ARM GAS  /tmp/ccXf4wQt.s 			page 79


 1686              	@ 0 "" 2
 1687              	.LVL172:
 1688              		.thumb
 1689              		.syntax unified
 1690              	.L158:
 1691 0060 FEE7     		b	.L158
 1692              	.L172:
 1693              	.LBE140:
 1694              	.LBE139:
 1695 0062 0027     		movs	r7, #0
 1696 0064 2FE0     		b	.L157
 1697              	.LVL173:
 1698              	.L176:
 1699              	.LBB141:
1308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
 1700              		.loc 1 1308 0
 1701 0066 3146     		mov	r1, r6
 1702 0068 2046     		mov	r0, r4
 1703 006a FFF7FEFF 		bl	prvCopyDataFromQueue
 1704              	.LVL174:
1310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1705              		.loc 1 1310 0
 1706 006e 013D     		subs	r5, r5, #1
 1707              	.LVL175:
 1708 0070 A563     		str	r5, [r4, #56]
1315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1709              		.loc 1 1315 0
 1710 0072 2369     		ldr	r3, [r4, #16]
 1711 0074 63B1     		cbz	r3, .L160
1317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1712              		.loc 1 1317 0
 1713 0076 04F11000 		add	r0, r4, #16
 1714 007a FFF7FEFF 		bl	xTaskRemoveFromEventList
 1715              	.LVL176:
 1716 007e 38B1     		cbz	r0, .L160
1319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 1717              		.loc 1 1319 0
 1718 0080 4FF08052 		mov	r2, #268435456
 1719 0084 344B     		ldr	r3, .L181
 1720 0086 1A60     		str	r2, [r3]
 1721              		.syntax unified
 1722              	@ 1319 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1723 0088 BFF34F8F 		dsb
 1724              	@ 0 "" 2
 1725              	@ 1319 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1726 008c BFF36F8F 		isb
 1727              	@ 0 "" 2
 1728              		.thumb
 1729              		.syntax unified
 1730              	.L160:
1331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 1731              		.loc 1 1331 0
 1732 0090 FFF7FEFF 		bl	vPortExitCritical
 1733              	.LVL177:
1332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1734              		.loc 1 1332 0
 1735 0094 0120     		movs	r0, #1
ARM GAS  /tmp/ccXf4wQt.s 			page 80


 1736              	.LVL178:
 1737              	.L150:
 1738              	.LBE141:
1411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1739              		.loc 1 1411 0
 1740 0096 05B0     		add	sp, sp, #20
 1741              	.LCFI24:
 1742              		.cfi_remember_state
 1743              		.cfi_def_cfa_offset 20
 1744              		@ sp needed
 1745 0098 F0BD     		pop	{r4, r5, r6, r7, pc}
 1746              	.LVL179:
 1747              	.L177:
 1748              	.LCFI25:
 1749              		.cfi_restore_state
 1750              	.LBB142:
1340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1751              		.loc 1 1340 0
 1752 009a FFF7FEFF 		bl	vPortExitCritical
 1753              	.LVL180:
1342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1754              		.loc 1 1342 0
 1755 009e 0020     		movs	r0, #0
 1756 00a0 F9E7     		b	.L150
 1757              	.L178:
1348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1758              		.loc 1 1348 0
 1759 00a2 02A8     		add	r0, sp, #8
 1760 00a4 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1761              	.LVL181:
1349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1762              		.loc 1 1349 0
 1763 00a8 0127     		movs	r7, #1
 1764 00aa 16E0     		b	.L163
 1765              	.LVL182:
 1766              	.L179:
 1767              	.LBE142:
1364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1768              		.loc 1 1364 0 discriminator 1
 1769 00ac 0023     		movs	r3, #0
 1770 00ae 84F84430 		strb	r3, [r4, #68]
 1771 00b2 1EE0     		b	.L164
 1772              	.L180:
1364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1773              		.loc 1 1364 0 is_stmt 0 discriminator 4
 1774 00b4 0023     		movs	r3, #0
 1775 00b6 84F84530 		strb	r3, [r4, #69]
 1776 00ba 20E0     		b	.L165
 1777              	.L167:
1389:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 1778              		.loc 1 1389 0 is_stmt 1
 1779 00bc 2046     		mov	r0, r4
 1780 00be FFF7FEFF 		bl	prvUnlockQueue
 1781              	.LVL183:
1390:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1782              		.loc 1 1390 0
 1783 00c2 FFF7FEFF 		bl	xTaskResumeAll
ARM GAS  /tmp/ccXf4wQt.s 			page 81


 1784              	.LVL184:
 1785              	.L157:
1299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1786              		.loc 1 1299 0
 1787 00c6 FFF7FEFF 		bl	vPortEnterCritical
 1788              	.LVL185:
 1789              	.LBB143:
1301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1790              		.loc 1 1301 0
 1791 00ca A56B     		ldr	r5, [r4, #56]
 1792              	.LVL186:
1305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1793              		.loc 1 1305 0
 1794 00cc 002D     		cmp	r5, #0
 1795 00ce CAD1     		bne	.L176
1336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1796              		.loc 1 1336 0
 1797 00d0 019B     		ldr	r3, [sp, #4]
 1798 00d2 002B     		cmp	r3, #0
 1799 00d4 E1D0     		beq	.L177
1344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1800              		.loc 1 1344 0
 1801 00d6 002F     		cmp	r7, #0
 1802 00d8 E3D0     		beq	.L178
 1803              	.LVL187:
 1804              	.L163:
 1805              	.LBE143:
1358:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1806              		.loc 1 1358 0
 1807 00da FFF7FEFF 		bl	vPortExitCritical
 1808              	.LVL188:
1363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 1809              		.loc 1 1363 0
 1810 00de FFF7FEFF 		bl	vTaskSuspendAll
 1811              	.LVL189:
1364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1812              		.loc 1 1364 0
 1813 00e2 FFF7FEFF 		bl	vPortEnterCritical
 1814              	.LVL190:
 1815 00e6 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1816 00ea 5BB2     		sxtb	r3, r3
 1817 00ec B3F1FF3F 		cmp	r3, #-1
 1818 00f0 DCD0     		beq	.L179
 1819              	.L164:
1364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1820              		.loc 1 1364 0 is_stmt 0 discriminator 3
 1821 00f2 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1822 00f6 5BB2     		sxtb	r3, r3
 1823 00f8 B3F1FF3F 		cmp	r3, #-1
 1824 00fc DAD0     		beq	.L180
 1825              	.L165:
1364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1826              		.loc 1 1364 0 discriminator 6
 1827 00fe FFF7FEFF 		bl	vPortExitCritical
 1828              	.LVL191:
1367:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1829              		.loc 1 1367 0 is_stmt 1 discriminator 6
ARM GAS  /tmp/ccXf4wQt.s 			page 82


 1830 0102 01A9     		add	r1, sp, #4
 1831 0104 02A8     		add	r0, sp, #8
 1832 0106 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1833              	.LVL192:
 1834 010a C8B9     		cbnz	r0, .L166
1371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1835              		.loc 1 1371 0
 1836 010c 2046     		mov	r0, r4
 1837 010e FFF7FEFF 		bl	prvIsQueueEmpty
 1838              	.LVL193:
 1839 0112 0028     		cmp	r0, #0
 1840 0114 D2D0     		beq	.L167
1374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1841              		.loc 1 1374 0
 1842 0116 0199     		ldr	r1, [sp, #4]
 1843 0118 04F12400 		add	r0, r4, #36
 1844 011c FFF7FEFF 		bl	vTaskPlaceOnEventList
 1845              	.LVL194:
1375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1846              		.loc 1 1375 0
 1847 0120 2046     		mov	r0, r4
 1848 0122 FFF7FEFF 		bl	prvUnlockQueue
 1849              	.LVL195:
1376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1850              		.loc 1 1376 0
 1851 0126 FFF7FEFF 		bl	xTaskResumeAll
 1852              	.LVL196:
 1853 012a 0028     		cmp	r0, #0
 1854 012c CBD1     		bne	.L157
1378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1855              		.loc 1 1378 0
 1856 012e 4FF08052 		mov	r2, #268435456
 1857 0132 094B     		ldr	r3, .L181
 1858 0134 1A60     		str	r2, [r3]
 1859              		.syntax unified
 1860              	@ 1378 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1861 0136 BFF34F8F 		dsb
 1862              	@ 0 "" 2
 1863              	@ 1378 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1864 013a BFF36F8F 		isb
 1865              	@ 0 "" 2
 1866              		.thumb
 1867              		.syntax unified
 1868 013e C2E7     		b	.L157
 1869              	.L166:
1397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 1870              		.loc 1 1397 0
 1871 0140 2046     		mov	r0, r4
 1872 0142 FFF7FEFF 		bl	prvUnlockQueue
 1873              	.LVL197:
1398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1874              		.loc 1 1398 0
 1875 0146 FFF7FEFF 		bl	xTaskResumeAll
 1876              	.LVL198:
1400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1877              		.loc 1 1400 0
 1878 014a 2046     		mov	r0, r4
ARM GAS  /tmp/ccXf4wQt.s 			page 83


 1879 014c FFF7FEFF 		bl	prvIsQueueEmpty
 1880              	.LVL199:
 1881 0150 0028     		cmp	r0, #0
 1882 0152 B8D0     		beq	.L157
1403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1883              		.loc 1 1403 0
 1884 0154 0020     		movs	r0, #0
 1885 0156 9EE7     		b	.L150
 1886              	.L182:
 1887              		.align	2
 1888              	.L181:
 1889 0158 04ED00E0 		.word	-536810236
 1890              		.cfi_endproc
 1891              	.LFE13:
 1893              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 1894              		.align	1
 1895              		.global	xQueueSemaphoreTake
 1896              		.syntax unified
 1897              		.thumb
 1898              		.thumb_func
 1899              		.fpu softvfp
 1901              	xQueueSemaphoreTake:
 1902              	.LFB14:
1415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1903              		.loc 1 1415 0
 1904              		.cfi_startproc
 1905              		@ args = 0, pretend = 0, frame = 16
 1906              		@ frame_needed = 0, uses_anonymous_args = 0
 1907              	.LVL200:
 1908 0000 70B5     		push	{r4, r5, r6, lr}
 1909              	.LCFI26:
 1910              		.cfi_def_cfa_offset 16
 1911              		.cfi_offset 4, -16
 1912              		.cfi_offset 5, -12
 1913              		.cfi_offset 6, -8
 1914              		.cfi_offset 14, -4
 1915 0002 84B0     		sub	sp, sp, #16
 1916              	.LCFI27:
 1917              		.cfi_def_cfa_offset 32
 1918 0004 0191     		str	r1, [sp, #4]
 1919              	.LVL201:
1425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1920              		.loc 1 1425 0
 1921 0006 58B1     		cbz	r0, .L209
 1922 0008 0446     		mov	r4, r0
1429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1923              		.loc 1 1429 0
 1924 000a 036C     		ldr	r3, [r0, #64]
 1925 000c 8BB1     		cbz	r3, .L186
 1926              	.LBB144:
 1927              	.LBB145:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1928              		.loc 2 195 0
 1929              		.syntax unified
 1930              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1931 000e 4FF05003 			mov r3, #80												
 1932 0012 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccXf4wQt.s 			page 84


 1933 0016 BFF36F8F 		isb														
 1934 001a BFF34F8F 		dsb														
 1935              	
 1936              	@ 0 "" 2
 1937              	.LVL202:
 1938              		.thumb
 1939              		.syntax unified
 1940              	.L187:
 1941 001e FEE7     		b	.L187
 1942              	.L209:
 1943              	.LBE145:
 1944              	.LBE144:
 1945              	.LBB146:
 1946              	.LBB147:
 1947              		.syntax unified
 1948              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1949 0020 4FF05003 			mov r3, #80												
 1950 0024 83F31188 		msr basepri, r3											
 1951 0028 BFF36F8F 		isb														
 1952 002c BFF34F8F 		dsb														
 1953              	
 1954              	@ 0 "" 2
 1955              	.LVL203:
 1956              		.thumb
 1957              		.syntax unified
 1958              	.L185:
 1959 0030 FEE7     		b	.L185
 1960              	.L186:
 1961              	.LBE147:
 1962              	.LBE146:
1434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1963              		.loc 1 1434 0
 1964 0032 FFF7FEFF 		bl	xTaskGetSchedulerState
 1965              	.LVL204:
 1966 0036 60B9     		cbnz	r0, .L205
1434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1967              		.loc 1 1434 0 is_stmt 0 discriminator 2
 1968 0038 019B     		ldr	r3, [sp, #4]
 1969 003a 63B9     		cbnz	r3, .L206
1434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1970              		.loc 1 1434 0
 1971 003c 0123     		movs	r3, #1
 1972              	.L188:
1434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1973              		.loc 1 1434 0 discriminator 6
 1974 003e 63B9     		cbnz	r3, .L207
 1975              	.LBB148:
 1976              	.LBB149:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1977              		.loc 2 195 0 is_stmt 1
 1978              		.syntax unified
 1979              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1980 0040 4FF05003 			mov r3, #80												
 1981 0044 83F31188 		msr basepri, r3											
 1982 0048 BFF36F8F 		isb														
 1983 004c BFF34F8F 		dsb														
 1984              	
ARM GAS  /tmp/ccXf4wQt.s 			page 85


 1985              	@ 0 "" 2
 1986              	.LVL205:
 1987              		.thumb
 1988              		.syntax unified
 1989              	.L190:
 1990 0050 FEE7     		b	.L190
 1991              	.L205:
 1992              	.LBE149:
 1993              	.LBE148:
1434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1994              		.loc 1 1434 0
 1995 0052 0123     		movs	r3, #1
 1996 0054 F3E7     		b	.L188
 1997              	.L206:
 1998 0056 0023     		movs	r3, #0
 1999 0058 F1E7     		b	.L188
 2000              	.L207:
 2001 005a 0025     		movs	r5, #0
 2002 005c 2E46     		mov	r6, r5
 2003 005e 4EE0     		b	.L189
 2004              	.LVL206:
 2005              	.L211:
 2006              	.LBB150:
1458:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2007              		.loc 1 1458 0
 2008 0060 013B     		subs	r3, r3, #1
 2009              	.LVL207:
 2010 0062 A363     		str	r3, [r4, #56]
1462:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2011              		.loc 1 1462 0
 2012 0064 2368     		ldr	r3, [r4]
 2013              	.LVL208:
 2014 0066 13B9     		cbnz	r3, .L192
1466:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2015              		.loc 1 1466 0
 2016 0068 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 2017              	.LVL209:
 2018 006c A060     		str	r0, [r4, #8]
 2019              	.L192:
1477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2020              		.loc 1 1477 0
 2021 006e 2369     		ldr	r3, [r4, #16]
 2022 0070 63B1     		cbz	r3, .L193
1479:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2023              		.loc 1 1479 0
 2024 0072 04F11000 		add	r0, r4, #16
 2025 0076 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2026              	.LVL210:
 2027 007a 38B1     		cbz	r0, .L193
1481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2028              		.loc 1 1481 0
 2029 007c 4FF08052 		mov	r2, #268435456
 2030 0080 474B     		ldr	r3, .L217
 2031 0082 1A60     		str	r2, [r3]
 2032              		.syntax unified
 2033              	@ 1481 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2034 0084 BFF34F8F 		dsb
ARM GAS  /tmp/ccXf4wQt.s 			page 86


 2035              	@ 0 "" 2
 2036              	@ 1481 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2037 0088 BFF36F8F 		isb
 2038              	@ 0 "" 2
 2039              		.thumb
 2040              		.syntax unified
 2041              	.L193:
1493:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 2042              		.loc 1 1493 0
 2043 008c FFF7FEFF 		bl	vPortExitCritical
 2044              	.LVL211:
1494:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2045              		.loc 1 1494 0
 2046 0090 0125     		movs	r5, #1
 2047              	.LVL212:
 2048              	.L183:
 2049              	.LBE150:
1629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2050              		.loc 1 1629 0
 2051 0092 2846     		mov	r0, r5
 2052 0094 04B0     		add	sp, sp, #16
 2053              	.LCFI28:
 2054              		.cfi_remember_state
 2055              		.cfi_def_cfa_offset 16
 2056              		@ sp needed
 2057 0096 70BD     		pop	{r4, r5, r6, pc}
 2058              	.LVL213:
 2059              	.L212:
 2060              	.LCFI29:
 2061              		.cfi_restore_state
 2062              	.LBB153:
1505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2063              		.loc 1 1505 0
 2064 0098 45B1     		cbz	r5, .L196
 2065              	.LBB151:
 2066              	.LBB152:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2067              		.loc 2 195 0
 2068              		.syntax unified
 2069              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2070 009a 4FF05003 			mov r3, #80												
 2071 009e 83F31188 		msr basepri, r3											
 2072 00a2 BFF36F8F 		isb														
 2073 00a6 BFF34F8F 		dsb														
 2074              	
 2075              	@ 0 "" 2
 2076              	.LVL214:
 2077              		.thumb
 2078              		.syntax unified
 2079              	.L197:
 2080 00aa FEE7     		b	.L197
 2081              	.L196:
 2082              	.LBE152:
 2083              	.LBE151:
1511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 2084              		.loc 1 1511 0
 2085 00ac FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /tmp/ccXf4wQt.s 			page 87


 2086              	.LVL215:
1513:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2087              		.loc 1 1513 0
 2088 00b0 EFE7     		b	.L183
 2089              	.L213:
1519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 2090              		.loc 1 1519 0
 2091 00b2 02A8     		add	r0, sp, #8
 2092 00b4 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2093              	.LVL216:
1520:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2094              		.loc 1 1520 0
 2095 00b8 0126     		movs	r6, #1
 2096 00ba 2AE0     		b	.L198
 2097              	.LVL217:
 2098              	.L214:
 2099              	.LBE153:
1535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2100              		.loc 1 1535 0 discriminator 1
 2101 00bc 0023     		movs	r3, #0
 2102 00be 84F84430 		strb	r3, [r4, #68]
 2103 00c2 32E0     		b	.L199
 2104              	.L215:
1535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2105              		.loc 1 1535 0 is_stmt 0 discriminator 4
 2106 00c4 0023     		movs	r3, #0
 2107 00c6 84F84530 		strb	r3, [r4, #69]
 2108 00ca 34E0     		b	.L200
 2109              	.L216:
1552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 2110              		.loc 1 1552 0 is_stmt 1
 2111 00cc FFF7FEFF 		bl	vPortEnterCritical
 2112              	.LVL218:
1554:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 2113              		.loc 1 1554 0
 2114 00d0 A068     		ldr	r0, [r4, #8]
 2115 00d2 FFF7FEFF 		bl	xTaskPriorityInherit
 2116              	.LVL219:
 2117 00d6 0546     		mov	r5, r0
 2118              	.LVL220:
1556:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2119              		.loc 1 1556 0
 2120 00d8 FFF7FEFF 		bl	vPortExitCritical
 2121              	.LVL221:
 2122 00dc 3BE0     		b	.L203
 2123              	.L202:
1580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 2124              		.loc 1 1580 0
 2125 00de 2046     		mov	r0, r4
 2126 00e0 FFF7FEFF 		bl	prvUnlockQueue
 2127              	.LVL222:
1581:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2128              		.loc 1 1581 0
 2129 00e4 FFF7FEFF 		bl	xTaskResumeAll
 2130              	.LVL223:
 2131 00e8 09E0     		b	.L189
 2132              	.L201:
ARM GAS  /tmp/ccXf4wQt.s 			page 88


1587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 2133              		.loc 1 1587 0
 2134 00ea 2046     		mov	r0, r4
 2135 00ec FFF7FEFF 		bl	prvUnlockQueue
 2136              	.LVL224:
1588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2137              		.loc 1 1588 0
 2138 00f0 FFF7FEFF 		bl	xTaskResumeAll
 2139              	.LVL225:
1594:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2140              		.loc 1 1594 0
 2141 00f4 2046     		mov	r0, r4
 2142 00f6 FFF7FEFF 		bl	prvIsQueueEmpty
 2143              	.LVL226:
 2144 00fa 0028     		cmp	r0, #0
 2145 00fc 40D1     		bne	.L210
 2146              	.LVL227:
 2147              	.L189:
1444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2148              		.loc 1 1444 0
 2149 00fe FFF7FEFF 		bl	vPortEnterCritical
 2150              	.LVL228:
 2151              	.LBB154:
1448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2152              		.loc 1 1448 0
 2153 0102 A36B     		ldr	r3, [r4, #56]
 2154              	.LVL229:
1452:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2155              		.loc 1 1452 0
 2156 0104 002B     		cmp	r3, #0
 2157 0106 ABD1     		bne	.L211
1498:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2158              		.loc 1 1498 0
 2159 0108 019B     		ldr	r3, [sp, #4]
 2160              	.LVL230:
 2161 010a 002B     		cmp	r3, #0
 2162 010c C4D0     		beq	.L212
1515:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2163              		.loc 1 1515 0
 2164 010e 002E     		cmp	r6, #0
 2165 0110 CFD0     		beq	.L213
 2166              	.LVL231:
 2167              	.L198:
 2168              	.LBE154:
1529:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2169              		.loc 1 1529 0
 2170 0112 FFF7FEFF 		bl	vPortExitCritical
 2171              	.LVL232:
1534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 2172              		.loc 1 1534 0
 2173 0116 FFF7FEFF 		bl	vTaskSuspendAll
 2174              	.LVL233:
1535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2175              		.loc 1 1535 0
 2176 011a FFF7FEFF 		bl	vPortEnterCritical
 2177              	.LVL234:
 2178 011e 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
ARM GAS  /tmp/ccXf4wQt.s 			page 89


 2179 0122 5BB2     		sxtb	r3, r3
 2180 0124 B3F1FF3F 		cmp	r3, #-1
 2181 0128 C8D0     		beq	.L214
 2182              	.L199:
1535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2183              		.loc 1 1535 0 is_stmt 0 discriminator 3
 2184 012a 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2185 012e 5BB2     		sxtb	r3, r3
 2186 0130 B3F1FF3F 		cmp	r3, #-1
 2187 0134 C6D0     		beq	.L215
 2188              	.L200:
1535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2189              		.loc 1 1535 0 discriminator 6
 2190 0136 FFF7FEFF 		bl	vPortExitCritical
 2191              	.LVL235:
1538:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2192              		.loc 1 1538 0 is_stmt 1 discriminator 6
 2193 013a 01A9     		add	r1, sp, #4
 2194 013c 02A8     		add	r0, sp, #8
 2195 013e FFF7FEFF 		bl	xTaskCheckForTimeOut
 2196              	.LVL236:
 2197 0142 0028     		cmp	r0, #0
 2198 0144 D1D1     		bne	.L201
1544:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2199              		.loc 1 1544 0
 2200 0146 2046     		mov	r0, r4
 2201 0148 FFF7FEFF 		bl	prvIsQueueEmpty
 2202              	.LVL237:
 2203 014c 0028     		cmp	r0, #0
 2204 014e C6D0     		beq	.L202
1550:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2205              		.loc 1 1550 0
 2206 0150 2368     		ldr	r3, [r4]
 2207 0152 002B     		cmp	r3, #0
 2208 0154 BAD0     		beq	.L216
 2209              	.L203:
1565:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 2210              		.loc 1 1565 0
 2211 0156 0199     		ldr	r1, [sp, #4]
 2212 0158 04F12400 		add	r0, r4, #36
 2213 015c FFF7FEFF 		bl	vTaskPlaceOnEventList
 2214              	.LVL238:
1566:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2215              		.loc 1 1566 0
 2216 0160 2046     		mov	r0, r4
 2217 0162 FFF7FEFF 		bl	prvUnlockQueue
 2218              	.LVL239:
1567:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2219              		.loc 1 1567 0
 2220 0166 FFF7FEFF 		bl	xTaskResumeAll
 2221              	.LVL240:
 2222 016a 0028     		cmp	r0, #0
 2223 016c C7D1     		bne	.L189
1569:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2224              		.loc 1 1569 0
 2225 016e 4FF08052 		mov	r2, #268435456
 2226 0172 0B4B     		ldr	r3, .L217
ARM GAS  /tmp/ccXf4wQt.s 			page 90


 2227 0174 1A60     		str	r2, [r3]
 2228              		.syntax unified
 2229              	@ 1569 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2230 0176 BFF34F8F 		dsb
 2231              	@ 0 "" 2
 2232              	@ 1569 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2233 017a BFF36F8F 		isb
 2234              	@ 0 "" 2
 2235              		.thumb
 2236              		.syntax unified
 2237 017e BEE7     		b	.L189
 2238              	.L210:
1601:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2239              		.loc 1 1601 0
 2240 0180 002D     		cmp	r5, #0
 2241 0182 86D0     		beq	.L183
1603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 2242              		.loc 1 1603 0
 2243 0184 FFF7FEFF 		bl	vPortEnterCritical
 2244              	.LVL241:
 2245              	.LBB155:
1612:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPri
 2246              		.loc 1 1612 0
 2247 0188 2046     		mov	r0, r4
 2248 018a FFF7FEFF 		bl	prvGetDisinheritPriorityAfterTimeout
 2249              	.LVL242:
1613:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 2250              		.loc 1 1613 0
 2251 018e 0146     		mov	r1, r0
 2252 0190 A068     		ldr	r0, [r4, #8]
 2253              	.LVL243:
 2254 0192 FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout
 2255              	.LVL244:
 2256              	.LBE155:
1615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2257              		.loc 1 1615 0
 2258 0196 FFF7FEFF 		bl	vPortExitCritical
 2259              	.LVL245:
1621:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2260              		.loc 1 1621 0
 2261 019a 0025     		movs	r5, #0
 2262              	.LVL246:
 2263 019c 79E7     		b	.L183
 2264              	.L218:
 2265 019e 00BF     		.align	2
 2266              	.L217:
 2267 01a0 04ED00E0 		.word	-536810236
 2268              		.cfi_endproc
 2269              	.LFE14:
 2271              		.section	.text.xQueuePeek,"ax",%progbits
 2272              		.align	1
 2273              		.global	xQueuePeek
 2274              		.syntax unified
 2275              		.thumb
 2276              		.thumb_func
 2277              		.fpu softvfp
 2279              	xQueuePeek:
ARM GAS  /tmp/ccXf4wQt.s 			page 91


 2280              	.LFB15:
1633:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2281              		.loc 1 1633 0
 2282              		.cfi_startproc
 2283              		@ args = 0, pretend = 0, frame = 16
 2284              		@ frame_needed = 0, uses_anonymous_args = 0
 2285              	.LVL247:
 2286 0000 70B5     		push	{r4, r5, r6, lr}
 2287              	.LCFI30:
 2288              		.cfi_def_cfa_offset 16
 2289              		.cfi_offset 4, -16
 2290              		.cfi_offset 5, -12
 2291              		.cfi_offset 6, -8
 2292              		.cfi_offset 14, -4
 2293 0002 84B0     		sub	sp, sp, #16
 2294              	.LCFI31:
 2295              		.cfi_def_cfa_offset 32
 2296 0004 0192     		str	r2, [sp, #4]
 2297              	.LVL248:
1640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2298              		.loc 1 1640 0
 2299 0006 60B1     		cbz	r0, .L243
 2300 0008 0446     		mov	r4, r0
1644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2301              		.loc 1 1644 0
 2302 000a 99B1     		cbz	r1, .L244
 2303 000c 0125     		movs	r5, #1
 2304              	.L222:
1644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2305              		.loc 1 1644 0 is_stmt 0 discriminator 6
 2306 000e BDB9     		cbnz	r5, .L223
 2307              	.LBB156:
 2308              	.LBB157:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2309              		.loc 2 195 0 is_stmt 1
 2310              		.syntax unified
 2311              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2312 0010 4FF05003 			mov r3, #80												
 2313 0014 83F31188 		msr basepri, r3											
 2314 0018 BFF36F8F 		isb														
 2315 001c BFF34F8F 		dsb														
 2316              	
 2317              	@ 0 "" 2
 2318              	.LVL249:
 2319              		.thumb
 2320              		.syntax unified
 2321              	.L224:
 2322 0020 FEE7     		b	.L224
 2323              	.L243:
 2324              	.LBE157:
 2325              	.LBE156:
 2326              	.LBB158:
 2327              	.LBB159:
 2328              		.syntax unified
 2329              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2330 0022 4FF05003 			mov r3, #80												
 2331 0026 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccXf4wQt.s 			page 92


 2332 002a BFF36F8F 		isb														
 2333 002e BFF34F8F 		dsb														
 2334              	
 2335              	@ 0 "" 2
 2336              	.LVL250:
 2337              		.thumb
 2338              		.syntax unified
 2339              	.L221:
 2340 0032 FEE7     		b	.L221
 2341              	.L244:
 2342              	.LBE159:
 2343              	.LBE158:
1644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2344              		.loc 1 1644 0 discriminator 2
 2345 0034 036C     		ldr	r3, [r0, #64]
 2346 0036 0BB9     		cbnz	r3, .L239
1644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2347              		.loc 1 1644 0 is_stmt 0
 2348 0038 0125     		movs	r5, #1
 2349 003a E8E7     		b	.L222
 2350              	.L239:
 2351 003c 0025     		movs	r5, #0
 2352 003e E6E7     		b	.L222
 2353              	.L223:
 2354 0040 0E46     		mov	r6, r1
1649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2355              		.loc 1 1649 0 is_stmt 1
 2356 0042 FFF7FEFF 		bl	xTaskGetSchedulerState
 2357              	.LVL251:
 2358 0046 10B9     		cbnz	r0, .L225
1649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2359              		.loc 1 1649 0 is_stmt 0 discriminator 2
 2360 0048 019B     		ldr	r3, [sp, #4]
 2361 004a 03B1     		cbz	r3, .L225
1649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2362              		.loc 1 1649 0
 2363 004c 0025     		movs	r5, #0
 2364              	.L225:
1649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2365              		.loc 1 1649 0 discriminator 6
 2366 004e 45B9     		cbnz	r5, .L241
 2367              	.LBB160:
 2368              	.LBB161:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2369              		.loc 2 195 0 is_stmt 1
 2370              		.syntax unified
 2371              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2372 0050 4FF05003 			mov r3, #80												
 2373 0054 83F31188 		msr basepri, r3											
 2374 0058 BFF36F8F 		isb														
 2375 005c BFF34F8F 		dsb														
 2376              	
 2377              	@ 0 "" 2
 2378              	.LVL252:
 2379              		.thumb
 2380              		.syntax unified
 2381              	.L227:
ARM GAS  /tmp/ccXf4wQt.s 			page 93


 2382 0060 FEE7     		b	.L227
 2383              	.L241:
 2384              	.LBE161:
 2385              	.LBE160:
 2386 0062 0025     		movs	r5, #0
 2387 0064 2FE0     		b	.L226
 2388              	.LVL253:
 2389              	.L245:
 2390              	.LBB162:
1670:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2391              		.loc 1 1670 0
 2392 0066 E568     		ldr	r5, [r4, #12]
 2393              	.LVL254:
1672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_PEEK( pxQueue );
 2394              		.loc 1 1672 0
 2395 0068 3146     		mov	r1, r6
 2396 006a 2046     		mov	r0, r4
 2397 006c FFF7FEFF 		bl	prvCopyDataFromQueue
 2398              	.LVL255:
1676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2399              		.loc 1 1676 0
 2400 0070 E560     		str	r5, [r4, #12]
1680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2401              		.loc 1 1680 0
 2402 0072 636A     		ldr	r3, [r4, #36]
 2403 0074 63B1     		cbz	r3, .L229
1682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2404              		.loc 1 1682 0
 2405 0076 04F12400 		add	r0, r4, #36
 2406 007a FFF7FEFF 		bl	xTaskRemoveFromEventList
 2407              	.LVL256:
 2408 007e 38B1     		cbz	r0, .L229
1685:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2409              		.loc 1 1685 0
 2410 0080 4FF08052 		mov	r2, #268435456
 2411 0084 344B     		ldr	r3, .L250
 2412 0086 1A60     		str	r2, [r3]
 2413              		.syntax unified
 2414              	@ 1685 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2415 0088 BFF34F8F 		dsb
 2416              	@ 0 "" 2
 2417              	@ 1685 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2418 008c BFF36F8F 		isb
 2419              	@ 0 "" 2
 2420              		.thumb
 2421              		.syntax unified
 2422              	.L229:
1697:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 2423              		.loc 1 1697 0
 2424 0090 FFF7FEFF 		bl	vPortExitCritical
 2425              	.LVL257:
1698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2426              		.loc 1 1698 0
 2427 0094 0120     		movs	r0, #1
 2428              	.LVL258:
 2429              	.L219:
 2430              	.LBE162:
ARM GAS  /tmp/ccXf4wQt.s 			page 94


1778:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2431              		.loc 1 1778 0
 2432 0096 04B0     		add	sp, sp, #16
 2433              	.LCFI32:
 2434              		.cfi_remember_state
 2435              		.cfi_def_cfa_offset 16
 2436              		@ sp needed
 2437 0098 70BD     		pop	{r4, r5, r6, pc}
 2438              	.LVL259:
 2439              	.L246:
 2440              	.LCFI33:
 2441              		.cfi_restore_state
 2442              	.LBB163:
1706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
 2443              		.loc 1 1706 0
 2444 009a FFF7FEFF 		bl	vPortExitCritical
 2445              	.LVL260:
1708:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2446              		.loc 1 1708 0
 2447 009e 0020     		movs	r0, #0
 2448 00a0 F9E7     		b	.L219
 2449              	.L247:
1715:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 2450              		.loc 1 1715 0
 2451 00a2 02A8     		add	r0, sp, #8
 2452 00a4 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2453              	.LVL261:
1716:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2454              		.loc 1 1716 0
 2455 00a8 0125     		movs	r5, #1
 2456 00aa 16E0     		b	.L232
 2457              	.LVL262:
 2458              	.L248:
 2459              	.LBE163:
1731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2460              		.loc 1 1731 0 discriminator 1
 2461 00ac 0023     		movs	r3, #0
 2462 00ae 84F84430 		strb	r3, [r4, #68]
 2463 00b2 1EE0     		b	.L233
 2464              	.L249:
1731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2465              		.loc 1 1731 0 is_stmt 0 discriminator 4
 2466 00b4 0023     		movs	r3, #0
 2467 00b6 84F84530 		strb	r3, [r4, #69]
 2468 00ba 20E0     		b	.L234
 2469              	.L236:
1756:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 2470              		.loc 1 1756 0 is_stmt 1
 2471 00bc 2046     		mov	r0, r4
 2472 00be FFF7FEFF 		bl	prvUnlockQueue
 2473              	.LVL263:
1757:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2474              		.loc 1 1757 0
 2475 00c2 FFF7FEFF 		bl	xTaskResumeAll
 2476              	.LVL264:
 2477              	.L226:
1659:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
ARM GAS  /tmp/ccXf4wQt.s 			page 95


 2478              		.loc 1 1659 0
 2479 00c6 FFF7FEFF 		bl	vPortEnterCritical
 2480              	.LVL265:
 2481              	.LBB164:
1661:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2482              		.loc 1 1661 0
 2483 00ca A36B     		ldr	r3, [r4, #56]
 2484              	.LVL266:
1665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2485              		.loc 1 1665 0
 2486 00cc 002B     		cmp	r3, #0
 2487 00ce CAD1     		bne	.L245
1702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2488              		.loc 1 1702 0
 2489 00d0 019B     		ldr	r3, [sp, #4]
 2490              	.LVL267:
 2491 00d2 002B     		cmp	r3, #0
 2492 00d4 E1D0     		beq	.L246
1710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2493              		.loc 1 1710 0
 2494 00d6 002D     		cmp	r5, #0
 2495 00d8 E3D0     		beq	.L247
 2496              	.LVL268:
 2497              	.L232:
 2498              	.LBE164:
1725:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2499              		.loc 1 1725 0
 2500 00da FFF7FEFF 		bl	vPortExitCritical
 2501              	.LVL269:
1730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 2502              		.loc 1 1730 0
 2503 00de FFF7FEFF 		bl	vTaskSuspendAll
 2504              	.LVL270:
1731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2505              		.loc 1 1731 0
 2506 00e2 FFF7FEFF 		bl	vPortEnterCritical
 2507              	.LVL271:
 2508 00e6 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2509 00ea 5BB2     		sxtb	r3, r3
 2510 00ec B3F1FF3F 		cmp	r3, #-1
 2511 00f0 DCD0     		beq	.L248
 2512              	.L233:
1731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2513              		.loc 1 1731 0 is_stmt 0 discriminator 3
 2514 00f2 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2515 00f6 5BB2     		sxtb	r3, r3
 2516 00f8 B3F1FF3F 		cmp	r3, #-1
 2517 00fc DAD0     		beq	.L249
 2518              	.L234:
1731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2519              		.loc 1 1731 0 discriminator 6
 2520 00fe FFF7FEFF 		bl	vPortExitCritical
 2521              	.LVL272:
1734:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2522              		.loc 1 1734 0 is_stmt 1 discriminator 6
 2523 0102 01A9     		add	r1, sp, #4
 2524 0104 02A8     		add	r0, sp, #8
ARM GAS  /tmp/ccXf4wQt.s 			page 96


 2525 0106 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2526              	.LVL273:
 2527 010a C8B9     		cbnz	r0, .L235
1738:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2528              		.loc 1 1738 0
 2529 010c 2046     		mov	r0, r4
 2530 010e FFF7FEFF 		bl	prvIsQueueEmpty
 2531              	.LVL274:
 2532 0112 0028     		cmp	r0, #0
 2533 0114 D2D0     		beq	.L236
1741:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 2534              		.loc 1 1741 0
 2535 0116 0199     		ldr	r1, [sp, #4]
 2536 0118 04F12400 		add	r0, r4, #36
 2537 011c FFF7FEFF 		bl	vTaskPlaceOnEventList
 2538              	.LVL275:
1742:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2539              		.loc 1 1742 0
 2540 0120 2046     		mov	r0, r4
 2541 0122 FFF7FEFF 		bl	prvUnlockQueue
 2542              	.LVL276:
1743:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2543              		.loc 1 1743 0
 2544 0126 FFF7FEFF 		bl	xTaskResumeAll
 2545              	.LVL277:
 2546 012a 0028     		cmp	r0, #0
 2547 012c CBD1     		bne	.L226
1745:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2548              		.loc 1 1745 0
 2549 012e 4FF08052 		mov	r2, #268435456
 2550 0132 094B     		ldr	r3, .L250
 2551 0134 1A60     		str	r2, [r3]
 2552              		.syntax unified
 2553              	@ 1745 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2554 0136 BFF34F8F 		dsb
 2555              	@ 0 "" 2
 2556              	@ 1745 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2557 013a BFF36F8F 		isb
 2558              	@ 0 "" 2
 2559              		.thumb
 2560              		.syntax unified
 2561 013e C2E7     		b	.L226
 2562              	.L235:
1764:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 2563              		.loc 1 1764 0
 2564 0140 2046     		mov	r0, r4
 2565 0142 FFF7FEFF 		bl	prvUnlockQueue
 2566              	.LVL278:
1765:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2567              		.loc 1 1765 0
 2568 0146 FFF7FEFF 		bl	xTaskResumeAll
 2569              	.LVL279:
1767:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2570              		.loc 1 1767 0
 2571 014a 2046     		mov	r0, r4
 2572 014c FFF7FEFF 		bl	prvIsQueueEmpty
 2573              	.LVL280:
ARM GAS  /tmp/ccXf4wQt.s 			page 97


 2574 0150 0028     		cmp	r0, #0
 2575 0152 B8D0     		beq	.L226
1770:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2576              		.loc 1 1770 0
 2577 0154 0020     		movs	r0, #0
 2578 0156 9EE7     		b	.L219
 2579              	.L251:
 2580              		.align	2
 2581              	.L250:
 2582 0158 04ED00E0 		.word	-536810236
 2583              		.cfi_endproc
 2584              	.LFE15:
 2586              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 2587              		.align	1
 2588              		.global	xQueueReceiveFromISR
 2589              		.syntax unified
 2590              		.thumb
 2591              		.thumb_func
 2592              		.fpu softvfp
 2594              	xQueueReceiveFromISR:
 2595              	.LFB16:
1782:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 2596              		.loc 1 1782 0
 2597              		.cfi_startproc
 2598              		@ args = 0, pretend = 0, frame = 0
 2599              		@ frame_needed = 0, uses_anonymous_args = 0
 2600              	.LVL281:
 2601 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2602              	.LCFI34:
 2603              		.cfi_def_cfa_offset 32
 2604              		.cfi_offset 3, -32
 2605              		.cfi_offset 4, -28
 2606              		.cfi_offset 5, -24
 2607              		.cfi_offset 6, -20
 2608              		.cfi_offset 7, -16
 2609              		.cfi_offset 8, -12
 2610              		.cfi_offset 9, -8
 2611              		.cfi_offset 14, -4
 2612              	.LVL282:
1787:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2613              		.loc 1 1787 0
 2614 0004 60B1     		cbz	r0, .L267
 2615 0006 0446     		mov	r4, r0
1788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2616              		.loc 1 1788 0
 2617 0008 99B1     		cbz	r1, .L268
 2618 000a 0123     		movs	r3, #1
 2619              	.L255:
1788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2620              		.loc 1 1788 0 is_stmt 0 discriminator 6
 2621 000c BBB9     		cbnz	r3, .L256
 2622              	.LBB165:
 2623              	.LBB166:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2624              		.loc 2 195 0 is_stmt 1
 2625              		.syntax unified
 2626              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
ARM GAS  /tmp/ccXf4wQt.s 			page 98


 2627 000e 4FF05003 			mov r3, #80												
 2628 0012 83F31188 		msr basepri, r3											
 2629 0016 BFF36F8F 		isb														
 2630 001a BFF34F8F 		dsb														
 2631              	
 2632              	@ 0 "" 2
 2633              	.LVL283:
 2634              		.thumb
 2635              		.syntax unified
 2636              	.L257:
 2637 001e FEE7     		b	.L257
 2638              	.L267:
 2639              	.LBE166:
 2640              	.LBE165:
 2641              	.LBB167:
 2642              	.LBB168:
 2643              		.syntax unified
 2644              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2645 0020 4FF05003 			mov r3, #80												
 2646 0024 83F31188 		msr basepri, r3											
 2647 0028 BFF36F8F 		isb														
 2648 002c BFF34F8F 		dsb														
 2649              	
 2650              	@ 0 "" 2
 2651              	.LVL284:
 2652              		.thumb
 2653              		.syntax unified
 2654              	.L254:
 2655 0030 FEE7     		b	.L254
 2656              	.L268:
 2657              	.LBE168:
 2658              	.LBE167:
1788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2659              		.loc 1 1788 0 discriminator 2
 2660 0032 036C     		ldr	r3, [r0, #64]
 2661 0034 0BB9     		cbnz	r3, .L261
1788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2662              		.loc 1 1788 0 is_stmt 0
 2663 0036 0123     		movs	r3, #1
 2664 0038 E8E7     		b	.L255
 2665              	.L261:
 2666 003a 0023     		movs	r3, #0
 2667 003c E6E7     		b	.L255
 2668              	.L256:
 2669 003e 1746     		mov	r7, r2
 2670 0040 8946     		mov	r9, r1
1804:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2671              		.loc 1 1804 0 is_stmt 1
 2672 0042 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2673              	.LVL285:
 2674              	.LBB169:
 2675              	.LBB170:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2676              		.loc 2 211 0
 2677              		.syntax unified
 2678              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2679 0046 EFF31186 			mrs r6, basepri											
ARM GAS  /tmp/ccXf4wQt.s 			page 99


 2680 004a 4FF05003 		mov r3, #80												
 2681 004e 83F31188 		msr basepri, r3											
 2682 0052 BFF36F8F 		isb														
 2683 0056 BFF34F8F 		dsb														
 2684              	
 2685              	@ 0 "" 2
 2686              		.thumb
 2687              		.syntax unified
 2688              	.LBE170:
 2689              	.LBE169:
 2690              	.LBB171:
1808:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2691              		.loc 1 1808 0
 2692 005a D4F83880 		ldr	r8, [r4, #56]
 2693              	.LVL286:
1811:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2694              		.loc 1 1811 0
 2695 005e B8F1000F 		cmp	r8, #0
 2696 0062 20D0     		beq	.L262
 2697              	.LBB172:
1813:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2698              		.loc 1 1813 0
 2699 0064 94F84450 		ldrb	r5, [r4, #68]	@ zero_extendqisi2
 2700 0068 6DB2     		sxtb	r5, r5
 2701              	.LVL287:
1817:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2702              		.loc 1 1817 0
 2703 006a 4946     		mov	r1, r9
 2704 006c 2046     		mov	r0, r4
 2705 006e FFF7FEFF 		bl	prvCopyDataFromQueue
 2706              	.LVL288:
1818:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2707              		.loc 1 1818 0
 2708 0072 08F1FF33 		add	r3, r8, #-1
 2709 0076 A363     		str	r3, [r4, #56]
1824:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2710              		.loc 1 1824 0
 2711 0078 B5F1FF3F 		cmp	r5, #-1
 2712 007c 0DD1     		bne	.L259
1826:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2713              		.loc 1 1826 0
 2714 007e 2369     		ldr	r3, [r4, #16]
 2715 0080 9BB1     		cbz	r3, .L263
1828:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2716              		.loc 1 1828 0
 2717 0082 04F11000 		add	r0, r4, #16
 2718 0086 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2719              	.LVL289:
 2720 008a 80B1     		cbz	r0, .L264
1832:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 2721              		.loc 1 1832 0
 2722 008c 8FB1     		cbz	r7, .L265
1834:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 2723              		.loc 1 1834 0
 2724 008e 0120     		movs	r0, #1
 2725 0090 3860     		str	r0, [r7]
 2726              	.LVL290:
ARM GAS  /tmp/ccXf4wQt.s 			page 100


 2727              	.L258:
 2728              	.LBE172:
 2729              	.LBE171:
 2730              	.LBB175:
 2731              	.LBB176:
 2732              		.loc 2 229 0
 2733              		.syntax unified
 2734              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2735 0092 86F31188 			msr basepri, r6	
 2736              	@ 0 "" 2
 2737              	.LVL291:
 2738              		.thumb
 2739              		.syntax unified
 2740              	.LBE176:
 2741              	.LBE175:
1869:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2742              		.loc 1 1869 0
 2743 0096 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2744              	.LVL292:
 2745              	.L259:
 2746              	.LBB177:
 2747              	.LBB173:
1855:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2748              		.loc 1 1855 0
 2749 009a 6B1C     		adds	r3, r5, #1
 2750 009c 5BB2     		sxtb	r3, r3
 2751 009e 84F84430 		strb	r3, [r4, #68]
1858:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 2752              		.loc 1 1858 0
 2753 00a2 0120     		movs	r0, #1
 2754 00a4 F5E7     		b	.L258
 2755              	.LVL293:
 2756              	.L262:
 2757              	.LBE173:
1862:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2758              		.loc 1 1862 0
 2759 00a6 0020     		movs	r0, #0
 2760 00a8 F3E7     		b	.L258
 2761              	.LVL294:
 2762              	.L263:
 2763              	.LBB174:
1858:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 2764              		.loc 1 1858 0
 2765 00aa 0120     		movs	r0, #1
 2766 00ac F1E7     		b	.L258
 2767              	.L264:
 2768 00ae 0120     		movs	r0, #1
 2769 00b0 EFE7     		b	.L258
 2770              	.L265:
 2771 00b2 0120     		movs	r0, #1
 2772 00b4 EDE7     		b	.L258
 2773              	.LBE174:
 2774              	.LBE177:
 2775              		.cfi_endproc
 2776              	.LFE16:
 2778              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2779              		.align	1
ARM GAS  /tmp/ccXf4wQt.s 			page 101


 2780              		.global	xQueuePeekFromISR
 2781              		.syntax unified
 2782              		.thumb
 2783              		.thumb_func
 2784              		.fpu softvfp
 2786              	xQueuePeekFromISR:
 2787              	.LFB17:
1873:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 2788              		.loc 1 1873 0
 2789              		.cfi_startproc
 2790              		@ args = 0, pretend = 0, frame = 0
 2791              		@ frame_needed = 0, uses_anonymous_args = 0
 2792              	.LVL295:
 2793 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2794              	.LCFI35:
 2795              		.cfi_def_cfa_offset 24
 2796              		.cfi_offset 3, -24
 2797              		.cfi_offset 4, -20
 2798              		.cfi_offset 5, -16
 2799              		.cfi_offset 6, -12
 2800              		.cfi_offset 7, -8
 2801              		.cfi_offset 14, -4
 2802              	.LVL296:
1879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2803              		.loc 1 1879 0
 2804 0002 60B1     		cbz	r0, .L282
 2805 0004 0446     		mov	r4, r0
1880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2806              		.loc 1 1880 0
 2807 0006 99B1     		cbz	r1, .L283
 2808 0008 0123     		movs	r3, #1
 2809              	.L272:
1880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2810              		.loc 1 1880 0 is_stmt 0 discriminator 6
 2811 000a BBB9     		cbnz	r3, .L273
 2812              	.LBB178:
 2813              	.LBB179:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2814              		.loc 2 195 0 is_stmt 1
 2815              		.syntax unified
 2816              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2817 000c 4FF05003 			mov r3, #80												
 2818 0010 83F31188 		msr basepri, r3											
 2819 0014 BFF36F8F 		isb														
 2820 0018 BFF34F8F 		dsb														
 2821              	
 2822              	@ 0 "" 2
 2823              	.LVL297:
 2824              		.thumb
 2825              		.syntax unified
 2826              	.L274:
 2827 001c FEE7     		b	.L274
 2828              	.L282:
 2829              	.LBE179:
 2830              	.LBE178:
 2831              	.LBB180:
 2832              	.LBB181:
ARM GAS  /tmp/ccXf4wQt.s 			page 102


 2833              		.syntax unified
 2834              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2835 001e 4FF05003 			mov r3, #80												
 2836 0022 83F31188 		msr basepri, r3											
 2837 0026 BFF36F8F 		isb														
 2838 002a BFF34F8F 		dsb														
 2839              	
 2840              	@ 0 "" 2
 2841              	.LVL298:
 2842              		.thumb
 2843              		.syntax unified
 2844              	.L271:
 2845 002e FEE7     		b	.L271
 2846              	.L283:
 2847              	.LBE181:
 2848              	.LBE180:
1880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2849              		.loc 1 1880 0 discriminator 2
 2850 0030 036C     		ldr	r3, [r0, #64]
 2851 0032 0BB9     		cbnz	r3, .L279
1880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2852              		.loc 1 1880 0 is_stmt 0
 2853 0034 0123     		movs	r3, #1
 2854 0036 E8E7     		b	.L272
 2855              	.L279:
 2856 0038 0023     		movs	r3, #0
 2857 003a E6E7     		b	.L272
 2858              	.L273:
1881:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2859              		.loc 1 1881 0 is_stmt 1
 2860 003c 236C     		ldr	r3, [r4, #64]
 2861 003e 43B9     		cbnz	r3, .L275
 2862              	.LBB182:
 2863              	.LBB183:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2864              		.loc 2 195 0
 2865              		.syntax unified
 2866              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2867 0040 4FF05003 			mov r3, #80												
 2868 0044 83F31188 		msr basepri, r3											
 2869 0048 BFF36F8F 		isb														
 2870 004c BFF34F8F 		dsb														
 2871              	
 2872              	@ 0 "" 2
 2873              	.LVL299:
 2874              		.thumb
 2875              		.syntax unified
 2876              	.L276:
 2877 0050 FEE7     		b	.L276
 2878              	.L275:
 2879 0052 0D46     		mov	r5, r1
 2880              	.LBE183:
 2881              	.LBE182:
1897:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2882              		.loc 1 1897 0
 2883 0054 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2884              	.LVL300:
ARM GAS  /tmp/ccXf4wQt.s 			page 103


 2885              	.LBB184:
 2886              	.LBB185:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2887              		.loc 2 211 0
 2888              		.syntax unified
 2889              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2890 0058 EFF31186 			mrs r6, basepri											
 2891 005c 4FF05003 		mov r3, #80												
 2892 0060 83F31188 		msr basepri, r3											
 2893 0064 BFF36F8F 		isb														
 2894 0068 BFF34F8F 		dsb														
 2895              	
 2896              	@ 0 "" 2
 2897              		.thumb
 2898              		.syntax unified
 2899              	.LBE185:
 2900              	.LBE184:
1902:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2901              		.loc 1 1902 0
 2902 006c A36B     		ldr	r3, [r4, #56]
 2903 006e 4BB1     		cbz	r3, .L280
1908:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2904              		.loc 1 1908 0
 2905 0070 E768     		ldr	r7, [r4, #12]
 2906              	.LVL301:
1909:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 2907              		.loc 1 1909 0
 2908 0072 2946     		mov	r1, r5
 2909 0074 2046     		mov	r0, r4
 2910 0076 FFF7FEFF 		bl	prvCopyDataFromQueue
 2911              	.LVL302:
1910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2912              		.loc 1 1910 0
 2913 007a E760     		str	r7, [r4, #12]
 2914              	.LVL303:
1912:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 2915              		.loc 1 1912 0
 2916 007c 0120     		movs	r0, #1
 2917              	.LVL304:
 2918              	.L277:
 2919              	.LBB186:
 2920              	.LBB187:
 2921              		.loc 2 229 0
 2922              		.syntax unified
 2923              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2924 007e 86F31188 			msr basepri, r6	
 2925              	@ 0 "" 2
 2926              	.LVL305:
 2927              		.thumb
 2928              		.syntax unified
 2929              	.LBE187:
 2930              	.LBE186:
1923:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2931              		.loc 1 1923 0
 2932 0082 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2933              	.LVL306:
 2934              	.L280:
ARM GAS  /tmp/ccXf4wQt.s 			page 104


1916:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2935              		.loc 1 1916 0
 2936 0084 0020     		movs	r0, #0
 2937 0086 FAE7     		b	.L277
 2938              		.cfi_endproc
 2939              	.LFE17:
 2941              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2942              		.align	1
 2943              		.global	uxQueueMessagesWaiting
 2944              		.syntax unified
 2945              		.thumb
 2946              		.thumb_func
 2947              		.fpu softvfp
 2949              	uxQueueMessagesWaiting:
 2950              	.LFB18:
1927:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 2951              		.loc 1 1927 0
 2952              		.cfi_startproc
 2953              		@ args = 0, pretend = 0, frame = 0
 2954              		@ frame_needed = 0, uses_anonymous_args = 0
 2955              	.LVL307:
1930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2956              		.loc 1 1930 0
 2957 0000 40B9     		cbnz	r0, .L285
 2958              	.LBB188:
 2959              	.LBB189:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2960              		.loc 2 195 0
 2961              		.syntax unified
 2962              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2963 0002 4FF05003 			mov r3, #80												
 2964 0006 83F31188 		msr basepri, r3											
 2965 000a BFF36F8F 		isb														
 2966 000e BFF34F8F 		dsb														
 2967              	
 2968              	@ 0 "" 2
 2969              	.LVL308:
 2970              		.thumb
 2971              		.syntax unified
 2972              	.L286:
 2973 0012 FEE7     		b	.L286
 2974              	.L285:
 2975              	.LBE189:
 2976              	.LBE188:
1927:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 2977              		.loc 1 1927 0
 2978 0014 10B5     		push	{r4, lr}
 2979              	.LCFI36:
 2980              		.cfi_def_cfa_offset 8
 2981              		.cfi_offset 4, -8
 2982              		.cfi_offset 14, -4
 2983 0016 0446     		mov	r4, r0
1932:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 2984              		.loc 1 1932 0
 2985 0018 FFF7FEFF 		bl	vPortEnterCritical
 2986              	.LVL309:
1934:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
ARM GAS  /tmp/ccXf4wQt.s 			page 105


 2987              		.loc 1 1934 0
 2988 001c A46B     		ldr	r4, [r4, #56]
 2989              	.LVL310:
1936:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2990              		.loc 1 1936 0
 2991 001e FFF7FEFF 		bl	vPortExitCritical
 2992              	.LVL311:
1939:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2993              		.loc 1 1939 0
 2994 0022 2046     		mov	r0, r4
 2995 0024 10BD     		pop	{r4, pc}
 2996              		.cfi_endproc
 2997              	.LFE18:
 2999              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 3000              		.align	1
 3001              		.global	uxQueueSpacesAvailable
 3002              		.syntax unified
 3003              		.thumb
 3004              		.thumb_func
 3005              		.fpu softvfp
 3007              	uxQueueSpacesAvailable:
 3008              	.LFB19:
1943:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 3009              		.loc 1 1943 0
 3010              		.cfi_startproc
 3011              		@ args = 0, pretend = 0, frame = 0
 3012              		@ frame_needed = 0, uses_anonymous_args = 0
 3013              	.LVL312:
1947:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3014              		.loc 1 1947 0
 3015 0000 40B9     		cbnz	r0, .L290
 3016              	.LBB190:
 3017              	.LBB191:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3018              		.loc 2 195 0
 3019              		.syntax unified
 3020              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3021 0002 4FF05003 			mov r3, #80												
 3022 0006 83F31188 		msr basepri, r3											
 3023 000a BFF36F8F 		isb														
 3024 000e BFF34F8F 		dsb														
 3025              	
 3026              	@ 0 "" 2
 3027              	.LVL313:
 3028              		.thumb
 3029              		.syntax unified
 3030              	.L291:
 3031 0012 FEE7     		b	.L291
 3032              	.L290:
 3033              	.LBE191:
 3034              	.LBE190:
1943:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 3035              		.loc 1 1943 0
 3036 0014 10B5     		push	{r4, lr}
 3037              	.LCFI37:
 3038              		.cfi_def_cfa_offset 8
 3039              		.cfi_offset 4, -8
ARM GAS  /tmp/ccXf4wQt.s 			page 106


 3040              		.cfi_offset 14, -4
 3041 0016 0446     		mov	r4, r0
1949:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3042              		.loc 1 1949 0
 3043 0018 FFF7FEFF 		bl	vPortEnterCritical
 3044              	.LVL314:
1951:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3045              		.loc 1 1951 0
 3046 001c E36B     		ldr	r3, [r4, #60]
 3047 001e A46B     		ldr	r4, [r4, #56]
 3048              	.LVL315:
 3049 0020 1C1B     		subs	r4, r3, r4
 3050              	.LVL316:
1953:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3051              		.loc 1 1953 0
 3052 0022 FFF7FEFF 		bl	vPortExitCritical
 3053              	.LVL317:
1956:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3054              		.loc 1 1956 0
 3055 0026 2046     		mov	r0, r4
 3056 0028 10BD     		pop	{r4, pc}
 3057              		.cfi_endproc
 3058              	.LFE19:
 3060              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 3061              		.align	1
 3062              		.global	uxQueueMessagesWaitingFromISR
 3063              		.syntax unified
 3064              		.thumb
 3065              		.thumb_func
 3066              		.fpu softvfp
 3068              	uxQueueMessagesWaitingFromISR:
 3069              	.LFB20:
1960:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 3070              		.loc 1 1960 0
 3071              		.cfi_startproc
 3072              		@ args = 0, pretend = 0, frame = 0
 3073              		@ frame_needed = 0, uses_anonymous_args = 0
 3074              		@ link register save eliminated.
 3075              	.LVL318:
1964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
 3076              		.loc 1 1964 0
 3077 0000 08B1     		cbz	r0, .L297
1965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3078              		.loc 1 1965 0
 3079 0002 806B     		ldr	r0, [r0, #56]
 3080              	.LVL319:
1968:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3081              		.loc 1 1968 0
 3082 0004 7047     		bx	lr
 3083              	.LVL320:
 3084              	.L297:
 3085              	.LBB192:
 3086              	.LBB193:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3087              		.loc 2 195 0
 3088              		.syntax unified
 3089              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
ARM GAS  /tmp/ccXf4wQt.s 			page 107


 3090 0006 4FF05003 			mov r3, #80												
 3091 000a 83F31188 		msr basepri, r3											
 3092 000e BFF36F8F 		isb														
 3093 0012 BFF34F8F 		dsb														
 3094              	
 3095              	@ 0 "" 2
 3096              	.LVL321:
 3097              		.thumb
 3098              		.syntax unified
 3099              	.L296:
 3100 0016 FEE7     		b	.L296
 3101              	.LBE193:
 3102              	.LBE192:
 3103              		.cfi_endproc
 3104              	.LFE20:
 3106              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 3107              		.align	1
 3108              		.global	xQueueIsQueueEmptyFromISR
 3109              		.syntax unified
 3110              		.thumb
 3111              		.thumb_func
 3112              		.fpu softvfp
 3114              	xQueueIsQueueEmptyFromISR:
 3115              	.LFB27:
2309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 3116              		.loc 1 2309 0
 3117              		.cfi_startproc
 3118              		@ args = 0, pretend = 0, frame = 0
 3119              		@ frame_needed = 0, uses_anonymous_args = 0
 3120              		@ link register save eliminated.
 3121              	.LVL322:
2313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 3122              		.loc 1 2313 0
 3123 0000 18B1     		cbz	r0, .L303
2314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3124              		.loc 1 2314 0
 3125 0002 836B     		ldr	r3, [r0, #56]
 3126 0004 53B1     		cbz	r3, .L304
2320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3127              		.loc 1 2320 0
 3128 0006 0020     		movs	r0, #0
 3129              	.LVL323:
2324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3130              		.loc 1 2324 0
 3131 0008 7047     		bx	lr
 3132              	.LVL324:
 3133              	.L303:
 3134              	.LBB194:
 3135              	.LBB195:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3136              		.loc 2 195 0
 3137              		.syntax unified
 3138              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3139 000a 4FF05003 			mov r3, #80												
 3140 000e 83F31188 		msr basepri, r3											
 3141 0012 BFF36F8F 		isb														
 3142 0016 BFF34F8F 		dsb														
ARM GAS  /tmp/ccXf4wQt.s 			page 108


 3143              	
 3144              	@ 0 "" 2
 3145              	.LVL325:
 3146              		.thumb
 3147              		.syntax unified
 3148              	.L300:
 3149 001a FEE7     		b	.L300
 3150              	.L304:
 3151              	.LBE195:
 3152              	.LBE194:
2316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3153              		.loc 1 2316 0
 3154 001c 0120     		movs	r0, #1
 3155              	.LVL326:
 3156 001e 7047     		bx	lr
 3157              		.cfi_endproc
 3158              	.LFE27:
 3160              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 3161              		.align	1
 3162              		.global	xQueueIsQueueFullFromISR
 3163              		.syntax unified
 3164              		.thumb
 3165              		.thumb_func
 3166              		.fpu softvfp
 3168              	xQueueIsQueueFullFromISR:
 3169              	.LFB29:
2346:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 3170              		.loc 1 2349 0
 3171              		.cfi_startproc
 3172              		@ args = 0, pretend = 0, frame = 0
 3173              		@ frame_needed = 0, uses_anonymous_args = 0
 3174              		@ link register save eliminated.
 3175              	.LVL327:
2350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
2352:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2353:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 3176              		.loc 1 2353 0
 3177 0000 28B1     		cbz	r0, .L310
2354:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 3178              		.loc 1 2354 0
 3179 0002 826B     		ldr	r2, [r0, #56]
 3180 0004 C36B     		ldr	r3, [r0, #60]
 3181 0006 9A42     		cmp	r2, r3
 3182 0008 0AD0     		beq	.L311
2355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
2357:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2358:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
2359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2360:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
 3183              		.loc 1 2360 0
 3184 000a 0020     		movs	r0, #0
 3185              	.LVL328:
ARM GAS  /tmp/ccXf4wQt.s 			page 109


2361:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2362:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3186              		.loc 1 2364 0
 3187 000c 7047     		bx	lr
 3188              	.LVL329:
 3189              	.L310:
 3190              	.LBB196:
 3191              	.LBB197:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3192              		.loc 2 195 0
 3193              		.syntax unified
 3194              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3195 000e 4FF05003 			mov r3, #80												
 3196 0012 83F31188 		msr basepri, r3											
 3197 0016 BFF36F8F 		isb														
 3198 001a BFF34F8F 		dsb														
 3199              	
 3200              	@ 0 "" 2
 3201              	.LVL330:
 3202              		.thumb
 3203              		.syntax unified
 3204              	.L307:
 3205 001e FEE7     		b	.L307
 3206              	.L311:
 3207              	.LBE197:
 3208              	.LBE196:
2356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3209              		.loc 1 2356 0
 3210 0020 0120     		movs	r0, #1
 3211              	.LVL331:
 3212 0022 7047     		bx	lr
 3213              		.cfi_endproc
 3214              	.LFE29:
 3216              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 3217              		.align	1
 3218              		.global	vQueueAddToRegistry
 3219              		.syntax unified
 3220              		.thumb
 3221              		.thumb_func
 3222              		.fpu softvfp
 3224              	vQueueAddToRegistry:
 3225              	.LFB30:
2365:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2367:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2368:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
2370:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = xQueue;
2373:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt removing something from the queue
2376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2377:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
ARM GAS  /tmp/ccXf4wQt.s 			page 110


2378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2379:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2380:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2381:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The queue is full - do we want to block or just leave without
2382:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				posting? */
2383:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2384:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2386:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return indicating that we need to block. */
2387:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2388:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2389:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
2390:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2391:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2392:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2393:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2394:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
2395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2396:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2399:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2401:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2402:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2404:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2405:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2406:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
2407:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2408:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2409:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2410:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2412:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
2413:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2414:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
2415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2416:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2417:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The co-routine waiting has a higher priority so record
2418:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						that a yield might be appropriate. */
2419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2420:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2421:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2422:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2423:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2424:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2426:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2427:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2428:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2431:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2432:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2433:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = errQUEUE_FULL;
2434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
ARM GAS  /tmp/ccXf4wQt.s 			page 111


2435:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2436:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2437:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2438:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2439:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2440:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2443:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2445:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2446:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2447:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2449:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = xQueue;
2450:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2451:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2452:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt adding something to the queue
2453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2454:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2455:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2456:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2457:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2458:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2459:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				leave with nothing? */
2460:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2462:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2463:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					indicating that we need to block. */
2464:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2465:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2466:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
2467:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2468:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2469:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2470:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2471:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
2472:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2473:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2474:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2475:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2476:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2479:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2480:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2483:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2484:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Data is available from the queue. */
2486:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2487:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2488:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2489:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2490:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2491:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
ARM GAS  /tmp/ccXf4wQt.s 			page 112


2492:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2493:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2494:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2495:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2496:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQ
2497:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2498:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
2499:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2500:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2501:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2503:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2504:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
2505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2506:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
2507:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2509:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2510:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2513:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2514:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2515:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2516:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2517:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2520:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2521:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2522:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2523:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdFAIL;
2524:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2525:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2526:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2527:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2529:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2530:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2531:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2532:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2536:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2537:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2538:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = xQueue;
2539:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2540:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2541:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		exit without doing anything. */
2542:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2543:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2544:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2545:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2546:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2547:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			co-routine has not already been woken. */
2548:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
ARM GAS  /tmp/ccXf4wQt.s 			page 113


2549:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2550:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2551:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2553:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2554:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						return pdTRUE;
2555:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2556:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2557:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2558:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2559:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2560:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2561:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2562:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2563:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2564:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2565:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2566:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2567:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2568:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2569:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2570:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2571:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2572:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2573:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2574:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2575:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2576:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xCoRoutinePreviouslyWoken;
2577:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2578:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2581:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2582:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2583:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2584:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2585:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2586:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = xQueue;
2588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2589:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2590:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		not then just leave without doing anything. */
2591:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2592:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2593:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Copy the data from the queue. */
2594:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2595:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2597:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2598:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2599:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2600:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2601:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2602:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2604:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQu
2605:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccXf4wQt.s 			page 114


2606:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2607:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2608:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2609:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2612:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2613:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2614:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2618:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2619:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2620:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2621:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2622:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2623:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2624:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2625:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2626:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2627:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2628:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
2630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2631:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2632:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2633:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
2634:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2635:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2636:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2637:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2638:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2639:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2641:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2642:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2645:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3226              		.loc 1 2645 0
 3227              		.cfi_startproc
 3228              		@ args = 0, pretend = 0, frame = 0
 3229              		@ frame_needed = 0, uses_anonymous_args = 0
 3230              		@ link register save eliminated.
 3231              	.LVL332:
2646:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2648:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		a free slot. */
2650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3232              		.loc 1 2650 0
 3233 0000 0023     		movs	r3, #0
 3234              	.LVL333:
 3235              	.L313:
 3236              		.loc 1 2650 0 is_stmt 0 discriminator 1
 3237 0002 072B     		cmp	r3, #7
ARM GAS  /tmp/ccXf4wQt.s 			page 115


 3238 0004 0CD8     		bhi	.L317
2651:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2652:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 3239              		.loc 1 2652 0 is_stmt 1
 3240 0006 074A     		ldr	r2, .L319
 3241 0008 52F83320 		ldr	r2, [r2, r3, lsl #3]
 3242 000c 0AB1     		cbz	r2, .L318
2650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3243              		.loc 1 2650 0 discriminator 2
 3244 000e 0133     		adds	r3, r3, #1
 3245              	.LVL334:
 3246 0010 F7E7     		b	.L313
 3247              	.L318:
2653:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2654:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Store the information on this queue. */
2655:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 3248              		.loc 1 2655 0
 3249 0012 044A     		ldr	r2, .L319
 3250 0014 42F83310 		str	r1, [r2, r3, lsl #3]
2656:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 3251              		.loc 1 2656 0
 3252 0018 02EBC303 		add	r3, r2, r3, lsl #3
 3253              	.LVL335:
 3254 001c 5860     		str	r0, [r3, #4]
2657:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2658:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2659:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 3255              		.loc 1 2659 0
 3256 001e 7047     		bx	lr
 3257              	.LVL336:
 3258              	.L317:
 3259 0020 7047     		bx	lr
 3260              	.L320:
 3261 0022 00BF     		.align	2
 3262              	.L319:
 3263 0024 00000000 		.word	xQueueRegistry
 3264              		.cfi_endproc
 3265              	.LFE30:
 3267              		.section	.text.pcQueueGetName,"ax",%progbits
 3268              		.align	1
 3269              		.global	pcQueueGetName
 3270              		.syntax unified
 3271              		.thumb
 3272              		.thumb_func
 3273              		.fpu softvfp
 3275              	pcQueueGetName:
 3276              	.LFB31:
2660:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2661:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2662:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2663:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2664:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2666:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2667:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2668:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2669:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccXf4wQt.s 			page 116


2670:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2673:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3277              		.loc 1 2674 0
 3278              		.cfi_startproc
 3279              		@ args = 0, pretend = 0, frame = 0
 3280              		@ frame_needed = 0, uses_anonymous_args = 0
 3281              		@ link register save eliminated.
 3282              	.LVL337:
2675:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
2677:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2679:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		removing entries from the registry while it is being searched. */
2680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3283              		.loc 1 2680 0
 3284 0000 0023     		movs	r3, #0
 3285              	.LVL338:
 3286              	.L322:
 3287              		.loc 1 2680 0 is_stmt 0 discriminator 1
 3288 0002 072B     		cmp	r3, #7
 3289 0004 0BD8     		bhi	.L326
2681:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3290              		.loc 1 2682 0 is_stmt 1
 3291 0006 074A     		ldr	r2, .L328
 3292 0008 02EBC302 		add	r2, r2, r3, lsl #3
 3293 000c 5268     		ldr	r2, [r2, #4]
 3294 000e 8242     		cmp	r2, r0
 3295 0010 01D0     		beq	.L327
2680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3296              		.loc 1 2680 0 discriminator 2
 3297 0012 0133     		adds	r3, r3, #1
 3298              	.LVL339:
 3299 0014 F5E7     		b	.L322
 3300              	.L327:
2683:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2684:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 3301              		.loc 1 2684 0
 3302 0016 034A     		ldr	r2, .L328
 3303 0018 52F83300 		ldr	r0, [r2, r3, lsl #3]
 3304              	.LVL340:
2685:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 3305              		.loc 1 2685 0
 3306 001c 7047     		bx	lr
 3307              	.LVL341:
 3308              	.L326:
2676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3309              		.loc 1 2676 0
 3310 001e 0020     		movs	r0, #0
 3311              	.LVL342:
2686:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2687:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2688:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2689:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccXf4wQt.s 			page 117


2690:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2691:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2692:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2693:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pcReturn;
2694:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 3312              		.loc 1 2694 0
 3313 0020 7047     		bx	lr
 3314              	.L329:
 3315 0022 00BF     		.align	2
 3316              	.L328:
 3317 0024 00000000 		.word	xQueueRegistry
 3318              		.cfi_endproc
 3319              	.LFE31:
 3321              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 3322              		.align	1
 3323              		.global	vQueueUnregisterQueue
 3324              		.syntax unified
 3325              		.thumb
 3326              		.thumb_func
 3327              		.fpu softvfp
 3329              	vQueueUnregisterQueue:
 3330              	.LFB32:
2695:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2696:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2697:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2701:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3331              		.loc 1 2702 0
 3332              		.cfi_startproc
 3333              		@ args = 0, pretend = 0, frame = 0
 3334              		@ frame_needed = 0, uses_anonymous_args = 0
 3335              		@ link register save eliminated.
 3336              	.LVL343:
2703:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2704:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2705:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		registry. */
2707:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3337              		.loc 1 2707 0
 3338 0000 0023     		movs	r3, #0
 3339              	.LVL344:
 3340              	.L331:
 3341              		.loc 1 2707 0 is_stmt 0 discriminator 1
 3342 0002 072B     		cmp	r3, #7
 3343 0004 0FD8     		bhi	.L335
2708:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2709:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3344              		.loc 1 2709 0 is_stmt 1
 3345 0006 084A     		ldr	r2, .L337
 3346 0008 02EBC302 		add	r2, r2, r3, lsl #3
 3347 000c 5268     		ldr	r2, [r2, #4]
 3348 000e 8242     		cmp	r2, r0
 3349 0010 01D0     		beq	.L336
2707:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
ARM GAS  /tmp/ccXf4wQt.s 			page 118


 3350              		.loc 1 2707 0 discriminator 2
 3351 0012 0133     		adds	r3, r3, #1
 3352              	.LVL345:
 3353 0014 F5E7     		b	.L331
 3354              	.L336:
2710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2711:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2712:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 3355              		.loc 1 2712 0
 3356 0016 044A     		ldr	r2, .L337
 3357 0018 0021     		movs	r1, #0
 3358 001a 42F83310 		str	r1, [r2, r3, lsl #3]
2713:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2714:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2715:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				appear in the registry twice if it is added, removed, then
2716:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				added again. */
2717:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 3359              		.loc 1 2717 0
 3360 001e 02EBC303 		add	r3, r2, r3, lsl #3
 3361              	.LVL346:
 3362 0022 5960     		str	r1, [r3, #4]
2718:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 3363              		.loc 1 2718 0
 3364 0024 7047     		bx	lr
 3365              	.LVL347:
 3366              	.L335:
 3367 0026 7047     		bx	lr
 3368              	.L338:
 3369              		.align	2
 3370              	.L337:
 3371 0028 00000000 		.word	xQueueRegistry
 3372              		.cfi_endproc
 3373              	.LFE32:
 3375              		.section	.text.vQueueDelete,"ax",%progbits
 3376              		.align	1
 3377              		.global	vQueueDelete
 3378              		.syntax unified
 3379              		.thumb
 3380              		.thumb_func
 3381              		.fpu softvfp
 3383              	vQueueDelete:
 3384              	.LFB21:
1972:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 3385              		.loc 1 1972 0
 3386              		.cfi_startproc
 3387              		@ args = 0, pretend = 0, frame = 0
 3388              		@ frame_needed = 0, uses_anonymous_args = 0
 3389              	.LVL348:
1975:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 3390              		.loc 1 1975 0
 3391 0000 40B9     		cbnz	r0, .L340
 3392              	.LBB198:
 3393              	.LBB199:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3394              		.loc 2 195 0
 3395              		.syntax unified
 3396              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
ARM GAS  /tmp/ccXf4wQt.s 			page 119


 3397 0002 4FF05003 			mov r3, #80												
 3398 0006 83F31188 		msr basepri, r3											
 3399 000a BFF36F8F 		isb														
 3400 000e BFF34F8F 		dsb														
 3401              	
 3402              	@ 0 "" 2
 3403              	.LVL349:
 3404              		.thumb
 3405              		.syntax unified
 3406              	.L341:
 3407 0012 FEE7     		b	.L341
 3408              	.L340:
 3409              	.LBE199:
 3410              	.LBE198:
1972:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 3411              		.loc 1 1972 0
 3412 0014 10B5     		push	{r4, lr}
 3413              	.LCFI38:
 3414              		.cfi_def_cfa_offset 8
 3415              		.cfi_offset 4, -8
 3416              		.cfi_offset 14, -4
 3417 0016 0446     		mov	r4, r0
1980:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3418              		.loc 1 1980 0
 3419 0018 FFF7FEFF 		bl	vQueueUnregisterQueue
 3420              	.LVL350:
1988:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3421              		.loc 1 1988 0
 3422 001c 2046     		mov	r0, r4
 3423 001e FFF7FEFF 		bl	vPortFree
 3424              	.LVL351:
 3425 0022 10BD     		pop	{r4, pc}
 3426              		.cfi_endproc
 3427              	.LFE21:
 3429              		.comm	xQueueRegistry,64,4
 3430              		.text
 3431              	.Letext0:
 3432              		.file 3 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 3433              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 3434              		.file 5 "/usr/include/newlib/sys/lock.h"
 3435              		.file 6 "/usr/include/newlib/sys/_types.h"
 3436              		.file 7 "/usr/include/newlib/sys/reent.h"
 3437              		.file 8 "/usr/include/newlib/stdlib.h"
 3438              		.file 9 "/usr/include/newlib/sys/_stdint.h"
 3439              		.file 10 "Core/Inc/FreeRTOSConfig.h"
 3440              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 3441              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 3442              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 3443              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  /tmp/ccXf4wQt.s 			page 120


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
     /tmp/ccXf4wQt.s:16     .text.prvGetDisinheritPriorityAfterTimeout:0000000000000000 $t
     /tmp/ccXf4wQt.s:22     .text.prvGetDisinheritPriorityAfterTimeout:0000000000000000 prvGetDisinheritPriorityAfterTimeout
     /tmp/ccXf4wQt.s:52     .text.prvIsQueueFull:0000000000000000 $t
     /tmp/ccXf4wQt.s:58     .text.prvIsQueueFull:0000000000000000 prvIsQueueFull
     /tmp/ccXf4wQt.s:99     .text.prvIsQueueEmpty:0000000000000000 $t
     /tmp/ccXf4wQt.s:105    .text.prvIsQueueEmpty:0000000000000000 prvIsQueueEmpty
     /tmp/ccXf4wQt.s:144    .text.prvCopyDataToQueue:0000000000000000 $t
     /tmp/ccXf4wQt.s:150    .text.prvCopyDataToQueue:0000000000000000 prvCopyDataToQueue
     /tmp/ccXf4wQt.s:269    .text.prvCopyDataFromQueue:0000000000000000 $t
     /tmp/ccXf4wQt.s:275    .text.prvCopyDataFromQueue:0000000000000000 prvCopyDataFromQueue
     /tmp/ccXf4wQt.s:323    .text.prvUnlockQueue:0000000000000000 $t
     /tmp/ccXf4wQt.s:329    .text.prvUnlockQueue:0000000000000000 prvUnlockQueue
     /tmp/ccXf4wQt.s:432    .text.xQueueGenericReset:0000000000000000 $t
     /tmp/ccXf4wQt.s:439    .text.xQueueGenericReset:0000000000000000 xQueueGenericReset
     /tmp/ccXf4wQt.s:547    .text.xQueueGenericReset:000000000000007c $d
     /tmp/ccXf4wQt.s:552    .text.prvInitialiseNewQueue:0000000000000000 $t
     /tmp/ccXf4wQt.s:558    .text.prvInitialiseNewQueue:0000000000000000 prvInitialiseNewQueue
     /tmp/ccXf4wQt.s:599    .text.xQueueGenericCreate:0000000000000000 $t
     /tmp/ccXf4wQt.s:606    .text.xQueueGenericCreate:0000000000000000 xQueueGenericCreate
     /tmp/ccXf4wQt.s:693    .text.xQueueGenericSend:0000000000000000 $t
     /tmp/ccXf4wQt.s:700    .text.xQueueGenericSend:0000000000000000 xQueueGenericSend
     /tmp/ccXf4wQt.s:1039   .text.xQueueGenericSend:0000000000000184 $d
     /tmp/ccXf4wQt.s:1044   .text.prvInitialiseMutex:0000000000000000 $t
     /tmp/ccXf4wQt.s:1050   .text.prvInitialiseMutex:0000000000000000 prvInitialiseMutex
     /tmp/ccXf4wQt.s:1089   .text.xQueueCreateMutex:0000000000000000 $t
     /tmp/ccXf4wQt.s:1096   .text.xQueueCreateMutex:0000000000000000 xQueueCreateMutex
     /tmp/ccXf4wQt.s:1128   .text.xQueueGenericSendFromISR:0000000000000000 $t
     /tmp/ccXf4wQt.s:1135   .text.xQueueGenericSendFromISR:0000000000000000 xQueueGenericSendFromISR
     /tmp/ccXf4wQt.s:1357   .text.xQueueGiveFromISR:0000000000000000 $t
     /tmp/ccXf4wQt.s:1364   .text.xQueueGiveFromISR:0000000000000000 xQueueGiveFromISR
     /tmp/ccXf4wQt.s:1580   .text.xQueueReceive:0000000000000000 $t
     /tmp/ccXf4wQt.s:1587   .text.xQueueReceive:0000000000000000 xQueueReceive
     /tmp/ccXf4wQt.s:1889   .text.xQueueReceive:0000000000000158 $d
     /tmp/ccXf4wQt.s:1894   .text.xQueueSemaphoreTake:0000000000000000 $t
     /tmp/ccXf4wQt.s:1901   .text.xQueueSemaphoreTake:0000000000000000 xQueueSemaphoreTake
     /tmp/ccXf4wQt.s:2267   .text.xQueueSemaphoreTake:00000000000001a0 $d
     /tmp/ccXf4wQt.s:2272   .text.xQueuePeek:0000000000000000 $t
     /tmp/ccXf4wQt.s:2279   .text.xQueuePeek:0000000000000000 xQueuePeek
     /tmp/ccXf4wQt.s:2582   .text.xQueuePeek:0000000000000158 $d
     /tmp/ccXf4wQt.s:2587   .text.xQueueReceiveFromISR:0000000000000000 $t
     /tmp/ccXf4wQt.s:2594   .text.xQueueReceiveFromISR:0000000000000000 xQueueReceiveFromISR
     /tmp/ccXf4wQt.s:2779   .text.xQueuePeekFromISR:0000000000000000 $t
     /tmp/ccXf4wQt.s:2786   .text.xQueuePeekFromISR:0000000000000000 xQueuePeekFromISR
     /tmp/ccXf4wQt.s:2942   .text.uxQueueMessagesWaiting:0000000000000000 $t
     /tmp/ccXf4wQt.s:2949   .text.uxQueueMessagesWaiting:0000000000000000 uxQueueMessagesWaiting
     /tmp/ccXf4wQt.s:3000   .text.uxQueueSpacesAvailable:0000000000000000 $t
     /tmp/ccXf4wQt.s:3007   .text.uxQueueSpacesAvailable:0000000000000000 uxQueueSpacesAvailable
     /tmp/ccXf4wQt.s:3061   .text.uxQueueMessagesWaitingFromISR:0000000000000000 $t
     /tmp/ccXf4wQt.s:3068   .text.uxQueueMessagesWaitingFromISR:0000000000000000 uxQueueMessagesWaitingFromISR
     /tmp/ccXf4wQt.s:3107   .text.xQueueIsQueueEmptyFromISR:0000000000000000 $t
     /tmp/ccXf4wQt.s:3114   .text.xQueueIsQueueEmptyFromISR:0000000000000000 xQueueIsQueueEmptyFromISR
     /tmp/ccXf4wQt.s:3161   .text.xQueueIsQueueFullFromISR:0000000000000000 $t
     /tmp/ccXf4wQt.s:3168   .text.xQueueIsQueueFullFromISR:0000000000000000 xQueueIsQueueFullFromISR
     /tmp/ccXf4wQt.s:3217   .text.vQueueAddToRegistry:0000000000000000 $t
     /tmp/ccXf4wQt.s:3224   .text.vQueueAddToRegistry:0000000000000000 vQueueAddToRegistry
ARM GAS  /tmp/ccXf4wQt.s 			page 121


     /tmp/ccXf4wQt.s:3263   .text.vQueueAddToRegistry:0000000000000024 $d
                            *COM*:0000000000000040 xQueueRegistry
     /tmp/ccXf4wQt.s:3268   .text.pcQueueGetName:0000000000000000 $t
     /tmp/ccXf4wQt.s:3275   .text.pcQueueGetName:0000000000000000 pcQueueGetName
     /tmp/ccXf4wQt.s:3317   .text.pcQueueGetName:0000000000000024 $d
     /tmp/ccXf4wQt.s:3322   .text.vQueueUnregisterQueue:0000000000000000 $t
     /tmp/ccXf4wQt.s:3329   .text.vQueueUnregisterQueue:0000000000000000 vQueueUnregisterQueue
     /tmp/ccXf4wQt.s:3371   .text.vQueueUnregisterQueue:0000000000000028 $d
     /tmp/ccXf4wQt.s:3376   .text.vQueueDelete:0000000000000000 $t
     /tmp/ccXf4wQt.s:3383   .text.vQueueDelete:0000000000000000 vQueueDelete
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskPriorityDisinherit
memcpy
xTaskRemoveFromEventList
vTaskMissedYield
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
xTaskResumeAll
vTaskInternalSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
vPortValidateInterruptPriority
pvTaskIncrementMutexHeldCount
xTaskPriorityInherit
vTaskPriorityDisinheritAfterTimeout
vPortFree
