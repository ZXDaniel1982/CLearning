ARM GAS  /tmp/ccj2W1aG.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"queue.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  23              	prvGetDisinheritPriorityAfterTimeout:
  24              	.LFB22:
  25              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/queue.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * FreeRTOS Kernel V10.1.0
   3:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include <stdlib.h>
  29:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include <string.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  31:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** task.h is included from an application file. */
ARM GAS  /tmp/ccj2W1aG.s 			page 2


  34:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "FreeRTOS.h"
  37:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "task.h"
  38:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "queue.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  40:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  41:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#include "croutine.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
  43:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  44:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  45:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** for the header files above, but not in this file, in order to generate the
  47:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** correct privileged Vs unprivileged linkage and placement. */
  48:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  49:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  50:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  51:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  52:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  53:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  54:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  57:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** structure instead holds a pointer to the mutex holder (if any).  Map alternative
  60:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** names to the pcHead and structure member to ensure the readability of the code
  61:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  62:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** a union as their usage is mutually exclusive dependent on what the queue is
  63:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** being used for. */
  64:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define uxQueueType						pcHead
  65:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
  66:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** typedef struct QueuePointers
  68:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
  69:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
  70:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcReadFrom;				/*< Points to the last place that a queued item was read from when the stru
  71:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } QueuePointers_t;
  72:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  73:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** typedef struct SemaphoreData
  74:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
  75:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	TaskHandle_t xMutexHolder;		 /*< The handle of the task that holds the mutex. */
  76:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex ha
  77:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } SemaphoreData_t;
  78:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  79:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  80:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** zero. */
  81:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
  82:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
  83:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  84:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_PREEMPTION == 0 )
  85:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  86:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	performed just because a higher priority task has been woken. */
  87:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
  88:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  90:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
ARM GAS  /tmp/ccj2W1aG.s 			page 3


  91:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
  93:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Definition of the queue used by the scheduler.
  94:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  95:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * rationale: https://www.freertos.org/Embedded-RTOS-Queues.html
  96:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
  97:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** typedef struct QueueDef_t
  98:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
  99:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 101:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	union
 103:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 104:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		QueuePointers_t xQueue;		/*< Data required exclusively when this structure is used as a queue. */
 105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		SemaphoreData_t xSemaphore; /*< Data required exclusively when this structure is used as a semaph
 106:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} u;
 107:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 116:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 117:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		struct QueueDef_t *pxQueueSetContainer;
 124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 126:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 127:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		UBaseType_t uxQueueNumber;
 128:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uint8_t ucQueueType;
 129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } xQUEUE;
 132:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 134:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** name below to enable the use of older kernel aware debuggers. */
 135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** typedef xQUEUE Queue_t;
 136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 138:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 139:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 140:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 141:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 142:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 147:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	more user friendly. */
ARM GAS  /tmp/ccj2W1aG.s 			page 4


 148:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		QueueHandle_t xHandle;
 152:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} xQueueRegistryItem;
 153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	debuggers. */
 157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 158:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 159:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 160:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 161:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	array position being vacant. */
 162:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 163:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 165:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 167:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 168:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 169:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 170:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 171:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 172:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 173:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 174:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 175:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 177:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 178:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
 179:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 180:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 181:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 182:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 183:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 184:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 185:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
 186:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 187:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 188:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 189:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 190:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 191:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 192:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * back of the queue.
 193:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 197:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Copies an item out of a queue.
 198:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 200:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 201:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 202:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/*
 203:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 204:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * the queue set that the queue contains data.
ARM GAS  /tmp/ccj2W1aG.s 			page 5


 205:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 */
 206:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 207:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 208:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 209:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 210:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 211:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * dynamically to fill in the structure's members.
 212:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 213:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 214:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 215:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 216:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 217:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 218:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * as a mutex.
 219:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 220:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 221:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/*
 226:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * If a task waiting for a mutex causes the mutex holder to inherit a
 227:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * priority, but the waiting task times out, then the holder should
 228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * disinherit the priority - but only down to the highest priority of any
 229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * other tasks that are waiting for the same mutex.  This function returns
 230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * that priority.
 231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 */
 232:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVILEGE
 233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 237:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 238:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * accessing the queue event lists.
 239:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define prvLockQueue( pxQueue )								\
 241:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();									\
 242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{														\
 243:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 244:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{													\
 245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}													\
 247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{													\
 249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}													\
 251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}														\
 252:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL()
 253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 254:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
ARM GAS  /tmp/ccj2W1aG.s 			page 6


 262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 263:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint 
 264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xNewQueue == pdFALSE )
 271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			it will be possible to write to it. */
 277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
 284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	versions. */
 304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return pdPASS;
 305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 307:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 311:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 312:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		supplied. */
 318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxStaticQueue != NULL );
ARM GAS  /tmp/ccj2W1aG.s 			page 7


 319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		should not be provided if the item size is 0. */
 322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 327:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the real queue and semaphore structures. */
 330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#endif /* configASSERT_DEFINED */
 335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		The address of a statically allocated storage area was also passed in
 338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		but is already set. */
 339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structure
 340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 345:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 346:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				note this queue was allocated statically in case the queue is
 347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				later deleted. */
 348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 353:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 354:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 357:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 358:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 361:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 362:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 365:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 368:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 370:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	size_t xQueueSizeInBytes;
 372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uint8_t *pucQueueStorage;
 373:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccj2W1aG.s 			page 8


 376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 377:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* There is not going to be a queue storage area. */
 379:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 380:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 381:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 382:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 383:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 384:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			can be in the queue at any time. */
 385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 386:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 387:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 388:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Allocate the queue and storage area.  Justification for MISRA
 389:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		deviation as follows:  pvPortMalloc() always ensures returned memory
 390:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		blocks are aligned per the requirements of the MCU stack.  In this case
 391:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pvPortMalloc() must return a pointer that is guaranteed to meet the
 392:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		alignment requirements of the Queue_t structure - which in this case
 393:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		is an int8_t *.  Therefore, whenever the stack alignment requirements
 394:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		are greater than or equal to the pointer to char requirements the cast
 395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		is safe.  In other cases alignment requirements are not strict (one or
 396:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		two bytes). */
 397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !
 398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 399:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 401:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 402:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			storage area. */
 403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 404:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, es
 405:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 406:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 407:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 408:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Queues can be created either statically or dynamically, so
 409:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				note this task was created dynamically in case it is later
 410:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				deleted. */
 411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 412:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 413:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 414:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 416:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 417:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 418:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 420:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 421:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 422:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 424:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 427:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 428:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 431:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 432:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
ARM GAS  /tmp/ccj2W1aG.s 			page 9


 433:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) ucQueueType;
 434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 435:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 436:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 437:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 438:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 439:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 440:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		value that is known to be within the memory map. */
 441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 443:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
 444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 445:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Set the head to the start of the queue storage area. */
 446:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 447:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 449:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Initialise the queue members as described where the queue type is
 450:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	defined. */
 451:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 452:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 454:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 455:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 456:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 457:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 458:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 459:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 460:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 462:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 463:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 464:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 465:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 466:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 467:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 468:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 469:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 470:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 471:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 472:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 473:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 474:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 475:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 476:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The queue create function will set all the queue structure members
 478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			correctly for a generic queue, but this function is creating a
 479:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 480:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in particular the information required for priority inheritance. */
 481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 483:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 484:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* In case this is a recursive mutex. */
 485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 486:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 487:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 488:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 489:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Start with the semaphore in the expected state. */
ARM GAS  /tmp/ccj2W1aG.s 			page 10


 490:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 491:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 492:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 493:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 494:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 495:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 496:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 497:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 498:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 499:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 500:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 501:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 504:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xNewQueue;
 506:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 507:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 509:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 510:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xNewQueue;
 512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 513:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 514:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 515:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 516:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 517:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 518:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 520:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 521:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xNewQueue;
 522:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 523:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 524:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 525:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 526:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) ucQueueType;
 527:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueTy
 529:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 530:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xNewQueue;
 532:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 536:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 537:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 538:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 540:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 541:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	TaskHandle_t pxReturn;
 542:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 543:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 544:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 545:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 546:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
ARM GAS  /tmp/ccj2W1aG.s 			page 11


 547:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 548:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		following critical section exiting and the function returning. */
 549:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 550:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 551:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 553:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 554:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 555:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 556:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 557:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxReturn = NULL;
 558:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 559:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 560:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 561:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 562:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxReturn;
 563:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 564:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 565:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 566:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 567:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 568:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 569:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 570:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 571:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 572:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	TaskHandle_t pxReturn;
 573:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 574:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( xSemaphore );
 575:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Mutexes cannot be used in interrupt service routines, so the mutex
 577:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		holder should not change in an ISR, and therefore a critical section is
 578:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		not required here. */
 579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 581:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 582:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 583:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 584:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 585:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxReturn = NULL;
 586:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxReturn;
 589:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 590:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 591:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 592:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 593:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 594:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 595:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 597:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 598:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 599:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 600:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 601:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 602:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If this is the task that holds the mutex then xMutexHolder will not
ARM GAS  /tmp/ccj2W1aG.s 			page 12


 604:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 605:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 606:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		this is the only condition we are interested in it does not matter if
 607:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 608:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 609:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 612:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 613:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 614:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount member. */
 618:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 619:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 620:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Has the recursive call count unwound to 0? */
 621:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 622:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 623:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 624:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				task that might be waiting to access the mutex. */
 625:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 626:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 627:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 628:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 631:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 632:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 633:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 634:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 635:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 636:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 637:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			holder. */
 638:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 639:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 641:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 642:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
 644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 645:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 648:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 651:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 652:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 653:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 654:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 655:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 657:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 658:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 659:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xQueueGiveMutexRecursive(). */
 660:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccj2W1aG.s 			page 13


 661:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 662:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 663:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 664:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 666:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 667:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 668:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 669:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 670:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 671:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 673:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			before reaching here. */
 675:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xReturn != pdFAIL )
 676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 677:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 679:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 681:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 683:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 684:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 685:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
 686:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 687:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 688:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 689:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 690:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 692:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 693:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 694:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 695:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 696:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 697:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 701:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 703:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 704:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 705:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 707:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 708:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 709:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 711:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 712:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 713:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xHandle;
 714:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 715:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 716:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 717:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccj2W1aG.s 			page 14


 718:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 719:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 720:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 721:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 722:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 723:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 724:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 726:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 727:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 729:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 734:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 735:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 736:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 737:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 738:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 739:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 740:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 741:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xHandle;
 742:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 743:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 744:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 745:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 746:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 747:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 748:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 749:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 750:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
 751:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 752:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 756:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 757:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 759:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 760:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 761:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 762:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 763:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/*lint -save -e904 This function relaxes the coding standard somewhat to
 764:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	allow return statements within the function itself.  This is done in the
 765:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	interest of execution time efficiency. */
 766:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
 767:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 768:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 769:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 770:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 771:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 772:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 773:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			queue is full. */
 774:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
ARM GAS  /tmp/ccj2W1aG.s 			page 15


 775:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 776:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 777:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 778:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 779:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 780:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 781:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 782:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 783:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 784:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 785:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 786:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 )
 787:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* Do not notify the queue set as an existing item
 789:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							was overwritten in the queue so the number of items
 790:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							in the queue has not changed. */
 791:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 792:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 793:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 794:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 795:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 796:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 797:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							unblock. A context switch is required. */
 798:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 799:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 800:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 801:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 802:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 803:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 804:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 805:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 806:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 807:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* If there was a task waiting for data to arrive on the
 808:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queue then unblock it now. */
 809:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 811:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 812:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 813:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The unblocked task has a priority higher than
 814:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								our own so yield immediately.  Yes it is ok to
 815:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								do this from within the critical section - the
 816:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								kernel takes care of that. */
 817:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 818:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 819:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
 820:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 821:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 822:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 823:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 824:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else if( xYieldRequired != pdFALSE )
 825:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 826:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* This path is a special case that will only get
 827:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							executed if the task was holding multiple mutexes
 828:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							and the mutexes were given back in an order that is
 829:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							different to that in which they were taken. */
 830:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 831:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
ARM GAS  /tmp/ccj2W1aG.s 			page 16


 832:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 833:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 834:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 835:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 836:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 837:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 838:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 839:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 840:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 841:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 842:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 843:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					queue then unblock it now. */
 844:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 845:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 846:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 847:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 848:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The unblocked task has a priority higher than
 849:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 850:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							this from within the critical section - the kernel
 851:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							takes care of that. */
 852:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 853:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 854:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 855:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 856:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 857:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 858:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 859:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else if( xYieldRequired != pdFALSE )
 860:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 861:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* This path is a special case that will only get
 862:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						executed if the task was holding multiple mutexes and
 863:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						the mutexes were given back in an order that is
 864:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						different to that in which they were taken. */
 865:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 866:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 867:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 868:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 869:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 870:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 871:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 872:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 873:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 874:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 877:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 878:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 881:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was full and no block time is specified (or
 882:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
 883:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 884:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 885:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Return to the original privilege level before exiting
 886:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the function. */
 887:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 888:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
ARM GAS  /tmp/ccj2W1aG.s 			page 17


 889:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 890:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 891:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 892:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was full and a block time was specified so
 893:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
 894:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 895:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 896:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 897:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
 898:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 899:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
 900:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 901:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 902:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 903:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 904:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 905:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 906:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 907:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
 908:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 909:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 911:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 912:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 913:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 914:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 915:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 916:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 917:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 918:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 919:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 920:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Unlocking the queue means queue events can effect the
 921:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				event list.  It is possible that interrupts occurring now
 922:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				remove this task from the event list again - but as the
 923:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				scheduler is suspended the task will go onto the pending
 924:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				ready last instead of the actual ready list. */
 925:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 926:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 927:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 928:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				ready list into the ready list - so it is feasible that this
 929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				task is already in a ready list before it yields - in which
 930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				case the yield will not cause a context switch unless there
 931:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				is also a higher priority task in the pending ready list. */
 932:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 933:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 934:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 935:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 936:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 937:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 938:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 939:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Try again. */
 940:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 941:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 942:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 943:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 944:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 945:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
ARM GAS  /tmp/ccj2W1aG.s 			page 18


 946:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The timeout has expired. */
 947:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 948:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 949:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 950:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 951:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			return errQUEUE_FULL;
 952:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 953:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint -restore */
 954:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 955:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 956:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 957:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 958:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 959:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 960:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
 961:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 962:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 963:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 966:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 967:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 968:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 969:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 970:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 971:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 972:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 973:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 974:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
 975:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 976:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 977:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 978:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 979:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 980:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 981:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 982:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 983:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 984:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 985:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 986:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 987:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	post). */
 988:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 989:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 990:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 991:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 992:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 993:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 994:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 995:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 996:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 997:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 998:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 999:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			called here even though the disinherit function does not check if
1000:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
1001:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1002:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccj2W1aG.s 			page 19


1003:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1004:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
1005:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
1006:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1007:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1008:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1009:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1010:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1011:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
1012:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1013:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
1014:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
1015:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							unblock.  A context switch is required. */
1016:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1017:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1018:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1019:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1020:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1021:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1022:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1023:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1024:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1025:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1026:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1027:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1028:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1029:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1030:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1031:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1032:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1033:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1034:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1035:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1036:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1037:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1038:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1039:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1040:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1041:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1042:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								else
1043:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1044:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1045:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1046:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1047:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1048:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1049:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1050:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1051:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1052:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1053:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1054:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1055:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1056:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1057:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1058:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1059:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
ARM GAS  /tmp/ccj2W1aG.s 			page 20


1060:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1061:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1062:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1063:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1064:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1065:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1066:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1067:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1068:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1069:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1070:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1071:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1072:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1073:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1074:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1075:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1076:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1077:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1078:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1079:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1080:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1081:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1082:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1083:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1084:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1085:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1086:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1087:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1088:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1089:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1090:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1091:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1092:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1093:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1095:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1096:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1097:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1098:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1099:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
1100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1101:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1103:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1104:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1106:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1107:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1108:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
1113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1116:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
ARM GAS  /tmp/ccj2W1aG.s 			page 21


1117:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	post). */
1119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if the item size is not 0. */
1124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1127:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1128:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	interrupts, only tasks. */
1129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutex
1130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1132:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1133:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1134:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1138:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1139:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1140:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1141:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1142:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1147:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1148:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1152:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		space'. */
1154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1158:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1159:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1160:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1161:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1162:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1163:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1164:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1165:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			messages (semaphores) available. */
1166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1167:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1168:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1169:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
1170:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
1171:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1172:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1173:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
ARM GAS  /tmp/ccj2W1aG.s 			page 22


1174:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1175:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1176:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1177:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1178:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The semaphore is a member of a queue set, and
1179:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							posting	to the queue set caused a higher priority
1180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							task to	unblock.  A context switch is required. */
1181:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1182:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1183:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1184:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1185:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1186:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1187:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1188:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1189:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1190:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1192:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1193:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1198:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1200:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1201:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1202:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1203:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1204:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1205:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1206:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1207:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								else
1208:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1209:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1210:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1211:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1212:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1213:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1214:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1215:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1216:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1217:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1218:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1219:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1220:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1221:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1226:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1227:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
ARM GAS  /tmp/ccj2W1aG.s 			page 23


1231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1232:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1237:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1238:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1239:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1241:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1243:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1244:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1252:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1254:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1263:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
1265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
1278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Check the pointer is not NULL. */
1280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( ( pxQueue ) );
1281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	is zero (so no data is copied into the buffer. */
1284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
ARM GAS  /tmp/ccj2W1aG.s 			page 24


1288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/*lint -save -e904  This function relaxes the coding standard somewhat to
1295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	allow return statements within the function itself.  This is done in the
1296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	interest of execution time efficiency. */
1297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
1298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
1300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1307:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Data available, remove one item. */
1308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1311:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1312:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There is now space in the queue, were any tasks waiting to
1313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				post to the queue?  If so, unblock the highest priority waiting
1314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				task. */
1315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1327:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
1333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
1340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
ARM GAS  /tmp/ccj2W1aG.s 			page 25


1345:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1346:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
1348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1352:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1353:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1354:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1357:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1358:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1360:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1361:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1362:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1365:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1367:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1368:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The timeout has not expired.  If the queue is still empty place
1370:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the task on the list of tasks waiting to receive from the queue. */
1371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1373:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1377:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1379:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1380:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1381:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1382:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1383:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1384:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1386:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1387:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The queue contains data again.  Loop back to try and read the
1388:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				data. */
1389:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1390:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1391:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1392:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1393:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1394:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Timed out.  If there is no data in the queue exit, otherwise loop
1396:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			back and attempt to read the data. */
1397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1399:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1401:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
ARM GAS  /tmp/ccj2W1aG.s 			page 26


1402:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
1404:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1405:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1406:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1407:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1408:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1409:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1410:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint -restore */
1411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1412:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1413:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1414:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
1415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1416:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1417:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1418:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
1419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
1421:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xInheritanceOccurred = pdFALSE;
1422:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
1423:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1424:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Check the queue pointer is not NULL. */
1425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( ( pxQueue ) );
1426:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1427:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Check this really is a semaphore, in which case the item size will be
1428:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	0. */
1429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1431:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1432:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1433:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1435:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1436:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1437:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1438:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1439:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
1440:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
1442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
1443:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
1445:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1446:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Semaphores are queues with an item size of 0, and where the
1447:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			number of messages in the queue is the semaphore's count value. */
1448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1449:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1450:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1451:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1452:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1454:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1455:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1456:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Semaphores are queues with a data size of zero and where the
1457:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				messages waiting is the semaphore's count.  Reduce the count. */
1458:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
ARM GAS  /tmp/ccj2W1aG.s 			page 27


1459:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1460:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1462:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1463:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1464:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* Record the information required to implement
1465:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						priority inheritance should it become necessary. */
1466:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
1467:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1468:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1469:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1470:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1471:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1472:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1473:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_MUTEXES */
1474:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1475:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Check to see if other tasks are blocked waiting to give the
1476:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				semaphore, and if so, unblock the highest priority such task. */
1477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1479:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1480:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1483:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1484:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1486:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1487:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1488:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1489:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1490:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1491:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1492:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1493:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1494:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
1495:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1496:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1497:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1498:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1499:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1500:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* For inheritance to have occurred there must have been an
1501:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					initial timeout, and an adjusted timeout cannot become 0, as
1502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if it were 0 the function would have exited. */
1503:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					#if( configUSE_MUTEXES == 1 )
1504:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						configASSERT( xInheritanceOccurred == pdFALSE );
1506:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1507:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					#endif /* configUSE_MUTEXES */
1508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1509:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The semaphore count was 0 and no block time is specified
1510:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					(or the block time has expired) so exit now. */
1511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1513:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1514:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1515:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
ARM GAS  /tmp/ccj2W1aG.s 			page 28


1516:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1517:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The semaphore count was 0 and a block time was specified
1518:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					so configure the timeout structure ready to block. */
1519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1520:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1521:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1522:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1523:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1524:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1525:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1526:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1527:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1528:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1529:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1530:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1531:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can give to and take from the semaphore
1532:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1536:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1537:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1538:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1539:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1540:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* A block time is specified and not expired.  If the semaphore
1541:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			count is 0 then enter the Blocked state to wait for a semaphore to
1542:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			become available.  As semaphores are implemented with queues the
1543:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1544:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1545:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1546:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1547:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1548:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1549:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1550:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1551:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskENTER_CRITICAL();
1553:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1554:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
1555:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1556:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
1557:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1558:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1559:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1560:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1561:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1562:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1563:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif
1564:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1565:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1566:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1567:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1568:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1569:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1570:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1571:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1572:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
ARM GAS  /tmp/ccj2W1aG.s 			page 29


1573:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1574:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1575:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1576:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1577:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1578:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There was no timeout and the semaphore count was not 0, so
1579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				attempt to take the semaphore again. */
1580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1581:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1582:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1583:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1584:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1585:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1586:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Timed out. */
1587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1589:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1590:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* If the semaphore count is 0 exit now as the timeout has
1591:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			expired.  Otherwise return to attempt to take the semaphore that is
1592:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			known to be available.  As semaphores are implemented by queues the
1593:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1594:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1595:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1597:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1598:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* xInheritanceOccurred could only have be set if
1599:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1600:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					test the mutex type again to check it is actually a mutex. */
1601:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xInheritanceOccurred != pdFALSE )
1602:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskENTER_CRITICAL();
1604:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1605:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							UBaseType_t uxHighestWaitingPriority;
1606:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1607:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* This task blocking on the mutex caused another
1608:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							task to inherit this task's priority.  Now this task
1609:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							has timed out the priority should be disinherited
1610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							again, but only as low as the next highest priority
1611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							task that is waiting for the same mutex. */
1612:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1613:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPri
1614:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
1616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1618:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_MUTEXES */
1619:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1620:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1621:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
1622:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1623:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1624:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1625:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1626:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1627:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1628:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint -restore */
1629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
ARM GAS  /tmp/ccj2W1aG.s 			page 30


1630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1631:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1632:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1633:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1634:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1635:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1636:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1637:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
1638:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1639:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Check the pointer is not NULL. */
1640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( ( pxQueue ) );
1641:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1642:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	is zero (so no data is copied into the buffer. */
1644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1645:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1646:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1648:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1651:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1652:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1653:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1654:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/*lint -save -e904  This function relaxes the coding standard somewhat to
1655:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	allow return statements within the function itself.  This is done in the
1656:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	interest of execution time efficiency. */
1657:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
1658:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1659:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
1660:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1661:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1662:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1663:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1664:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1666:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1667:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Remember the read position so it can be reset after the data
1668:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				is read from the queue as this function is only peeking the
1669:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				data, not removing it. */
1670:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1671:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1673:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_PEEK( pxQueue );
1674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1675:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The data is not being removed, so reset the read pointer. */
1676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1677:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The data is being left in the queue, so see if there are
1679:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				any other tasks waiting for the data. */
1680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1681:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1683:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1684:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority than this task. */
1685:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1686:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
ARM GAS  /tmp/ccj2W1aG.s 			page 31


1687:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1688:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1689:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1690:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1691:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1692:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1693:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1694:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1695:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1696:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1697:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
1699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1701:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1703:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1704:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1705:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
1706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1707:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
1708:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1709:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1711:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1712:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1713:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					configure the timeout structure ready to enter the blocked
1714:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					state. */
1715:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1716:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1717:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1718:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1719:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1720:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1721:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1722:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1723:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1724:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1725:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1726:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1727:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1728:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1729:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1734:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1735:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1736:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Timeout has not expired yet, check to see if there is data in the
1737:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			queue now, and if not enter the Blocked state to wait for data. */
1738:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1739:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1740:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1741:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1742:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1743:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
ARM GAS  /tmp/ccj2W1aG.s 			page 32


1744:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1745:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1746:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1747:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1748:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1749:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1750:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1751:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1752:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1753:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There is data in the queue now, so don't enter the blocked
1755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				state, instead return to try and obtain the data. */
1756:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1757:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1759:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1760:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1761:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1762:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The timeout has expired.  If there is still no data in the queue
1763:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			exit, otherwise go back and try to read the data again. */
1764:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1765:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1766:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1767:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1768:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1769:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_PEEK_FAILED( pxQueue );
1770:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
1771:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1772:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1773:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1774:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1775:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1776:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1777:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint -restore */
1778:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1779:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1780:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1781:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1782:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1783:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1784:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1785:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
1786:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1787:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1789:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1790:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1791:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1792:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1793:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1794:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1795:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1796:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1797:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1798:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1799:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1800:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
ARM GAS  /tmp/ccj2W1aG.s 			page 33


1801:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1802:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1803:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1804:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1805:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1806:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1807:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1808:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1809:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1810:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1811:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1812:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1813:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1814:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1815:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1816:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1817:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1818:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1819:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1820:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* If the queue is locked the event list will not be modified.
1821:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1822:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			will know that an ISR has removed data while the queue was
1823:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			locked. */
1824:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( cRxLock == queueUNLOCKED )
1825:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1826:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1827:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1828:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1829:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1830:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority than us so
1831:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						force a context switch. */
1832:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1833:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1834:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1835:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1836:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1837:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1838:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1839:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1840:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1841:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1842:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1843:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1844:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1845:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1846:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1847:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1848:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1849:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1850:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1851:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1852:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1853:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1854:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was removed while it was locked. */
1855:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1856:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1857:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccj2W1aG.s 			page 34


1858:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1859:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1860:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1861:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1862:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
1863:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1864:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1865:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1866:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1867:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1869:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1870:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1871:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1872:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1873:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1874:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1877:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
1878:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1881:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1882:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1883:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1884:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1885:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1886:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1887:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1888:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1889:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1890:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1891:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1892:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1893:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1894:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1895:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1896:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1897:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1898:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1900:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1901:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1902:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1903:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1904:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1905:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1906:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1907:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			actually being removed from the queue. */
1908:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1909:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1911:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1912:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1913:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1914:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
ARM GAS  /tmp/ccj2W1aG.s 			page 35


1915:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1916:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
1917:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1918:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1919:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1920:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1921:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1922:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1923:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1924:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1925:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1926:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1927:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1928:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1931:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1932:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1933:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1934:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1935:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1936:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1937:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1938:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
1939:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1940:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1941:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1942:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1943:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1944:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1945:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
1946:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1947:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1948:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1949:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1950:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1951:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1952:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1953:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1954:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1955:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
1956:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1957:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1958:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1959:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1960:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1961:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1962:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
1963:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
1966:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1967:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
1968:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1969:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1970:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1971:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
ARM GAS  /tmp/ccj2W1aG.s 			page 36


1972:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1973:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
1974:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1975:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1976:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1977:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1978:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1979:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1980:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1981:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1982:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1983:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1984:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1985:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1986:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1987:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		again. */
1988:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vPortFree( pxQueue );
1989:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1990:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1991:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1992:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1993:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		check before attempting to free the memory. */
1994:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1995:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1996:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vPortFree( pxQueue );
1997:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1998:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1999:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2000:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2001:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2002:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2003:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#else
2004:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2005:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
2006:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
2007:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) pxQueue;
2008:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2009:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2010:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
2011:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2012:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2013:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2014:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2015:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2016:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2017:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
2018:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2019:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2020:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2021:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2022:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2023:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2024:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2025:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
2026:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2027:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
2028:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
ARM GAS  /tmp/ccj2W1aG.s 			page 37


2029:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2030:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2031:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2032:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2033:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2034:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2035:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2036:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2037:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
2038:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2039:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2040:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2041:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2042:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2043:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
2044:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2045:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2046:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
  26              		.loc 1 2046 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
2047:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxHighestPriorityOfWaitingTasks;
2048:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If a task waiting for a mutex causes the mutex holder to inherit a
2050:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		priority, but the waiting task times out, then the holder should
2051:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		disinherit the priority - but only down to the highest priority of any
2052:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		other tasks that are waiting for the same mutex.  For this purpose,
2053:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return the priority of the highest priority task that is waiting for the
2054:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		mutex. */
2055:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
  32              		.loc 1 2055 0
  33 0000 436A     		ldr	r3, [r0, #36]
  34 0002 23B1     		cbz	r3, .L3
2056:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2057:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET
  35              		.loc 1 2057 0
  36 0004 036B     		ldr	r3, [r0, #48]
  37 0006 1868     		ldr	r0, [r3]
  38              	.LVL1:
  39 0008 C0F10700 		rsb	r0, r0, #7
  40              	.LVL2:
  41 000c 7047     		bx	lr
  42              	.LVL3:
  43              	.L3:
2058:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2059:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2060:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2061:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  44              		.loc 1 2061 0
  45 000e 0020     		movs	r0, #0
  46              	.LVL4:
2062:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2063:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2064:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return uxHighestPriorityOfWaitingTasks;
ARM GAS  /tmp/ccj2W1aG.s 			page 38


2065:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
  47              		.loc 1 2065 0
  48 0010 7047     		bx	lr
  49              		.cfi_endproc
  50              	.LFE22:
  52 0012 00BF     		.section	.text.prvIsQueueFull,"ax",%progbits
  53              		.align	2
  54              		.thumb
  55              		.thumb_func
  57              	prvIsQueueFull:
  58              	.LFB28:
2066:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2067:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
2068:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2069:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2070:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
2071:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2072:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn = pdFALSE;
2073:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
2074:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2075:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function is called from a critical section. */
2076:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2077:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2078:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2079:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2080:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2081:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
2082:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2083:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2084:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2085:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The mutex is no longer being held. */
2086:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
2087:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
2088:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2089:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2090:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2091:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2092:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2093:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#endif /* configUSE_MUTEXES */
2095:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2096:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
2097:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2098:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
2099:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
2100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
2101:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
2103:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2104:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2106:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2107:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2108:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
2110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxIt
ARM GAS  /tmp/ccj2W1aG.s 			page 39


2112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
2113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
2114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
2116:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2117:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xPosition == queueOVERWRITE )
2123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2126:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* An item is not being added but overwritten, so subtract
2127:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				one from the recorded number of items in the queue so when
2128:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				one is added again below the number of recorded items remains
2129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				correct. */
2130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--uxMessagesWaiting;
2131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2132:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2133:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2134:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2138:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2139:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2140:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2141:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2142:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
2147:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2148:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
2150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2152:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char typ
2154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
2155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2158:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2159:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2160:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2161:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2162:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue
2163:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2164:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
2165:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2167:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2168:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
ARM GAS  /tmp/ccj2W1aG.s 			page 40


2169:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2170:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2171:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
2172:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
2173:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
2174:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	updated. */
2175:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
2176:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2177:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
2178:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2179:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if data was added to the queue while it was locked. */
2180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
2181:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2182:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
2183:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			blocked waiting for data to become available? */
2184:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
2185:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2186:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
2187:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2188:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
2189:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2190:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The queue is a member of a queue set, and posting to
2191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						the queue set caused a higher priority task to unblock.
2192:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						A context switch is required. */
2193:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
2194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2198:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2200:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2201:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2202:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Tasks that are removed from the event list will get
2203:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					added to the pending ready list as the scheduler is still
2204:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					suspended. */
2205:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2206:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2207:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2208:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
2209:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
2210:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
2211:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							vTaskMissedYield();
2212:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
2213:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
2214:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
2215:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
2216:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
2217:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2218:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2219:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2220:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						break;
2221:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
2225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
ARM GAS  /tmp/ccj2W1aG.s 			page 41


2226:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Tasks that are removed from the event list will get added to
2227:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
2228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2232:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority so record that
2233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						a context switch is required. */
2234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
2235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2237:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2238:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2239:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2241:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2243:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					break;
2244:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
2247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			--cTxLock;
2249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
2252:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
2254:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Do the same for the Rx lock. */
2256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
2257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
2259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
2261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2263:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskMissedYield();
2267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--cRxLock;
2274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
2278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
2282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
ARM GAS  /tmp/ccj2W1aG.s 			page 42


2283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
2284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
2285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
2288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
2292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
2294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
2296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
2300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
2303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
2306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2307:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2311:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
2312:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
2314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
2317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
2319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
2321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2327:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
2328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
  59              		.loc 1 2328 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 0
  62              		@ frame_needed = 0, uses_anonymous_args = 0
  63              	.LVL5:
  64 0000 10B5     		push	{r4, lr}
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 8
  67              		.cfi_offset 4, -8
  68              		.cfi_offset 14, -4
  69 0002 0446     		mov	r4, r0
ARM GAS  /tmp/ccj2W1aG.s 			page 43


2329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
  70              		.loc 1 2331 0
  71 0004 FFF7FEFF 		bl	vPortEnterCritical
  72              	.LVL6:
2332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  73              		.loc 1 2333 0
  74 0008 A26B     		ldr	r2, [r4, #56]
  75 000a E36B     		ldr	r3, [r4, #60]
  76 000c 9A42     		cmp	r2, r3
  77 000e 01D1     		bne	.L6
2334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
  78              		.loc 1 2335 0
  79 0010 0124     		movs	r4, #1
  80              	.LVL7:
  81 0012 00E0     		b	.L5
  82              	.LVL8:
  83              	.L6:
2336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
  84              		.loc 1 2339 0
  85 0014 0024     		movs	r4, #0
  86              	.LVL9:
  87              	.L5:
2340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
  88              		.loc 1 2342 0
  89 0016 FFF7FEFF 		bl	vPortExitCritical
  90              	.LVL10:
2343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2345:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
  91              		.loc 1 2345 0
  92 001a 2046     		mov	r0, r4
  93 001c 10BD     		pop	{r4, pc}
  94              		.cfi_endproc
  95              	.LFE28:
  97 001e 00BF     		.section	.text.prvIsQueueEmpty,"ax",%progbits
  98              		.align	2
  99              		.thumb
 100              		.thumb_func
 102              	prvIsQueueEmpty:
 103              	.LFB26:
2288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 104              		.loc 1 2288 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              	.LVL11:
 109 0000 10B5     		push	{r4, lr}
 110              	.LCFI1:
ARM GAS  /tmp/ccj2W1aG.s 			page 44


 111              		.cfi_def_cfa_offset 8
 112              		.cfi_offset 4, -8
 113              		.cfi_offset 14, -4
 114 0002 0446     		mov	r4, r0
2291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 115              		.loc 1 2291 0
 116 0004 FFF7FEFF 		bl	vPortEnterCritical
 117              	.LVL12:
2293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 118              		.loc 1 2293 0
 119 0008 A36B     		ldr	r3, [r4, #56]
 120 000a 0BB9     		cbnz	r3, .L10
2295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 121              		.loc 1 2295 0
 122 000c 0124     		movs	r4, #1
 123              	.LVL13:
 124 000e 00E0     		b	.L9
 125              	.LVL14:
 126              	.L10:
2299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 127              		.loc 1 2299 0
 128 0010 0024     		movs	r4, #0
 129              	.LVL15:
 130              	.L9:
2302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 131              		.loc 1 2302 0
 132 0012 FFF7FEFF 		bl	vPortExitCritical
 133              	.LVL16:
2305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 134              		.loc 1 2305 0
 135 0016 2046     		mov	r0, r4
 136 0018 10BD     		pop	{r4, pc}
 137              		.cfi_endproc
 138              	.LFE26:
 140 001a 00BF     		.section	.text.prvCopyDataToQueue,"ax",%progbits
 141              		.align	2
 142              		.thumb
 143              		.thumb_func
 145              	prvCopyDataToQueue:
 146              	.LFB23:
2071:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn = pdFALSE;
 147              		.loc 1 2071 0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 151              	.LVL17:
 152 0000 70B5     		push	{r4, r5, r6, lr}
 153              	.LCFI2:
 154              		.cfi_def_cfa_offset 16
 155              		.cfi_offset 4, -16
 156              		.cfi_offset 5, -12
 157              		.cfi_offset 6, -8
 158              		.cfi_offset 14, -4
 159 0002 0446     		mov	r4, r0
 160 0004 1646     		mov	r6, r2
 161              	.LVL18:
2077:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccj2W1aG.s 			page 45


 162              		.loc 1 2077 0
 163 0006 856B     		ldr	r5, [r0, #56]
 164              	.LVL19:
2079:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 165              		.loc 1 2079 0
 166 0008 026C     		ldr	r2, [r0, #64]
 167              	.LVL20:
 168 000a 3AB9     		cbnz	r2, .L13
2083:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 169              		.loc 1 2083 0
 170 000c 0368     		ldr	r3, [r0]
 171 000e 43BB     		cbnz	r3, .L17
2086:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 172              		.loc 1 2086 0
 173 0010 8068     		ldr	r0, [r0, #8]
 174              	.LVL21:
 175 0012 FFF7FEFF 		bl	xTaskPriorityDisinherit
 176              	.LVL22:
2087:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 177              		.loc 1 2087 0
 178 0016 0023     		movs	r3, #0
 179 0018 A360     		str	r3, [r4, #8]
 180 001a 29E0     		b	.L14
 181              	.LVL23:
 182              	.L13:
2096:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 183              		.loc 1 2096 0
 184 001c 6EB9     		cbnz	r6, .L15
2098:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
 185              		.loc 1 2098 0
 186 001e 4068     		ldr	r0, [r0, #4]
 187              	.LVL24:
 188 0020 FFF7FEFF 		bl	memcpy
 189              	.LVL25:
2099:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
 190              		.loc 1 2099 0
 191 0024 6268     		ldr	r2, [r4, #4]
 192 0026 236C     		ldr	r3, [r4, #64]
 193 0028 1344     		add	r3, r3, r2
 194 002a 6360     		str	r3, [r4, #4]
2100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 195              		.loc 1 2100 0
 196 002c A268     		ldr	r2, [r4, #8]
 197 002e 9342     		cmp	r3, r2
 198 0030 19D3     		bcc	.L18
2102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 199              		.loc 1 2102 0
 200 0032 2368     		ldr	r3, [r4]
 201 0034 6360     		str	r3, [r4, #4]
2072:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
 202              		.loc 1 2072 0
 203 0036 0020     		movs	r0, #0
 204 0038 1AE0     		b	.L14
 205              	.LVL26:
 206              	.L15:
2111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 207              		.loc 1 2111 0
ARM GAS  /tmp/ccj2W1aG.s 			page 46


 208 003a C068     		ldr	r0, [r0, #12]
 209              	.LVL27:
 210 003c FFF7FEFF 		bl	memcpy
 211              	.LVL28:
2112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
 212              		.loc 1 2112 0
 213 0040 236C     		ldr	r3, [r4, #64]
 214 0042 5B42     		negs	r3, r3
 215 0044 E268     		ldr	r2, [r4, #12]
 216 0046 1A44     		add	r2, r2, r3
 217 0048 E260     		str	r2, [r4, #12]
2113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 218              		.loc 1 2113 0
 219 004a 2168     		ldr	r1, [r4]
 220 004c 8A42     		cmp	r2, r1
 221 004e 02D2     		bcs	.L16
2115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 222              		.loc 1 2115 0
 223 0050 A268     		ldr	r2, [r4, #8]
 224 0052 1344     		add	r3, r3, r2
 225 0054 E360     		str	r3, [r4, #12]
 226              	.L16:
2122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 227              		.loc 1 2122 0
 228 0056 022E     		cmp	r6, #2
 229 0058 07D1     		bne	.L19
2124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 230              		.loc 1 2124 0
 231 005a 45B1     		cbz	r5, .L20
2130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 232              		.loc 1 2130 0
 233 005c 013D     		subs	r5, r5, #1
 234              	.LVL29:
2072:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
 235              		.loc 1 2072 0
 236 005e 0020     		movs	r0, #0
 237 0060 06E0     		b	.L14
 238              	.LVL30:
 239              	.L17:
 240 0062 0020     		movs	r0, #0
 241              	.LVL31:
 242 0064 04E0     		b	.L14
 243              	.LVL32:
 244              	.L18:
 245 0066 0020     		movs	r0, #0
 246 0068 02E0     		b	.L14
 247              	.L19:
 248 006a 0020     		movs	r0, #0
 249 006c 00E0     		b	.L14
 250              	.L20:
 251 006e 0020     		movs	r0, #0
 252              	.LVL33:
 253              	.L14:
2143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 254              		.loc 1 2143 0
 255 0070 0135     		adds	r5, r5, #1
 256              	.LVL34:
ARM GAS  /tmp/ccj2W1aG.s 			page 47


 257 0072 A563     		str	r5, [r4, #56]
2146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 258              		.loc 1 2146 0
 259 0074 70BD     		pop	{r4, r5, r6, pc}
 260              		.cfi_endproc
 261              	.LFE23:
 263 0076 00BF     		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 264              		.align	2
 265              		.thumb
 266              		.thumb_func
 268              	prvCopyDataFromQueue:
 269              	.LFB24:
2150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 270              		.loc 1 2150 0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 0
 273              		@ frame_needed = 0, uses_anonymous_args = 0
 274              	.LVL35:
2151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 275              		.loc 1 2151 0
 276 0000 026C     		ldr	r2, [r0, #64]
 277 0002 72B1     		cbz	r2, .L26
2150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 278              		.loc 1 2150 0
 279 0004 10B5     		push	{r4, lr}
 280              	.LCFI3:
 281              		.cfi_def_cfa_offset 8
 282              		.cfi_offset 4, -8
 283              		.cfi_offset 14, -4
2153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
 284              		.loc 1 2153 0
 285 0006 C368     		ldr	r3, [r0, #12]
 286 0008 1344     		add	r3, r3, r2
 287 000a C360     		str	r3, [r0, #12]
2154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 288              		.loc 1 2154 0
 289 000c 8468     		ldr	r4, [r0, #8]
 290 000e A342     		cmp	r3, r4
 291 0010 01D3     		bcc	.L24
2156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 292              		.loc 1 2156 0
 293 0012 0368     		ldr	r3, [r0]
 294 0014 C360     		str	r3, [r0, #12]
 295              	.L24:
 296 0016 0346     		mov	r3, r0
2162:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 297              		.loc 1 2162 0
 298 0018 0846     		mov	r0, r1
 299              	.LVL36:
 300 001a D968     		ldr	r1, [r3, #12]
 301              	.LVL37:
 302 001c FFF7FEFF 		bl	memcpy
 303              	.LVL38:
 304 0020 10BD     		pop	{r4, pc}
 305              	.LVL39:
 306              	.L26:
 307              	.LCFI4:
ARM GAS  /tmp/ccj2W1aG.s 			page 48


 308              		.cfi_def_cfa_offset 0
 309              		.cfi_restore 4
 310              		.cfi_restore 14
 311 0022 7047     		bx	lr
 312              		.cfi_endproc
 313              	.LFE24:
 315              		.section	.text.prvUnlockQueue,"ax",%progbits
 316              		.align	2
 317              		.thumb
 318              		.thumb_func
 320              	prvUnlockQueue:
 321              	.LFB25:
2168:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 322              		.loc 1 2168 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326              	.LVL40:
 327 0000 38B5     		push	{r3, r4, r5, lr}
 328              	.LCFI5:
 329              		.cfi_def_cfa_offset 16
 330              		.cfi_offset 3, -16
 331              		.cfi_offset 4, -12
 332              		.cfi_offset 5, -8
 333              		.cfi_offset 14, -4
 334 0002 0546     		mov	r5, r0
2175:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 335              		.loc 1 2175 0
 336 0004 FFF7FEFF 		bl	vPortEnterCritical
 337              	.LVL41:
 338              	.LBB93:
2177:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 339              		.loc 1 2177 0
 340 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 341 000c E4B2     		uxtb	r4, r4
 342              	.LVL42:
2180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 343              		.loc 1 2180 0
 344 000e 0AE0     		b	.L28
 345              	.L31:
2228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 346              		.loc 1 2228 0
 347 0010 6B6A     		ldr	r3, [r5, #36]
 348 0012 5BB1     		cbz	r3, .L29
2230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 349              		.loc 1 2230 0
 350 0014 05F12400 		add	r0, r5, #36
 351 0018 FFF7FEFF 		bl	xTaskRemoveFromEventList
 352              	.LVL43:
 353 001c 08B1     		cbz	r0, .L30
2234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 354              		.loc 1 2234 0
 355 001e FFF7FEFF 		bl	vTaskMissedYield
 356              	.LVL44:
 357              	.L30:
2248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 358              		.loc 1 2248 0
ARM GAS  /tmp/ccj2W1aG.s 			page 49


 359 0022 013C     		subs	r4, r4, #1
 360              	.LVL45:
 361 0024 E4B2     		uxtb	r4, r4
 362              	.LVL46:
 363              	.L28:
2180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 364              		.loc 1 2180 0
 365 0026 63B2     		sxtb	r3, r4
 366 0028 002B     		cmp	r3, #0
 367 002a F1DC     		bgt	.L31
 368              	.L29:
2251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 369              		.loc 1 2251 0
 370 002c FF23     		movs	r3, #255
 371 002e 85F84530 		strb	r3, [r5, #69]
 372              	.LBE93:
2253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 373              		.loc 1 2253 0
 374 0032 FFF7FEFF 		bl	vPortExitCritical
 375              	.LVL47:
2256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 376              		.loc 1 2256 0
 377 0036 FFF7FEFF 		bl	vPortEnterCritical
 378              	.LVL48:
 379              	.LBB94:
2258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 380              		.loc 1 2258 0
 381 003a 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 382              	.LVL49:
 383 003e E4B2     		uxtb	r4, r4
 384              	.LVL50:
2260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 385              		.loc 1 2260 0
 386 0040 0AE0     		b	.L32
 387              	.L35:
2262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 388              		.loc 1 2262 0
 389 0042 2B69     		ldr	r3, [r5, #16]
 390 0044 5BB1     		cbz	r3, .L33
2264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 391              		.loc 1 2264 0
 392 0046 05F11000 		add	r0, r5, #16
 393 004a FFF7FEFF 		bl	xTaskRemoveFromEventList
 394              	.LVL51:
 395 004e 08B1     		cbz	r0, .L34
2266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 396              		.loc 1 2266 0
 397 0050 FFF7FEFF 		bl	vTaskMissedYield
 398              	.LVL52:
 399              	.L34:
2273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 400              		.loc 1 2273 0
 401 0054 013C     		subs	r4, r4, #1
 402              	.LVL53:
 403 0056 E4B2     		uxtb	r4, r4
 404              	.LVL54:
 405              	.L32:
ARM GAS  /tmp/ccj2W1aG.s 			page 50


2260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 406              		.loc 1 2260 0
 407 0058 63B2     		sxtb	r3, r4
 408 005a 002B     		cmp	r3, #0
 409 005c F1DC     		bgt	.L35
 410              	.L33:
2281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 411              		.loc 1 2281 0
 412 005e FF23     		movs	r3, #255
 413 0060 85F84430 		strb	r3, [r5, #68]
 414              	.LBE94:
2283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 415              		.loc 1 2283 0
 416 0064 FFF7FEFF 		bl	vPortExitCritical
 417              	.LVL55:
 418 0068 38BD     		pop	{r3, r4, r5, pc}
 419              		.cfi_endproc
 420              	.LFE25:
 422 006a 00BF     		.section	.text.xQueueGenericReset,"ax",%progbits
 423              		.align	2
 424              		.global	xQueueGenericReset
 425              		.thumb
 426              		.thumb_func
 428              	xQueueGenericReset:
 429              	.LFB5:
 256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 430              		.loc 1 256 0
 431              		.cfi_startproc
 432              		@ args = 0, pretend = 0, frame = 0
 433              		@ frame_needed = 0, uses_anonymous_args = 0
 434              	.LVL56:
 435 0000 38B5     		push	{r3, r4, r5, lr}
 436              	.LCFI6:
 437              		.cfi_def_cfa_offset 16
 438              		.cfi_offset 3, -16
 439              		.cfi_offset 4, -12
 440              		.cfi_offset 5, -8
 441              		.cfi_offset 14, -4
 442              	.LVL57:
 259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 443              		.loc 1 259 0
 444 0002 40B9     		cbnz	r0, .L38
 445              	.LBB95:
 446              	.LBB96:
 447              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.1.0
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
ARM GAS  /tmp/ccj2W1aG.s 			page 51


  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
ARM GAS  /tmp/ccj2W1aG.s 			page 52


  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  /tmp/ccj2W1aG.s 			page 53


 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
ARM GAS  /tmp/ccj2W1aG.s 			page 54


 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 448              		.loc 2 195 0
 449              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 450 0004 4FF05003 			mov r3, #80												
 451 0008 83F31188 		msr basepri, r3											
 452 000c BFF36F8F 		isb														
 453 0010 BFF34F8F 		dsb														
 454              	
 455              	@ 0 "" 2
 456              	.LVL58:
 457              		.thumb
 458              	.L39:
 459              	.LBE96:
 460              	.LBE95:
 259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 461              		.loc 1 259 0 discriminator 1
 462 0014 FEE7     		b	.L39
 463              	.L38:
 464 0016 0446     		mov	r4, r0
 465 0018 0D46     		mov	r5, r1
 261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 466              		.loc 1 261 0
 467 001a FFF7FEFF 		bl	vPortEnterCritical
 468              	.LVL59:
 263:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 469              		.loc 1 263 0
 470 001e 2168     		ldr	r1, [r4]
 471 0020 E26B     		ldr	r2, [r4, #60]
 472 0022 236C     		ldr	r3, [r4, #64]
 473 0024 03FB0210 		mla	r0, r3, r2, r1
 474 0028 A060     		str	r0, [r4, #8]
 264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 475              		.loc 1 264 0
 476 002a 0020     		movs	r0, #0
 477 002c A063     		str	r0, [r4, #56]
 265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 478              		.loc 1 265 0
 479 002e 6160     		str	r1, [r4, #4]
 266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 480              		.loc 1 266 0
 481 0030 013A     		subs	r2, r2, #1
 482 0032 02FB0313 		mla	r3, r2, r3, r1
 483 0036 E360     		str	r3, [r4, #12]
 267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 484              		.loc 1 267 0
 485 0038 FF23     		movs	r3, #255
ARM GAS  /tmp/ccj2W1aG.s 			page 55


 486 003a 84F84430 		strb	r3, [r4, #68]
 268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 487              		.loc 1 268 0
 488 003e 84F84530 		strb	r3, [r4, #69]
 270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 489              		.loc 1 270 0
 490 0042 7DB9     		cbnz	r5, .L40
 277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 491              		.loc 1 277 0
 492 0044 2369     		ldr	r3, [r4, #16]
 493 0046 ABB1     		cbz	r3, .L41
 279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 494              		.loc 1 279 0
 495 0048 04F11000 		add	r0, r4, #16
 496 004c FFF7FEFF 		bl	xTaskRemoveFromEventList
 497              	.LVL60:
 498 0050 80B1     		cbz	r0, .L41
 281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 499              		.loc 1 281 0
 500 0052 4FF08052 		mov	r2, #268435456
 501 0056 094B     		ldr	r3, .L43
 502 0058 1A60     		str	r2, [r3]
 503              	@ 281 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 504 005a BFF34F8F 		dsb
 505              	@ 0 "" 2
 506              	@ 281 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 507 005e BFF36F8F 		isb
 508              	@ 0 "" 2
 509              		.thumb
 510 0062 07E0     		b	.L41
 511              	.L40:
 296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 512              		.loc 1 296 0
 513 0064 04F11000 		add	r0, r4, #16
 514 0068 FFF7FEFF 		bl	vListInitialise
 515              	.LVL61:
 297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 516              		.loc 1 297 0
 517 006c 04F12400 		add	r0, r4, #36
 518 0070 FFF7FEFF 		bl	vListInitialise
 519              	.LVL62:
 520              	.L41:
 300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 521              		.loc 1 300 0
 522 0074 FFF7FEFF 		bl	vPortExitCritical
 523              	.LVL63:
 305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 524              		.loc 1 305 0
 525 0078 0120     		movs	r0, #1
 526 007a 38BD     		pop	{r3, r4, r5, pc}
 527              	.LVL64:
 528              	.L44:
 529              		.align	2
 530              	.L43:
 531 007c 04ED00E0 		.word	-536810236
 532              		.cfi_endproc
 533              	.LFE5:
ARM GAS  /tmp/ccj2W1aG.s 			page 56


 535              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 536              		.align	2
 537              		.thumb
 538              		.thumb_func
 540              	prvInitialiseNewQueue:
 541              	.LFB7:
 430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 542              		.loc 1 430 0
 543              		.cfi_startproc
 544              		@ args = 4, pretend = 0, frame = 0
 545              		@ frame_needed = 0, uses_anonymous_args = 0
 546              	.LVL65:
 547 0000 10B5     		push	{r4, lr}
 548              	.LCFI7:
 549              		.cfi_def_cfa_offset 8
 550              		.cfi_offset 4, -8
 551              		.cfi_offset 14, -4
 552 0002 029B     		ldr	r3, [sp, #8]
 553              	.LVL66:
 435:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 554              		.loc 1 435 0
 555 0004 0C46     		mov	r4, r1
 556 0006 09B9     		cbnz	r1, .L46
 441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 557              		.loc 1 441 0
 558 0008 1B60     		str	r3, [r3]
 559 000a 00E0     		b	.L47
 560              	.L46:
 446:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 561              		.loc 1 446 0
 562 000c 1A60     		str	r2, [r3]
 563              	.L47:
 451:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 564              		.loc 1 451 0
 565 000e D863     		str	r0, [r3, #60]
 452:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 566              		.loc 1 452 0
 567 0010 1C64     		str	r4, [r3, #64]
 453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 568              		.loc 1 453 0
 569 0012 1846     		mov	r0, r3
 570              	.LVL67:
 571 0014 0121     		movs	r1, #1
 572              	.LVL68:
 573 0016 FFF7FEFF 		bl	xQueueGenericReset
 574              	.LVL69:
 575 001a 10BD     		pop	{r4, pc}
 576              		.cfi_endproc
 577              	.LFE7:
 579              		.section	.text.xQueueGenericCreate,"ax",%progbits
 580              		.align	2
 581              		.global	xQueueGenericCreate
 582              		.thumb
 583              		.thumb_func
 585              	xQueueGenericCreate:
 586              	.LFB6:
 369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
ARM GAS  /tmp/ccj2W1aG.s 			page 57


 587              		.loc 1 369 0
 588              		.cfi_startproc
 589              		@ args = 0, pretend = 0, frame = 0
 590              		@ frame_needed = 0, uses_anonymous_args = 0
 591              	.LVL70:
 374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 592              		.loc 1 374 0
 593 0000 40B9     		cbnz	r0, .L50
 594              	.LBB97:
 595              	.LBB98:
 596              		.loc 2 195 0
 597              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 598 0002 4FF05003 			mov r3, #80												
 599 0006 83F31188 		msr basepri, r3											
 600 000a BFF36F8F 		isb														
 601 000e BFF34F8F 		dsb														
 602              	
 603              	@ 0 "" 2
 604              	.LVL71:
 605              		.thumb
 606              	.L51:
 607              	.LBE98:
 608              	.LBE97:
 374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 609              		.loc 1 374 0 discriminator 1
 610 0012 FEE7     		b	.L51
 611              	.L50:
 369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 612              		.loc 1 369 0
 613 0014 F0B5     		push	{r4, r5, r6, r7, lr}
 614              	.LCFI8:
 615              		.cfi_def_cfa_offset 20
 616              		.cfi_offset 4, -20
 617              		.cfi_offset 5, -16
 618              		.cfi_offset 6, -12
 619              		.cfi_offset 7, -8
 620              		.cfi_offset 14, -4
 621 0016 83B0     		sub	sp, sp, #12
 622              	.LCFI9:
 623              		.cfi_def_cfa_offset 32
 624 0018 0346     		mov	r3, r0
 376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 625              		.loc 1 376 0
 626 001a 11B1     		cbz	r1, .L54
 385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 627              		.loc 1 385 0
 628 001c 01FB00F0 		mul	r0, r1, r0
 629              	.LVL72:
 630 0020 00E0     		b	.L52
 631              	.LVL73:
 632              	.L54:
 379:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 633              		.loc 1 379 0
 634 0022 0020     		movs	r0, #0
 635              	.LVL74:
 636              	.L52:
 637 0024 1D46     		mov	r5, r3
ARM GAS  /tmp/ccj2W1aG.s 			page 58


 638 0026 1746     		mov	r7, r2
 639 0028 0C46     		mov	r4, r1
 640              	.LVL75:
 397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 641              		.loc 1 397 0
 642 002a 4830     		adds	r0, r0, #72
 643              	.LVL76:
 644 002c FFF7FEFF 		bl	pvPortMalloc
 645              	.LVL77:
 399:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 646              		.loc 1 399 0
 647 0030 0646     		mov	r6, r0
 648 0032 38B1     		cbz	r0, .L53
 649              	.LVL78:
 415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 650              		.loc 1 415 0
 651 0034 0090     		str	r0, [sp]
 652 0036 2846     		mov	r0, r5
 653              	.LVL79:
 654 0038 2146     		mov	r1, r4
 655 003a 06F14802 		add	r2, r6, #72
 656              	.LVL80:
 657 003e 3B46     		mov	r3, r7
 658 0040 FFF7FEFF 		bl	prvInitialiseNewQueue
 659              	.LVL81:
 660              	.L53:
 424:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 661              		.loc 1 424 0
 662 0044 3046     		mov	r0, r6
 663 0046 03B0     		add	sp, sp, #12
 664              	.LCFI10:
 665              		.cfi_def_cfa_offset 20
 666              		@ sp needed
 667 0048 F0BD     		pop	{r4, r5, r6, r7, pc}
 668              		.cfi_endproc
 669              	.LFE6:
 671              		.section	.text.xQueueGenericSend,"ax",%progbits
 672              		.align	2
 673              		.global	xQueueGenericSend
 674              		.thumb
 675              		.thumb_func
 677              	xQueueGenericSend:
 678              	.LFB10:
 748:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 679              		.loc 1 748 0
 680              		.cfi_startproc
 681              		@ args = 0, pretend = 0, frame = 16
 682              		@ frame_needed = 0, uses_anonymous_args = 0
 683              	.LVL82:
 684 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 685              	.LCFI11:
 686              		.cfi_def_cfa_offset 20
 687              		.cfi_offset 4, -20
 688              		.cfi_offset 5, -16
 689              		.cfi_offset 6, -12
 690              		.cfi_offset 7, -8
 691              		.cfi_offset 14, -4
ARM GAS  /tmp/ccj2W1aG.s 			page 59


 692 0002 85B0     		sub	sp, sp, #20
 693              	.LCFI12:
 694              		.cfi_def_cfa_offset 40
 695 0004 0192     		str	r2, [sp, #4]
 696              	.LVL83:
 753:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 697              		.loc 1 753 0
 698 0006 40B9     		cbnz	r0, .L57
 699              	.LBB99:
 700              	.LBB100:
 701              		.loc 2 195 0
 702              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 703 0008 4FF05003 			mov r3, #80												
 704 000c 83F31188 		msr basepri, r3											
 705 0010 BFF36F8F 		isb														
 706 0014 BFF34F8F 		dsb														
 707              	
 708              	@ 0 "" 2
 709              	.LVL84:
 710              		.thumb
 711              	.L58:
 712              	.LBE100:
 713              	.LBE99:
 753:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 714              		.loc 1 753 0 discriminator 1
 715 0018 FEE7     		b	.L58
 716              	.LVL85:
 717              	.L57:
 718 001a 0446     		mov	r4, r0
 754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 719              		.loc 1 754 0
 720 001c 19B9     		cbnz	r1, .L80
 754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 721              		.loc 1 754 0 is_stmt 0 discriminator 2
 722 001e 026C     		ldr	r2, [r0, #64]
 723              	.LVL86:
 724 0020 1AB9     		cbnz	r2, .L81
 754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 725              		.loc 1 754 0
 726 0022 0122     		movs	r2, #1
 727 0024 02E0     		b	.L59
 728              	.LVL87:
 729              	.L80:
 730 0026 0122     		movs	r2, #1
 731              	.LVL88:
 732 0028 00E0     		b	.L59
 733              	.L81:
 734 002a 0022     		movs	r2, #0
 735              	.L59:
 754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 736              		.loc 1 754 0 discriminator 6
 737 002c 42B9     		cbnz	r2, .L60
 738              	.LBB101:
 739              	.LBB102:
 740              		.loc 2 195 0 is_stmt 1
 741              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 742 002e 4FF05003 			mov r3, #80												
ARM GAS  /tmp/ccj2W1aG.s 			page 60


 743 0032 83F31188 		msr basepri, r3											
 744 0036 BFF36F8F 		isb														
 745 003a BFF34F8F 		dsb														
 746              	
 747              	@ 0 "" 2
 748              	.LVL89:
 749              		.thumb
 750              	.L61:
 751              	.LBE102:
 752              	.LBE101:
 754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 753              		.loc 1 754 0 discriminator 2
 754 003e FEE7     		b	.L61
 755              	.LVL90:
 756              	.L60:
 755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 757              		.loc 1 755 0
 758 0040 022B     		cmp	r3, #2
 759 0042 03D1     		bne	.L82
 755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 760              		.loc 1 755 0 is_stmt 0 discriminator 2
 761 0044 E26B     		ldr	r2, [r4, #60]
 762 0046 012A     		cmp	r2, #1
 763 0048 02D1     		bne	.L83
 764 004a 02E0     		b	.L62
 765              	.L82:
 755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 766              		.loc 1 755 0
 767 004c 0122     		movs	r2, #1
 768 004e 00E0     		b	.L62
 769              	.L83:
 770 0050 0022     		movs	r2, #0
 771              	.L62:
 755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 772              		.loc 1 755 0 discriminator 6
 773 0052 42B9     		cbnz	r2, .L63
 774              	.LBB103:
 775              	.LBB104:
 776              		.loc 2 195 0 is_stmt 1
 777              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 778 0054 4FF05003 			mov r3, #80												
 779 0058 83F31188 		msr basepri, r3											
 780 005c BFF36F8F 		isb														
 781 0060 BFF34F8F 		dsb														
 782              	
 783              	@ 0 "" 2
 784              	.LVL91:
 785              		.thumb
 786              	.L64:
 787              	.LBE104:
 788              	.LBE103:
 755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 789              		.loc 1 755 0 discriminator 3
 790 0064 FEE7     		b	.L64
 791              	.LVL92:
 792              	.L63:
 793 0066 1D46     		mov	r5, r3
ARM GAS  /tmp/ccj2W1aG.s 			page 61


 794 0068 0E46     		mov	r6, r1
 758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 795              		.loc 1 758 0
 796 006a FFF7FEFF 		bl	xTaskGetSchedulerState
 797              	.LVL93:
 798 006e 18B9     		cbnz	r0, .L84
 758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 799              		.loc 1 758 0 is_stmt 0 discriminator 2
 800 0070 019B     		ldr	r3, [sp, #4]
 801 0072 1BB9     		cbnz	r3, .L85
 758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 802              		.loc 1 758 0
 803 0074 0123     		movs	r3, #1
 804 0076 02E0     		b	.L65
 805              	.L84:
 806 0078 0123     		movs	r3, #1
 807 007a 00E0     		b	.L65
 808              	.L85:
 809 007c 0023     		movs	r3, #0
 810              	.L65:
 758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 811              		.loc 1 758 0 discriminator 6
 812 007e 43B9     		cbnz	r3, .L86
 813              	.LBB105:
 814              	.LBB106:
 815              		.loc 2 195 0 is_stmt 1
 816              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 817 0080 4FF05003 			mov r3, #80												
 818 0084 83F31188 		msr basepri, r3											
 819 0088 BFF36F8F 		isb														
 820 008c BFF34F8F 		dsb														
 821              	
 822              	@ 0 "" 2
 823              	.LVL94:
 824              		.thumb
 825              	.L67:
 826              	.LBE106:
 827              	.LBE105:
 758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 828              		.loc 1 758 0 discriminator 4
 829 0090 FEE7     		b	.L67
 830              	.L86:
 831 0092 0027     		movs	r7, #0
 832              	.LVL95:
 833              	.L66:
 768:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 834              		.loc 1 768 0
 835 0094 FFF7FEFF 		bl	vPortEnterCritical
 836              	.LVL96:
 774:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 837              		.loc 1 774 0
 838 0098 A26B     		ldr	r2, [r4, #56]
 839 009a E36B     		ldr	r3, [r4, #60]
 840 009c 9A42     		cmp	r2, r3
 841 009e 01D3     		bcc	.L68
 774:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 842              		.loc 1 774 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccj2W1aG.s 			page 62


 843 00a0 022D     		cmp	r5, #2
 844 00a2 21D1     		bne	.L69
 845              	.L68:
 840:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 846              		.loc 1 840 0 is_stmt 1
 847 00a4 2046     		mov	r0, r4
 848 00a6 3146     		mov	r1, r6
 849 00a8 2A46     		mov	r2, r5
 850 00aa FFF7FEFF 		bl	prvCopyDataToQueue
 851              	.LVL97:
 844:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 852              		.loc 1 844 0
 853 00ae 636A     		ldr	r3, [r4, #36]
 854 00b0 6BB1     		cbz	r3, .L70
 846:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 855              		.loc 1 846 0
 856 00b2 04F12400 		add	r0, r4, #36
 857              	.LVL98:
 858 00b6 FFF7FEFF 		bl	xTaskRemoveFromEventList
 859              	.LVL99:
 860 00ba 88B1     		cbz	r0, .L71
 852:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 861              		.loc 1 852 0
 862 00bc 4FF08052 		mov	r2, #268435456
 863 00c0 324B     		ldr	r3, .L88
 864 00c2 1A60     		str	r2, [r3]
 865              	@ 852 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 866 00c4 BFF34F8F 		dsb
 867              	@ 0 "" 2
 868              	@ 852 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 869 00c8 BFF36F8F 		isb
 870              	@ 0 "" 2
 871              		.thumb
 872 00cc 08E0     		b	.L71
 873              	.LVL100:
 874              	.L70:
 859:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 875              		.loc 1 859 0
 876 00ce 38B1     		cbz	r0, .L71
 865:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 877              		.loc 1 865 0
 878 00d0 4FF08052 		mov	r2, #268435456
 879 00d4 2D4B     		ldr	r3, .L88
 880 00d6 1A60     		str	r2, [r3]
 881              	@ 865 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 882 00d8 BFF34F8F 		dsb
 883              	@ 0 "" 2
 884              	@ 865 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 885 00dc BFF36F8F 		isb
 886              	@ 0 "" 2
 887              	.LVL101:
 888              		.thumb
 889              	.L71:
 874:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 890              		.loc 1 874 0
 891 00e0 FFF7FEFF 		bl	vPortExitCritical
 892              	.LVL102:
ARM GAS  /tmp/ccj2W1aG.s 			page 63


 875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 893              		.loc 1 875 0
 894 00e4 0120     		movs	r0, #1
 895 00e6 4EE0     		b	.L72
 896              	.L69:
 879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 897              		.loc 1 879 0
 898 00e8 019B     		ldr	r3, [sp, #4]
 899 00ea 1BB9     		cbnz	r3, .L73
 883:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 900              		.loc 1 883 0
 901 00ec FFF7FEFF 		bl	vPortExitCritical
 902              	.LVL103:
 888:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 903              		.loc 1 888 0
 904 00f0 0020     		movs	r0, #0
 905 00f2 48E0     		b	.L72
 906              	.L73:
 890:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 907              		.loc 1 890 0
 908 00f4 1FB9     		cbnz	r7, .L74
 894:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 909              		.loc 1 894 0
 910 00f6 02A8     		add	r0, sp, #8
 911 00f8 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 912              	.LVL104:
 895:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 913              		.loc 1 895 0
 914 00fc 0127     		movs	r7, #1
 915              	.LVL105:
 916              	.L74:
 904:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 917              		.loc 1 904 0
 918 00fe FFF7FEFF 		bl	vPortExitCritical
 919              	.LVL106:
 909:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 920              		.loc 1 909 0
 921 0102 FFF7FEFF 		bl	vTaskSuspendAll
 922              	.LVL107:
 910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 923              		.loc 1 910 0
 924 0106 FFF7FEFF 		bl	vPortEnterCritical
 925              	.LVL108:
 926 010a 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 927 010e 5BB2     		sxtb	r3, r3
 928 0110 B3F1FF3F 		cmp	r3, #-1
 929 0114 02D1     		bne	.L75
 910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 930              		.loc 1 910 0 is_stmt 0 discriminator 1
 931 0116 0023     		movs	r3, #0
 932 0118 84F84430 		strb	r3, [r4, #68]
 933              	.L75:
 910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 934              		.loc 1 910 0 discriminator 3
 935 011c 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 936 0120 5BB2     		sxtb	r3, r3
 937 0122 B3F1FF3F 		cmp	r3, #-1
ARM GAS  /tmp/ccj2W1aG.s 			page 64


 938 0126 02D1     		bne	.L76
 910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 939              		.loc 1 910 0 discriminator 4
 940 0128 0023     		movs	r3, #0
 941 012a 84F84530 		strb	r3, [r4, #69]
 942              	.L76:
 910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 943              		.loc 1 910 0 discriminator 6
 944 012e FFF7FEFF 		bl	vPortExitCritical
 945              	.LVL109:
 913:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 946              		.loc 1 913 0 is_stmt 1 discriminator 6
 947 0132 02A8     		add	r0, sp, #8
 948 0134 01A9     		add	r1, sp, #4
 949              	.LVL110:
 950 0136 FFF7FEFF 		bl	xTaskCheckForTimeOut
 951              	.LVL111:
 952 013a F0B9     		cbnz	r0, .L77
 915:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 953              		.loc 1 915 0
 954 013c 2046     		mov	r0, r4
 955 013e FFF7FEFF 		bl	prvIsQueueFull
 956              	.LVL112:
 957 0142 A0B1     		cbz	r0, .L78
 918:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 958              		.loc 1 918 0
 959 0144 04F11000 		add	r0, r4, #16
 960 0148 0199     		ldr	r1, [sp, #4]
 961 014a FFF7FEFF 		bl	vTaskPlaceOnEventList
 962              	.LVL113:
 925:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 963              		.loc 1 925 0
 964 014e 2046     		mov	r0, r4
 965 0150 FFF7FEFF 		bl	prvUnlockQueue
 966              	.LVL114:
 932:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 967              		.loc 1 932 0
 968 0154 FFF7FEFF 		bl	xTaskResumeAll
 969              	.LVL115:
 970 0158 0028     		cmp	r0, #0
 971 015a 9BD1     		bne	.L66
 934:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 972              		.loc 1 934 0
 973 015c 4FF08052 		mov	r2, #268435456
 974 0160 0A4B     		ldr	r3, .L88
 975 0162 1A60     		str	r2, [r3]
 976              	@ 934 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 977 0164 BFF34F8F 		dsb
 978              	@ 0 "" 2
 979              	@ 934 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 980 0168 BFF36F8F 		isb
 981              	@ 0 "" 2
 982              		.thumb
 983 016c 92E7     		b	.L66
 984              	.L78:
 940:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 985              		.loc 1 940 0
ARM GAS  /tmp/ccj2W1aG.s 			page 65


 986 016e 2046     		mov	r0, r4
 987 0170 FFF7FEFF 		bl	prvUnlockQueue
 988              	.LVL116:
 941:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 989              		.loc 1 941 0
 990 0174 FFF7FEFF 		bl	xTaskResumeAll
 991              	.LVL117:
 992 0178 8CE7     		b	.L66
 993              	.L77:
 947:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 994              		.loc 1 947 0
 995 017a 2046     		mov	r0, r4
 996 017c FFF7FEFF 		bl	prvUnlockQueue
 997              	.LVL118:
 948:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 998              		.loc 1 948 0
 999 0180 FFF7FEFF 		bl	xTaskResumeAll
 1000              	.LVL119:
 951:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1001              		.loc 1 951 0
 1002 0184 0020     		movs	r0, #0
 1003              	.L72:
 954:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1004              		.loc 1 954 0
 1005 0186 05B0     		add	sp, sp, #20
 1006              	.LCFI13:
 1007              		.cfi_def_cfa_offset 20
 1008              		@ sp needed
 1009 0188 F0BD     		pop	{r4, r5, r6, r7, pc}
 1010              	.LVL120:
 1011              	.L89:
 1012 018a 00BF     		.align	2
 1013              	.L88:
 1014 018c 04ED00E0 		.word	-536810236
 1015              		.cfi_endproc
 1016              	.LFE10:
 1018              		.section	.text.prvInitialiseMutex,"ax",%progbits
 1019              		.align	2
 1020              		.thumb
 1021              		.thumb_func
 1023              	prvInitialiseMutex:
 1024              	.LFB8:
 474:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 1025              		.loc 1 474 0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 0
 1028              		@ frame_needed = 0, uses_anonymous_args = 0
 1029              	.LVL121:
 475:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1030              		.loc 1 475 0
 1031 0000 48B1     		cbz	r0, .L93
 474:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 1032              		.loc 1 474 0
 1033 0002 08B5     		push	{r3, lr}
 1034              	.LCFI14:
 1035              		.cfi_def_cfa_offset 8
 1036              		.cfi_offset 3, -8
ARM GAS  /tmp/ccj2W1aG.s 			page 66


 1037              		.cfi_offset 14, -4
 481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1038              		.loc 1 481 0
 1039 0004 0023     		movs	r3, #0
 1040 0006 8360     		str	r3, [r0, #8]
 482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1041              		.loc 1 482 0
 1042 0008 0360     		str	r3, [r0]
 485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1043              		.loc 1 485 0
 1044 000a C360     		str	r3, [r0, #12]
 490:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1045              		.loc 1 490 0
 1046 000c 1946     		mov	r1, r3
 1047 000e 1A46     		mov	r2, r3
 1048 0010 FFF7FEFF 		bl	xQueueGenericSend
 1049              	.LVL122:
 1050 0014 08BD     		pop	{r3, pc}
 1051              	.LVL123:
 1052              	.L93:
 1053              	.LCFI15:
 1054              		.cfi_def_cfa_offset 0
 1055              		.cfi_restore 3
 1056              		.cfi_restore 14
 1057 0016 7047     		bx	lr
 1058              		.cfi_endproc
 1059              	.LFE8:
 1061              		.section	.text.xQueueCreateMutex,"ax",%progbits
 1062              		.align	2
 1063              		.global	xQueueCreateMutex
 1064              		.thumb
 1065              		.thumb_func
 1067              	xQueueCreateMutex:
 1068              	.LFB9:
 504:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xNewQueue;
 1069              		.loc 1 504 0
 1070              		.cfi_startproc
 1071              		@ args = 0, pretend = 0, frame = 0
 1072              		@ frame_needed = 0, uses_anonymous_args = 0
 1073              	.LVL124:
 1074 0000 10B5     		push	{r4, lr}
 1075              	.LCFI16:
 1076              		.cfi_def_cfa_offset 8
 1077              		.cfi_offset 4, -8
 1078              		.cfi_offset 14, -4
 1079 0002 0246     		mov	r2, r0
 1080              	.LVL125:
 508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1081              		.loc 1 508 0
 1082 0004 0120     		movs	r0, #1
 1083              	.LVL126:
 1084 0006 0021     		movs	r1, #0
 1085 0008 FFF7FEFF 		bl	xQueueGenericCreate
 1086              	.LVL127:
 1087 000c 0446     		mov	r4, r0
 1088              	.LVL128:
 509:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccj2W1aG.s 			page 67


 1089              		.loc 1 509 0
 1090 000e FFF7FEFF 		bl	prvInitialiseMutex
 1091              	.LVL129:
 512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1092              		.loc 1 512 0
 1093 0012 2046     		mov	r0, r4
 1094 0014 10BD     		pop	{r4, pc}
 1095              		.cfi_endproc
 1096              	.LFE9:
 1098 0016 00BF     		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1099              		.align	2
 1100              		.global	xQueueGenericSendFromISR
 1101              		.thumb
 1102              		.thumb_func
 1104              	xQueueGenericSendFromISR:
 1105              	.LFB11:
 958:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1106              		.loc 1 958 0
 1107              		.cfi_startproc
 1108              		@ args = 0, pretend = 0, frame = 0
 1109              		@ frame_needed = 0, uses_anonymous_args = 0
 1110              	.LVL130:
 1111 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1112              	.LCFI17:
 1113              		.cfi_def_cfa_offset 32
 1114              		.cfi_offset 3, -32
 1115              		.cfi_offset 4, -28
 1116              		.cfi_offset 5, -24
 1117              		.cfi_offset 6, -20
 1118              		.cfi_offset 7, -16
 1119              		.cfi_offset 8, -12
 1120              		.cfi_offset 9, -8
 1121              		.cfi_offset 14, -4
 1122              	.LVL131:
 963:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1123              		.loc 1 963 0
 1124 0004 40B9     		cbnz	r0, .L97
 1125              	.LBB107:
 1126              	.LBB108:
 1127              		.loc 2 195 0
 1128              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1129 0006 4FF05003 			mov r3, #80												
 1130 000a 83F31188 		msr basepri, r3											
 1131 000e BFF36F8F 		isb														
 1132 0012 BFF34F8F 		dsb														
 1133              	
 1134              	@ 0 "" 2
 1135              	.LVL132:
 1136              		.thumb
 1137              	.L98:
 1138              	.LBE108:
 1139              	.LBE107:
 963:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1140              		.loc 1 963 0 discriminator 1
 1141 0016 FEE7     		b	.L98
 1142              	.LVL133:
 1143              	.L97:
ARM GAS  /tmp/ccj2W1aG.s 			page 68


 1144 0018 0446     		mov	r4, r0
 964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1145              		.loc 1 964 0
 1146 001a 19B9     		cbnz	r1, .L108
 964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1147              		.loc 1 964 0 is_stmt 0 discriminator 2
 1148 001c 006C     		ldr	r0, [r0, #64]
 1149              	.LVL134:
 1150 001e 18B9     		cbnz	r0, .L109
 964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1151              		.loc 1 964 0
 1152 0020 0120     		movs	r0, #1
 1153 0022 02E0     		b	.L99
 1154              	.LVL135:
 1155              	.L108:
 1156 0024 0120     		movs	r0, #1
 1157              	.LVL136:
 1158 0026 00E0     		b	.L99
 1159              	.L109:
 1160 0028 0020     		movs	r0, #0
 1161              	.L99:
 964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1162              		.loc 1 964 0 discriminator 6
 1163 002a 40B9     		cbnz	r0, .L100
 1164              	.LBB109:
 1165              	.LBB110:
 1166              		.loc 2 195 0 is_stmt 1
 1167              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1168 002c 4FF05003 			mov r3, #80												
 1169 0030 83F31188 		msr basepri, r3											
 1170 0034 BFF36F8F 		isb														
 1171 0038 BFF34F8F 		dsb														
 1172              	
 1173              	@ 0 "" 2
 1174              	.LVL137:
 1175              		.thumb
 1176              	.L101:
 1177              	.LBE110:
 1178              	.LBE109:
 964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1179              		.loc 1 964 0 discriminator 2
 1180 003c FEE7     		b	.L101
 1181              	.LVL138:
 1182              	.L100:
 965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1183              		.loc 1 965 0
 1184 003e 022B     		cmp	r3, #2
 1185 0040 03D1     		bne	.L110
 965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1186              		.loc 1 965 0 is_stmt 0 discriminator 2
 1187 0042 E06B     		ldr	r0, [r4, #60]
 1188 0044 0128     		cmp	r0, #1
 1189 0046 02D1     		bne	.L111
 1190 0048 02E0     		b	.L102
 1191              	.L110:
 965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1192              		.loc 1 965 0
ARM GAS  /tmp/ccj2W1aG.s 			page 69


 1193 004a 0120     		movs	r0, #1
 1194 004c 00E0     		b	.L102
 1195              	.L111:
 1196 004e 0020     		movs	r0, #0
 1197              	.L102:
 965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1198              		.loc 1 965 0 discriminator 6
 1199 0050 40B9     		cbnz	r0, .L103
 1200              	.LBB111:
 1201              	.LBB112:
 1202              		.loc 2 195 0 is_stmt 1
 1203              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1204 0052 4FF05003 			mov r3, #80												
 1205 0056 83F31188 		msr basepri, r3											
 1206 005a BFF36F8F 		isb														
 1207 005e BFF34F8F 		dsb														
 1208              	
 1209              	@ 0 "" 2
 1210              	.LVL139:
 1211              		.thumb
 1212              	.L104:
 1213              	.LBE112:
 1214              	.LBE111:
 965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1215              		.loc 1 965 0 discriminator 3
 1216 0062 FEE7     		b	.L104
 1217              	.LVL140:
 1218              	.L103:
 1219 0064 1F46     		mov	r7, r3
 1220 0066 9046     		mov	r8, r2
 1221 0068 8946     		mov	r9, r1
 981:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1222              		.loc 1 981 0
 1223 006a FFF7FEFF 		bl	vPortValidateInterruptPriority
 1224              	.LVL141:
 1225              	.LBB113:
 1226              	.LBB114:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1227              		.loc 2 211 0
 1228              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1229 006e EFF31186 			mrs r6, basepri											
 1230 0072 4FF05003 		mov r3, #80												
ARM GAS  /tmp/ccj2W1aG.s 			page 70


 1231 0076 83F31188 		msr basepri, r3											
 1232 007a BFF36F8F 		isb														
 1233 007e BFF34F8F 		dsb														
 1234              	
 1235              	@ 0 "" 2
 1236              	.LVL142:
 1237              		.thumb
 1238              	.LBE114:
 1239              	.LBE113:
 990:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1240              		.loc 1 990 0
 1241 0082 A26B     		ldr	r2, [r4, #56]
 1242 0084 E36B     		ldr	r3, [r4, #60]
 1243 0086 9A42     		cmp	r2, r3
 1244 0088 01D3     		bcc	.L105
 990:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1245              		.loc 1 990 0 is_stmt 0 discriminator 1
 1246 008a 022F     		cmp	r7, #2
 1247 008c 1FD1     		bne	.L112
 1248              	.L105:
 1249              	.LBB115:
 992:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1250              		.loc 1 992 0 is_stmt 1
 1251 008e 94F84550 		ldrb	r5, [r4, #69]	@ zero_extendqisi2
 1252 0092 EDB2     		uxtb	r5, r5
 1253              	.LVL143:
1001:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1254              		.loc 1 1001 0
 1255 0094 2046     		mov	r0, r4
 1256 0096 4946     		mov	r1, r9
 1257 0098 3A46     		mov	r2, r7
 1258 009a FFF7FEFF 		bl	prvCopyDataToQueue
 1259              	.LVL144:
1005:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1260              		.loc 1 1005 0
 1261 009e 6BB2     		sxtb	r3, r5
 1262 00a0 B3F1FF3F 		cmp	r3, #-1
 1263 00a4 0DD1     		bne	.L107
1060:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1264              		.loc 1 1060 0
 1265 00a6 636A     		ldr	r3, [r4, #36]
 1266 00a8 9BB1     		cbz	r3, .L113
1062:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1267              		.loc 1 1062 0
 1268 00aa 04F12400 		add	r0, r4, #36
 1269 00ae FFF7FEFF 		bl	xTaskRemoveFromEventList
 1270              	.LVL145:
 1271 00b2 80B1     		cbz	r0, .L114
1066:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 1272              		.loc 1 1066 0
 1273 00b4 B8F1000F 		cmp	r8, #0
 1274 00b8 0FD0     		beq	.L115
1068:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 1275              		.loc 1 1068 0
 1276 00ba 0120     		movs	r0, #1
 1277 00bc C8F80000 		str	r0, [r8]
 1278 00c0 0CE0     		b	.L106
ARM GAS  /tmp/ccj2W1aG.s 			page 71


 1279              	.L107:
1091:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1280              		.loc 1 1091 0
 1281 00c2 6B1C     		adds	r3, r5, #1
 1282 00c4 DBB2     		uxtb	r3, r3
 1283 00c6 84F84530 		strb	r3, [r4, #69]
1094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1284              		.loc 1 1094 0
 1285 00ca 0120     		movs	r0, #1
 1286 00cc 06E0     		b	.L106
 1287              	.LVL146:
 1288              	.L112:
 1289              	.LBE115:
1099:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1290              		.loc 1 1099 0
 1291 00ce 0020     		movs	r0, #0
 1292 00d0 04E0     		b	.L106
 1293              	.LVL147:
 1294              	.L113:
 1295              	.LBB116:
1094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1296              		.loc 1 1094 0
 1297 00d2 0120     		movs	r0, #1
 1298 00d4 02E0     		b	.L106
 1299              	.L114:
 1300 00d6 0120     		movs	r0, #1
 1301 00d8 00E0     		b	.L106
 1302              	.L115:
 1303 00da 0120     		movs	r0, #1
 1304              	.LVL148:
 1305              	.L106:
 1306              	.LBE116:
 1307              	.LBB117:
 1308              	.LBB118:
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1309              		.loc 2 229 0
 1310              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1311 00dc 86F31188 			msr basepri, r6	
 1312              	@ 0 "" 2
 1313              		.thumb
ARM GAS  /tmp/ccj2W1aG.s 			page 72


 1314              	.LBE118:
 1315              	.LBE117:
1105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1316              		.loc 1 1105 0
 1317 00e0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1318              		.cfi_endproc
 1319              	.LFE11:
 1321              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1322              		.align	2
 1323              		.global	xQueueGiveFromISR
 1324              		.thumb
 1325              		.thumb_func
 1327              	xQueueGiveFromISR:
 1328              	.LFB12:
1109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1329              		.loc 1 1109 0
 1330              		.cfi_startproc
 1331              		@ args = 0, pretend = 0, frame = 0
 1332              		@ frame_needed = 0, uses_anonymous_args = 0
 1333              	.LVL149:
1120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1334              		.loc 1 1120 0
 1335 0000 40B9     		cbnz	r0, .L118
 1336              	.LBB119:
 1337              	.LBB120:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1338              		.loc 2 195 0
 1339              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1340 0002 4FF05003 			mov r3, #80												
 1341 0006 83F31188 		msr basepri, r3											
 1342 000a BFF36F8F 		isb														
 1343 000e BFF34F8F 		dsb														
 1344              	
 1345              	@ 0 "" 2
 1346              	.LVL150:
 1347              		.thumb
 1348              	.L119:
 1349              	.LBE120:
 1350              	.LBE119:
1120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1351              		.loc 1 1120 0 discriminator 1
 1352 0012 FEE7     		b	.L119
 1353              	.L118:
1109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1354              		.loc 1 1109 0
 1355 0014 70B5     		push	{r4, r5, r6, lr}
 1356              	.LCFI18:
 1357              		.cfi_def_cfa_offset 16
 1358              		.cfi_offset 4, -16
 1359              		.cfi_offset 5, -12
 1360              		.cfi_offset 6, -8
 1361              		.cfi_offset 14, -4
 1362 0016 0446     		mov	r4, r0
1124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1363              		.loc 1 1124 0
 1364 0018 036C     		ldr	r3, [r0, #64]
 1365 001a 43B1     		cbz	r3, .L120
ARM GAS  /tmp/ccj2W1aG.s 			page 73


 1366              	.LBB121:
 1367              	.LBB122:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1368              		.loc 2 195 0
 1369              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1370 001c 4FF05003 			mov r3, #80												
 1371 0020 83F31188 		msr basepri, r3											
 1372 0024 BFF36F8F 		isb														
 1373 0028 BFF34F8F 		dsb														
 1374              	
 1375              	@ 0 "" 2
 1376              	.LVL151:
 1377              		.thumb
 1378              	.L121:
 1379              	.LBE122:
 1380              	.LBE121:
1124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1381              		.loc 1 1124 0 discriminator 2
 1382 002c FEE7     		b	.L121
 1383              	.L120:
1129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1384              		.loc 1 1129 0
 1385 002e 0368     		ldr	r3, [r0]
 1386 0030 1BB9     		cbnz	r3, .L127
1129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1387              		.loc 1 1129 0 is_stmt 0 discriminator 2
 1388 0032 8368     		ldr	r3, [r0, #8]
 1389 0034 1BB9     		cbnz	r3, .L128
1129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1390              		.loc 1 1129 0
 1391 0036 0123     		movs	r3, #1
 1392 0038 02E0     		b	.L122
 1393              	.L127:
 1394 003a 0123     		movs	r3, #1
 1395 003c 00E0     		b	.L122
 1396              	.L128:
 1397 003e 0023     		movs	r3, #0
 1398              	.L122:
1129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1399              		.loc 1 1129 0 discriminator 6
 1400 0040 43B9     		cbnz	r3, .L123
 1401              	.LBB123:
 1402              	.LBB124:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1403              		.loc 2 195 0 is_stmt 1
 1404              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1405 0042 4FF05003 			mov r3, #80												
 1406 0046 83F31188 		msr basepri, r3											
 1407 004a BFF36F8F 		isb														
 1408 004e BFF34F8F 		dsb														
 1409              	
 1410              	@ 0 "" 2
 1411              	.LVL152:
 1412              		.thumb
 1413              	.L124:
 1414              	.LBE124:
 1415              	.LBE123:
ARM GAS  /tmp/ccj2W1aG.s 			page 74


1129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1416              		.loc 1 1129 0 discriminator 3
 1417 0052 FEE7     		b	.L124
 1418              	.L123:
 1419 0054 0D46     		mov	r5, r1
1145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1420              		.loc 1 1145 0
 1421 0056 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1422              	.LVL153:
 1423              	.LBB125:
 1424              	.LBB126:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1425              		.loc 2 211 0
 1426              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1427 005a EFF31186 			mrs r6, basepri											
 1428 005e 4FF05003 		mov r3, #80												
 1429 0062 83F31188 		msr basepri, r3											
 1430 0066 BFF36F8F 		isb														
 1431 006a BFF34F8F 		dsb														
 1432              	
 1433              	@ 0 "" 2
 1434              	.LVL154:
 1435              		.thumb
 1436              	.LBE126:
 1437              	.LBE125:
 1438              	.LBB127:
1149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1439              		.loc 1 1149 0
 1440 006e A36B     		ldr	r3, [r4, #56]
 1441              	.LVL155:
1154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1442              		.loc 1 1154 0
 1443 0070 E26B     		ldr	r2, [r4, #60]
 1444 0072 9A42     		cmp	r2, r3
 1445 0074 17D9     		bls	.L129
 1446              	.LBB128:
1156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1447              		.loc 1 1156 0
 1448 0076 94F84520 		ldrb	r2, [r4, #69]	@ zero_extendqisi2
 1449              	.LVL156:
1166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1450              		.loc 1 1166 0
 1451 007a 0133     		adds	r3, r3, #1
 1452              	.LVL157:
 1453 007c A363     		str	r3, [r4, #56]
1170:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1454              		.loc 1 1170 0
 1455 007e D3B2     		uxtb	r3, r2
 1456              	.LVL158:
 1457 0080 FF2A     		cmp	r2, #255
 1458 0082 0AD1     		bne	.L126
1225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1459              		.loc 1 1225 0
 1460 0084 636A     		ldr	r3, [r4, #36]
 1461 0086 83B1     		cbz	r3, .L130
1227:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1462              		.loc 1 1227 0
ARM GAS  /tmp/ccj2W1aG.s 			page 75


 1463 0088 04F12400 		add	r0, r4, #36
 1464 008c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1465              	.LVL159:
 1466 0090 68B1     		cbz	r0, .L131
1231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 1467              		.loc 1 1231 0
 1468 0092 75B1     		cbz	r5, .L132
1233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 1469              		.loc 1 1233 0
 1470 0094 0120     		movs	r0, #1
 1471 0096 2860     		str	r0, [r5]
 1472 0098 0CE0     		b	.L125
 1473              	.LVL160:
 1474              	.L126:
1256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1475              		.loc 1 1256 0
 1476 009a 0133     		adds	r3, r3, #1
 1477 009c DBB2     		uxtb	r3, r3
 1478 009e 84F84530 		strb	r3, [r4, #69]
 1479              	.LVL161:
1259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1480              		.loc 1 1259 0
 1481 00a2 0120     		movs	r0, #1
 1482 00a4 06E0     		b	.L125
 1483              	.LVL162:
 1484              	.L129:
 1485              	.LBE128:
1264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1486              		.loc 1 1264 0
 1487 00a6 0020     		movs	r0, #0
 1488 00a8 04E0     		b	.L125
 1489              	.LVL163:
 1490              	.L130:
 1491              	.LBB129:
1259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1492              		.loc 1 1259 0
 1493 00aa 0120     		movs	r0, #1
 1494 00ac 02E0     		b	.L125
 1495              	.LVL164:
 1496              	.L131:
 1497 00ae 0120     		movs	r0, #1
 1498 00b0 00E0     		b	.L125
 1499              	.L132:
 1500 00b2 0120     		movs	r0, #1
 1501              	.L125:
 1502              	.LVL165:
 1503              	.LBE129:
 1504              	.LBE127:
 1505              	.LBB130:
 1506              	.LBB131:
 1507              		.loc 2 229 0
 1508              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1509 00b4 86F31188 			msr basepri, r6	
 1510              	@ 0 "" 2
 1511              		.thumb
 1512              	.LBE131:
 1513              	.LBE130:
ARM GAS  /tmp/ccj2W1aG.s 			page 76


1270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1514              		.loc 1 1270 0
 1515 00b8 70BD     		pop	{r4, r5, r6, pc}
 1516              		.cfi_endproc
 1517              	.LFE12:
 1519 00ba 00BF     		.section	.text.xQueueReceive,"ax",%progbits
 1520              		.align	2
 1521              		.global	xQueueReceive
 1522              		.thumb
 1523              		.thumb_func
 1525              	xQueueReceive:
 1526              	.LFB13:
1274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1527              		.loc 1 1274 0
 1528              		.cfi_startproc
 1529              		@ args = 0, pretend = 0, frame = 16
 1530              		@ frame_needed = 0, uses_anonymous_args = 0
 1531              	.LVL166:
 1532 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1533              	.LCFI19:
 1534              		.cfi_def_cfa_offset 20
 1535              		.cfi_offset 4, -20
 1536              		.cfi_offset 5, -16
 1537              		.cfi_offset 6, -12
 1538              		.cfi_offset 7, -8
 1539              		.cfi_offset 14, -4
 1540 0002 85B0     		sub	sp, sp, #20
 1541              	.LCFI20:
 1542              		.cfi_def_cfa_offset 40
 1543 0004 0192     		str	r2, [sp, #4]
 1544              	.LVL167:
1280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1545              		.loc 1 1280 0
 1546 0006 40B9     		cbnz	r0, .L135
 1547              	.LBB132:
 1548              	.LBB133:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1549              		.loc 2 195 0
 1550              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1551 0008 4FF05003 			mov r3, #80												
 1552 000c 83F31188 		msr basepri, r3											
 1553 0010 BFF36F8F 		isb														
 1554 0014 BFF34F8F 		dsb														
 1555              	
 1556              	@ 0 "" 2
 1557              	.LVL168:
 1558              		.thumb
 1559              	.L136:
 1560              	.LBE133:
 1561              	.LBE132:
1280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1562              		.loc 1 1280 0 discriminator 1
 1563 0018 FEE7     		b	.L136
 1564              	.L135:
 1565 001a 0446     		mov	r4, r0
1284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1566              		.loc 1 1284 0
ARM GAS  /tmp/ccj2W1aG.s 			page 77


 1567 001c 19B9     		cbnz	r1, .L153
1284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1568              		.loc 1 1284 0 is_stmt 0 discriminator 2
 1569 001e 036C     		ldr	r3, [r0, #64]
 1570 0020 1BB9     		cbnz	r3, .L154
1284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1571              		.loc 1 1284 0
 1572 0022 0123     		movs	r3, #1
 1573 0024 02E0     		b	.L137
 1574              	.L153:
 1575 0026 0123     		movs	r3, #1
 1576 0028 00E0     		b	.L137
 1577              	.L154:
 1578 002a 0023     		movs	r3, #0
 1579              	.L137:
1284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1580              		.loc 1 1284 0 discriminator 6
 1581 002c 43B9     		cbnz	r3, .L138
 1582              	.LBB134:
 1583              	.LBB135:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1584              		.loc 2 195 0 is_stmt 1
 1585              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1586 002e 4FF05003 			mov r3, #80												
 1587 0032 83F31188 		msr basepri, r3											
 1588 0036 BFF36F8F 		isb														
 1589 003a BFF34F8F 		dsb														
 1590              	
 1591              	@ 0 "" 2
 1592              	.LVL169:
 1593              		.thumb
 1594              	.L139:
 1595              	.LBE135:
 1596              	.LBE134:
1284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1597              		.loc 1 1284 0 discriminator 2
 1598 003e FEE7     		b	.L139
 1599              	.L138:
 1600 0040 0E46     		mov	r6, r1
1289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1601              		.loc 1 1289 0
 1602 0042 FFF7FEFF 		bl	xTaskGetSchedulerState
 1603              	.LVL170:
 1604 0046 18B9     		cbnz	r0, .L155
1289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1605              		.loc 1 1289 0 is_stmt 0 discriminator 2
 1606 0048 019B     		ldr	r3, [sp, #4]
 1607 004a 1BB9     		cbnz	r3, .L156
1289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1608              		.loc 1 1289 0
 1609 004c 0123     		movs	r3, #1
 1610 004e 02E0     		b	.L140
 1611              	.L155:
 1612 0050 0123     		movs	r3, #1
 1613 0052 00E0     		b	.L140
 1614              	.L156:
 1615 0054 0023     		movs	r3, #0
ARM GAS  /tmp/ccj2W1aG.s 			page 78


 1616              	.L140:
1289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1617              		.loc 1 1289 0 discriminator 6
 1618 0056 43B9     		cbnz	r3, .L157
 1619              	.LBB136:
 1620              	.LBB137:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1621              		.loc 2 195 0 is_stmt 1
 1622              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1623 0058 4FF05003 			mov r3, #80												
 1624 005c 83F31188 		msr basepri, r3											
 1625 0060 BFF36F8F 		isb														
 1626 0064 BFF34F8F 		dsb														
 1627              	
 1628              	@ 0 "" 2
 1629              	.LVL171:
 1630              		.thumb
 1631              	.L142:
 1632              	.LBE137:
 1633              	.LBE136:
1289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1634              		.loc 1 1289 0 discriminator 3
 1635 0068 FEE7     		b	.L142
 1636              	.L157:
 1637 006a 0027     		movs	r7, #0
 1638              	.LVL172:
 1639              	.L141:
1299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1640              		.loc 1 1299 0
 1641 006c FFF7FEFF 		bl	vPortEnterCritical
 1642              	.LVL173:
 1643              	.LBB138:
1301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1644              		.loc 1 1301 0
 1645 0070 A56B     		ldr	r5, [r4, #56]
 1646              	.LVL174:
1305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1647              		.loc 1 1305 0
 1648 0072 C5B1     		cbz	r5, .L143
1308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
 1649              		.loc 1 1308 0
 1650 0074 2046     		mov	r0, r4
 1651 0076 3146     		mov	r1, r6
 1652 0078 FFF7FEFF 		bl	prvCopyDataFromQueue
 1653              	.LVL175:
1310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1654              		.loc 1 1310 0
 1655 007c 013D     		subs	r5, r5, #1
 1656              	.LVL176:
 1657 007e A563     		str	r5, [r4, #56]
1315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1658              		.loc 1 1315 0
 1659 0080 2369     		ldr	r3, [r4, #16]
 1660 0082 63B1     		cbz	r3, .L144
1317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1661              		.loc 1 1317 0
 1662 0084 04F11000 		add	r0, r4, #16
ARM GAS  /tmp/ccj2W1aG.s 			page 79


 1663 0088 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1664              	.LVL177:
 1665 008c 38B1     		cbz	r0, .L144
1319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 1666              		.loc 1 1319 0
 1667 008e 4FF08052 		mov	r2, #268435456
 1668 0092 304B     		ldr	r3, .L159
 1669 0094 1A60     		str	r2, [r3]
 1670              	@ 1319 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1671 0096 BFF34F8F 		dsb
 1672              	@ 0 "" 2
 1673              	@ 1319 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1674 009a BFF36F8F 		isb
 1675              	@ 0 "" 2
 1676              		.thumb
 1677              	.L144:
1331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 1678              		.loc 1 1331 0
 1679 009e FFF7FEFF 		bl	vPortExitCritical
 1680              	.LVL178:
1332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1681              		.loc 1 1332 0
 1682 00a2 0120     		movs	r0, #1
 1683 00a4 53E0     		b	.L145
 1684              	.LVL179:
 1685              	.L143:
1336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1686              		.loc 1 1336 0
 1687 00a6 019B     		ldr	r3, [sp, #4]
 1688 00a8 1BB9     		cbnz	r3, .L146
1340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1689              		.loc 1 1340 0
 1690 00aa FFF7FEFF 		bl	vPortExitCritical
 1691              	.LVL180:
1342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1692              		.loc 1 1342 0
 1693 00ae 0020     		movs	r0, #0
 1694 00b0 4DE0     		b	.L145
 1695              	.L146:
1344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1696              		.loc 1 1344 0
 1697 00b2 1FB9     		cbnz	r7, .L147
1348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1698              		.loc 1 1348 0
 1699 00b4 02A8     		add	r0, sp, #8
 1700 00b6 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1701              	.LVL181:
1349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1702              		.loc 1 1349 0
 1703 00ba 0127     		movs	r7, #1
 1704              	.LVL182:
 1705              	.L147:
 1706              	.LBE138:
1358:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1707              		.loc 1 1358 0
 1708 00bc FFF7FEFF 		bl	vPortExitCritical
 1709              	.LVL183:
ARM GAS  /tmp/ccj2W1aG.s 			page 80


1363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 1710              		.loc 1 1363 0
 1711 00c0 FFF7FEFF 		bl	vTaskSuspendAll
 1712              	.LVL184:
1364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1713              		.loc 1 1364 0
 1714 00c4 FFF7FEFF 		bl	vPortEnterCritical
 1715              	.LVL185:
 1716 00c8 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1717 00cc 5BB2     		sxtb	r3, r3
 1718 00ce B3F1FF3F 		cmp	r3, #-1
 1719 00d2 02D1     		bne	.L148
1364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1720              		.loc 1 1364 0 is_stmt 0 discriminator 1
 1721 00d4 0023     		movs	r3, #0
 1722 00d6 84F84430 		strb	r3, [r4, #68]
 1723              	.L148:
1364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1724              		.loc 1 1364 0 discriminator 3
 1725 00da 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1726 00de 5BB2     		sxtb	r3, r3
 1727 00e0 B3F1FF3F 		cmp	r3, #-1
 1728 00e4 02D1     		bne	.L149
1364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1729              		.loc 1 1364 0 discriminator 4
 1730 00e6 0023     		movs	r3, #0
 1731 00e8 84F84530 		strb	r3, [r4, #69]
 1732              	.L149:
1364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1733              		.loc 1 1364 0 discriminator 6
 1734 00ec FFF7FEFF 		bl	vPortExitCritical
 1735              	.LVL186:
1367:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1736              		.loc 1 1367 0 is_stmt 1 discriminator 6
 1737 00f0 02A8     		add	r0, sp, #8
 1738 00f2 01A9     		add	r1, sp, #4
 1739              	.LVL187:
 1740 00f4 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1741              	.LVL188:
 1742 00f8 F0B9     		cbnz	r0, .L150
1371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1743              		.loc 1 1371 0
 1744 00fa 2046     		mov	r0, r4
 1745 00fc FFF7FEFF 		bl	prvIsQueueEmpty
 1746              	.LVL189:
 1747 0100 A0B1     		cbz	r0, .L151
1374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1748              		.loc 1 1374 0
 1749 0102 04F12400 		add	r0, r4, #36
 1750 0106 0199     		ldr	r1, [sp, #4]
 1751 0108 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1752              	.LVL190:
1375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1753              		.loc 1 1375 0
 1754 010c 2046     		mov	r0, r4
 1755 010e FFF7FEFF 		bl	prvUnlockQueue
 1756              	.LVL191:
ARM GAS  /tmp/ccj2W1aG.s 			page 81


1376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1757              		.loc 1 1376 0
 1758 0112 FFF7FEFF 		bl	xTaskResumeAll
 1759              	.LVL192:
 1760 0116 0028     		cmp	r0, #0
 1761 0118 A8D1     		bne	.L141
1378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1762              		.loc 1 1378 0
 1763 011a 4FF08052 		mov	r2, #268435456
 1764 011e 0D4B     		ldr	r3, .L159
 1765 0120 1A60     		str	r2, [r3]
 1766              	@ 1378 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1767 0122 BFF34F8F 		dsb
 1768              	@ 0 "" 2
 1769              	@ 1378 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1770 0126 BFF36F8F 		isb
 1771              	@ 0 "" 2
 1772              		.thumb
 1773 012a 9FE7     		b	.L141
 1774              	.L151:
1389:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 1775              		.loc 1 1389 0
 1776 012c 2046     		mov	r0, r4
 1777 012e FFF7FEFF 		bl	prvUnlockQueue
 1778              	.LVL193:
1390:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1779              		.loc 1 1390 0
 1780 0132 FFF7FEFF 		bl	xTaskResumeAll
 1781              	.LVL194:
 1782 0136 99E7     		b	.L141
 1783              	.L150:
1397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 1784              		.loc 1 1397 0
 1785 0138 2046     		mov	r0, r4
 1786 013a FFF7FEFF 		bl	prvUnlockQueue
 1787              	.LVL195:
1398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1788              		.loc 1 1398 0
 1789 013e FFF7FEFF 		bl	xTaskResumeAll
 1790              	.LVL196:
1400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1791              		.loc 1 1400 0
 1792 0142 2046     		mov	r0, r4
 1793 0144 FFF7FEFF 		bl	prvIsQueueEmpty
 1794              	.LVL197:
 1795 0148 0028     		cmp	r0, #0
 1796 014a 8FD0     		beq	.L141
1403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1797              		.loc 1 1403 0
 1798 014c 0020     		movs	r0, #0
 1799              	.LVL198:
 1800              	.L145:
1411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1801              		.loc 1 1411 0
 1802 014e 05B0     		add	sp, sp, #20
 1803              	.LCFI21:
 1804              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/ccj2W1aG.s 			page 82


 1805              		@ sp needed
 1806 0150 F0BD     		pop	{r4, r5, r6, r7, pc}
 1807              	.LVL199:
 1808              	.L160:
 1809 0152 00BF     		.align	2
 1810              	.L159:
 1811 0154 04ED00E0 		.word	-536810236
 1812              		.cfi_endproc
 1813              	.LFE13:
 1815              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 1816              		.align	2
 1817              		.global	xQueueSemaphoreTake
 1818              		.thumb
 1819              		.thumb_func
 1821              	xQueueSemaphoreTake:
 1822              	.LFB14:
1415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1823              		.loc 1 1415 0
 1824              		.cfi_startproc
 1825              		@ args = 0, pretend = 0, frame = 16
 1826              		@ frame_needed = 0, uses_anonymous_args = 0
 1827              	.LVL200:
 1828 0000 70B5     		push	{r4, r5, r6, lr}
 1829              	.LCFI22:
 1830              		.cfi_def_cfa_offset 16
 1831              		.cfi_offset 4, -16
 1832              		.cfi_offset 5, -12
 1833              		.cfi_offset 6, -8
 1834              		.cfi_offset 14, -4
 1835 0002 84B0     		sub	sp, sp, #16
 1836              	.LCFI23:
 1837              		.cfi_def_cfa_offset 32
 1838 0004 0191     		str	r1, [sp, #4]
 1839              	.LVL201:
1425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1840              		.loc 1 1425 0
 1841 0006 40B9     		cbnz	r0, .L162
 1842              	.LBB139:
 1843              	.LBB140:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1844              		.loc 2 195 0
 1845              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1846 0008 4FF05003 			mov r3, #80												
 1847 000c 83F31188 		msr basepri, r3											
 1848 0010 BFF36F8F 		isb														
 1849 0014 BFF34F8F 		dsb														
 1850              	
 1851              	@ 0 "" 2
 1852              	.LVL202:
 1853              		.thumb
 1854              	.L163:
 1855              	.LBE140:
 1856              	.LBE139:
1425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1857              		.loc 1 1425 0 discriminator 1
 1858 0018 FEE7     		b	.L163
 1859              	.L162:
ARM GAS  /tmp/ccj2W1aG.s 			page 83


 1860 001a 0446     		mov	r4, r0
1429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1861              		.loc 1 1429 0
 1862 001c 036C     		ldr	r3, [r0, #64]
 1863 001e 43B1     		cbz	r3, .L164
 1864              	.LBB141:
 1865              	.LBB142:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1866              		.loc 2 195 0
 1867              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1868 0020 4FF05003 			mov r3, #80												
 1869 0024 83F31188 		msr basepri, r3											
 1870 0028 BFF36F8F 		isb														
 1871 002c BFF34F8F 		dsb														
 1872              	
 1873              	@ 0 "" 2
 1874              	.LVL203:
 1875              		.thumb
 1876              	.L165:
 1877              	.LBE142:
 1878              	.LBE141:
1429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1879              		.loc 1 1429 0 discriminator 2
 1880 0030 FEE7     		b	.L165
 1881              	.L164:
1434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1882              		.loc 1 1434 0
 1883 0032 FFF7FEFF 		bl	xTaskGetSchedulerState
 1884              	.LVL204:
 1885 0036 18B9     		cbnz	r0, .L183
1434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1886              		.loc 1 1434 0 is_stmt 0 discriminator 2
 1887 0038 019B     		ldr	r3, [sp, #4]
 1888 003a 1BB9     		cbnz	r3, .L184
1434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1889              		.loc 1 1434 0
 1890 003c 0123     		movs	r3, #1
 1891 003e 02E0     		b	.L166
 1892              	.L183:
 1893 0040 0123     		movs	r3, #1
 1894 0042 00E0     		b	.L166
 1895              	.L184:
 1896 0044 0023     		movs	r3, #0
 1897              	.L166:
1434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1898              		.loc 1 1434 0 discriminator 6
 1899 0046 43B9     		cbnz	r3, .L185
 1900              	.LBB143:
 1901              	.LBB144:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1902              		.loc 2 195 0 is_stmt 1
 1903              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1904 0048 4FF05003 			mov r3, #80												
 1905 004c 83F31188 		msr basepri, r3											
 1906 0050 BFF36F8F 		isb														
 1907 0054 BFF34F8F 		dsb														
 1908              	
ARM GAS  /tmp/ccj2W1aG.s 			page 84


 1909              	@ 0 "" 2
 1910              	.LVL205:
 1911              		.thumb
 1912              	.L168:
 1913              	.LBE144:
 1914              	.LBE143:
1434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1915              		.loc 1 1434 0 discriminator 3
 1916 0058 FEE7     		b	.L168
 1917              	.L185:
 1918 005a 0025     		movs	r5, #0
 1919 005c 2E46     		mov	r6, r5
 1920              	.LVL206:
 1921              	.L167:
1444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1922              		.loc 1 1444 0
 1923 005e FFF7FEFF 		bl	vPortEnterCritical
 1924              	.LVL207:
 1925              	.LBB145:
1448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1926              		.loc 1 1448 0
 1927 0062 A36B     		ldr	r3, [r4, #56]
 1928              	.LVL208:
1452:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1929              		.loc 1 1452 0
 1930 0064 CBB1     		cbz	r3, .L169
1458:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1931              		.loc 1 1458 0
 1932 0066 013B     		subs	r3, r3, #1
 1933              	.LVL209:
 1934 0068 A363     		str	r3, [r4, #56]
1462:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1935              		.loc 1 1462 0
 1936 006a 2368     		ldr	r3, [r4]
 1937              	.LVL210:
 1938 006c 13B9     		cbnz	r3, .L170
1466:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 1939              		.loc 1 1466 0
 1940 006e FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 1941              	.LVL211:
 1942 0072 A060     		str	r0, [r4, #8]
 1943              	.L170:
1477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1944              		.loc 1 1477 0
 1945 0074 2369     		ldr	r3, [r4, #16]
 1946 0076 63B1     		cbz	r3, .L171
1479:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1947              		.loc 1 1479 0
 1948 0078 04F11000 		add	r0, r4, #16
 1949 007c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1950              	.LVL212:
 1951 0080 38B1     		cbz	r0, .L171
1481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 1952              		.loc 1 1481 0
 1953 0082 4FF08052 		mov	r2, #268435456
 1954 0086 414B     		ldr	r3, .L188
 1955 0088 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccj2W1aG.s 			page 85


 1956              	@ 1481 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1957 008a BFF34F8F 		dsb
 1958              	@ 0 "" 2
 1959              	@ 1481 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1960 008e BFF36F8F 		isb
 1961              	@ 0 "" 2
 1962              		.thumb
 1963              	.L171:
1493:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 1964              		.loc 1 1493 0
 1965 0092 FFF7FEFF 		bl	vPortExitCritical
 1966              	.LVL213:
1494:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1967              		.loc 1 1494 0
 1968 0096 0120     		movs	r0, #1
 1969 0098 76E0     		b	.L172
 1970              	.LVL214:
 1971              	.L169:
1498:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1972              		.loc 1 1498 0
 1973 009a 019B     		ldr	r3, [sp, #4]
 1974              	.LVL215:
 1975 009c 6BB9     		cbnz	r3, .L173
1505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 1976              		.loc 1 1505 0
 1977 009e 45B1     		cbz	r5, .L174
 1978              	.LBB146:
 1979              	.LBB147:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1980              		.loc 2 195 0
 1981              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1982 00a0 4FF05003 			mov r3, #80												
 1983 00a4 83F31188 		msr basepri, r3											
 1984 00a8 BFF36F8F 		isb														
 1985 00ac BFF34F8F 		dsb														
 1986              	
 1987              	@ 0 "" 2
 1988              	.LVL216:
 1989              		.thumb
 1990              	.L175:
 1991              	.LBE147:
 1992              	.LBE146:
1505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 1993              		.loc 1 1505 0 discriminator 4
 1994 00b0 FEE7     		b	.L175
 1995              	.L174:
1511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1996              		.loc 1 1511 0
 1997 00b2 FFF7FEFF 		bl	vPortExitCritical
 1998              	.LVL217:
1513:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1999              		.loc 1 1513 0
 2000 00b6 0020     		movs	r0, #0
 2001 00b8 66E0     		b	.L172
 2002              	.L173:
1515:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2003              		.loc 1 1515 0
ARM GAS  /tmp/ccj2W1aG.s 			page 86


 2004 00ba 1EB9     		cbnz	r6, .L176
1519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 2005              		.loc 1 1519 0
 2006 00bc 02A8     		add	r0, sp, #8
 2007 00be FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2008              	.LVL218:
1520:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2009              		.loc 1 1520 0
 2010 00c2 0126     		movs	r6, #1
 2011              	.LVL219:
 2012              	.L176:
 2013              	.LBE145:
1529:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2014              		.loc 1 1529 0
 2015 00c4 FFF7FEFF 		bl	vPortExitCritical
 2016              	.LVL220:
1534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 2017              		.loc 1 1534 0
 2018 00c8 FFF7FEFF 		bl	vTaskSuspendAll
 2019              	.LVL221:
1535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2020              		.loc 1 1535 0
 2021 00cc FFF7FEFF 		bl	vPortEnterCritical
 2022              	.LVL222:
 2023 00d0 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2024 00d4 5BB2     		sxtb	r3, r3
 2025 00d6 B3F1FF3F 		cmp	r3, #-1
 2026 00da 02D1     		bne	.L177
1535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2027              		.loc 1 1535 0 is_stmt 0 discriminator 1
 2028 00dc 0023     		movs	r3, #0
 2029 00de 84F84430 		strb	r3, [r4, #68]
 2030              	.L177:
1535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2031              		.loc 1 1535 0 discriminator 3
 2032 00e2 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2033 00e6 5BB2     		sxtb	r3, r3
 2034 00e8 B3F1FF3F 		cmp	r3, #-1
 2035 00ec 02D1     		bne	.L178
1535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2036              		.loc 1 1535 0 discriminator 4
 2037 00ee 0023     		movs	r3, #0
 2038 00f0 84F84530 		strb	r3, [r4, #69]
 2039              	.L178:
1535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2040              		.loc 1 1535 0 discriminator 6
 2041 00f4 FFF7FEFF 		bl	vPortExitCritical
 2042              	.LVL223:
1538:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2043              		.loc 1 1538 0 is_stmt 1 discriminator 6
 2044 00f8 02A8     		add	r0, sp, #8
 2045 00fa 01A9     		add	r1, sp, #4
 2046              	.LVL224:
 2047 00fc FFF7FEFF 		bl	xTaskCheckForTimeOut
 2048              	.LVL225:
 2049 0100 40BB     		cbnz	r0, .L179
1544:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
ARM GAS  /tmp/ccj2W1aG.s 			page 87


 2050              		.loc 1 1544 0
 2051 0102 2046     		mov	r0, r4
 2052 0104 FFF7FEFF 		bl	prvIsQueueEmpty
 2053              	.LVL226:
 2054 0108 F0B1     		cbz	r0, .L180
1550:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2055              		.loc 1 1550 0
 2056 010a 2368     		ldr	r3, [r4]
 2057 010c 3BB9     		cbnz	r3, .L181
1552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 2058              		.loc 1 1552 0
 2059 010e FFF7FEFF 		bl	vPortEnterCritical
 2060              	.LVL227:
1554:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 2061              		.loc 1 1554 0
 2062 0112 A068     		ldr	r0, [r4, #8]
 2063 0114 FFF7FEFF 		bl	xTaskPriorityInherit
 2064              	.LVL228:
 2065 0118 0546     		mov	r5, r0
 2066              	.LVL229:
1556:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2067              		.loc 1 1556 0
 2068 011a FFF7FEFF 		bl	vPortExitCritical
 2069              	.LVL230:
 2070              	.L181:
1565:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 2071              		.loc 1 1565 0
 2072 011e 04F12400 		add	r0, r4, #36
 2073 0122 0199     		ldr	r1, [sp, #4]
 2074 0124 FFF7FEFF 		bl	vTaskPlaceOnEventList
 2075              	.LVL231:
1566:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2076              		.loc 1 1566 0
 2077 0128 2046     		mov	r0, r4
 2078 012a FFF7FEFF 		bl	prvUnlockQueue
 2079              	.LVL232:
1567:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2080              		.loc 1 1567 0
 2081 012e FFF7FEFF 		bl	xTaskResumeAll
 2082              	.LVL233:
 2083 0132 0028     		cmp	r0, #0
 2084 0134 93D1     		bne	.L167
1569:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2085              		.loc 1 1569 0
 2086 0136 4FF08052 		mov	r2, #268435456
 2087 013a 144B     		ldr	r3, .L188
 2088 013c 1A60     		str	r2, [r3]
 2089              	@ 1569 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2090 013e BFF34F8F 		dsb
 2091              	@ 0 "" 2
 2092              	@ 1569 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2093 0142 BFF36F8F 		isb
 2094              	@ 0 "" 2
 2095              		.thumb
 2096 0146 8AE7     		b	.L167
 2097              	.L180:
1580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
ARM GAS  /tmp/ccj2W1aG.s 			page 88


 2098              		.loc 1 1580 0
 2099 0148 2046     		mov	r0, r4
 2100 014a FFF7FEFF 		bl	prvUnlockQueue
 2101              	.LVL234:
1581:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2102              		.loc 1 1581 0
 2103 014e FFF7FEFF 		bl	xTaskResumeAll
 2104              	.LVL235:
 2105 0152 84E7     		b	.L167
 2106              	.L179:
1587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 2107              		.loc 1 1587 0
 2108 0154 2046     		mov	r0, r4
 2109 0156 FFF7FEFF 		bl	prvUnlockQueue
 2110              	.LVL236:
1588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2111              		.loc 1 1588 0
 2112 015a FFF7FEFF 		bl	xTaskResumeAll
 2113              	.LVL237:
1594:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2114              		.loc 1 1594 0
 2115 015e 2046     		mov	r0, r4
 2116 0160 FFF7FEFF 		bl	prvIsQueueEmpty
 2117              	.LVL238:
 2118 0164 0028     		cmp	r0, #0
 2119 0166 3FF47AAF 		beq	.L167
1601:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2120              		.loc 1 1601 0
 2121 016a 65B1     		cbz	r5, .L186
1603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 2122              		.loc 1 1603 0
 2123 016c FFF7FEFF 		bl	vPortEnterCritical
 2124              	.LVL239:
 2125              	.LBB148:
1612:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPri
 2126              		.loc 1 1612 0
 2127 0170 2046     		mov	r0, r4
 2128 0172 FFF7FEFF 		bl	prvGetDisinheritPriorityAfterTimeout
 2129              	.LVL240:
 2130 0176 0146     		mov	r1, r0
 2131              	.LVL241:
1613:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 2132              		.loc 1 1613 0
 2133 0178 A068     		ldr	r0, [r4, #8]
 2134              	.LVL242:
 2135 017a FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout
 2136              	.LVL243:
 2137              	.LBE148:
1615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2138              		.loc 1 1615 0
 2139 017e FFF7FEFF 		bl	vPortExitCritical
 2140              	.LVL244:
1621:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2141              		.loc 1 1621 0
 2142 0182 0020     		movs	r0, #0
 2143 0184 00E0     		b	.L172
 2144              	.L186:
ARM GAS  /tmp/ccj2W1aG.s 			page 89


 2145 0186 0020     		movs	r0, #0
 2146              	.L172:
1629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2147              		.loc 1 1629 0
 2148 0188 04B0     		add	sp, sp, #16
 2149              	.LCFI24:
 2150              		.cfi_def_cfa_offset 16
 2151              		@ sp needed
 2152 018a 70BD     		pop	{r4, r5, r6, pc}
 2153              	.LVL245:
 2154              	.L189:
 2155              		.align	2
 2156              	.L188:
 2157 018c 04ED00E0 		.word	-536810236
 2158              		.cfi_endproc
 2159              	.LFE14:
 2161              		.section	.text.xQueuePeek,"ax",%progbits
 2162              		.align	2
 2163              		.global	xQueuePeek
 2164              		.thumb
 2165              		.thumb_func
 2167              	xQueuePeek:
 2168              	.LFB15:
1633:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2169              		.loc 1 1633 0
 2170              		.cfi_startproc
 2171              		@ args = 0, pretend = 0, frame = 16
 2172              		@ frame_needed = 0, uses_anonymous_args = 0
 2173              	.LVL246:
 2174 0000 70B5     		push	{r4, r5, r6, lr}
 2175              	.LCFI25:
 2176              		.cfi_def_cfa_offset 16
 2177              		.cfi_offset 4, -16
 2178              		.cfi_offset 5, -12
 2179              		.cfi_offset 6, -8
 2180              		.cfi_offset 14, -4
 2181 0002 84B0     		sub	sp, sp, #16
 2182              	.LCFI26:
 2183              		.cfi_def_cfa_offset 32
 2184 0004 0192     		str	r2, [sp, #4]
 2185              	.LVL247:
1640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2186              		.loc 1 1640 0
 2187 0006 40B9     		cbnz	r0, .L191
 2188              	.LBB149:
 2189              	.LBB150:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2190              		.loc 2 195 0
 2191              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2192 0008 4FF05003 			mov r3, #80												
 2193 000c 83F31188 		msr basepri, r3											
 2194 0010 BFF36F8F 		isb														
 2195 0014 BFF34F8F 		dsb														
 2196              	
 2197              	@ 0 "" 2
 2198              	.LVL248:
 2199              		.thumb
ARM GAS  /tmp/ccj2W1aG.s 			page 90


 2200              	.L192:
 2201              	.LBE150:
 2202              	.LBE149:
1640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2203              		.loc 1 1640 0 discriminator 1
 2204 0018 FEE7     		b	.L192
 2205              	.L191:
 2206 001a 0446     		mov	r4, r0
1644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2207              		.loc 1 1644 0
 2208 001c 19B9     		cbnz	r1, .L209
1644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2209              		.loc 1 1644 0 is_stmt 0 discriminator 2
 2210 001e 036C     		ldr	r3, [r0, #64]
 2211 0020 1BB9     		cbnz	r3, .L210
1644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2212              		.loc 1 1644 0
 2213 0022 0123     		movs	r3, #1
 2214 0024 02E0     		b	.L193
 2215              	.L209:
 2216 0026 0123     		movs	r3, #1
 2217 0028 00E0     		b	.L193
 2218              	.L210:
 2219 002a 0023     		movs	r3, #0
 2220              	.L193:
1644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2221              		.loc 1 1644 0 discriminator 6
 2222 002c 43B9     		cbnz	r3, .L194
 2223              	.LBB151:
 2224              	.LBB152:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2225              		.loc 2 195 0 is_stmt 1
 2226              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2227 002e 4FF05003 			mov r3, #80												
 2228 0032 83F31188 		msr basepri, r3											
 2229 0036 BFF36F8F 		isb														
 2230 003a BFF34F8F 		dsb														
 2231              	
 2232              	@ 0 "" 2
 2233              	.LVL249:
 2234              		.thumb
 2235              	.L195:
 2236              	.LBE152:
 2237              	.LBE151:
1644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2238              		.loc 1 1644 0 discriminator 2
 2239 003e FEE7     		b	.L195
 2240              	.L194:
 2241 0040 0E46     		mov	r6, r1
1649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2242              		.loc 1 1649 0
 2243 0042 FFF7FEFF 		bl	xTaskGetSchedulerState
 2244              	.LVL250:
 2245 0046 18B9     		cbnz	r0, .L211
1649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2246              		.loc 1 1649 0 is_stmt 0 discriminator 2
 2247 0048 019B     		ldr	r3, [sp, #4]
ARM GAS  /tmp/ccj2W1aG.s 			page 91


 2248 004a 1BB9     		cbnz	r3, .L212
1649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2249              		.loc 1 1649 0
 2250 004c 0123     		movs	r3, #1
 2251 004e 02E0     		b	.L196
 2252              	.L211:
 2253 0050 0123     		movs	r3, #1
 2254 0052 00E0     		b	.L196
 2255              	.L212:
 2256 0054 0023     		movs	r3, #0
 2257              	.L196:
1649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2258              		.loc 1 1649 0 discriminator 6
 2259 0056 43B9     		cbnz	r3, .L213
 2260              	.LBB153:
 2261              	.LBB154:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2262              		.loc 2 195 0 is_stmt 1
 2263              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2264 0058 4FF05003 			mov r3, #80												
 2265 005c 83F31188 		msr basepri, r3											
 2266 0060 BFF36F8F 		isb														
 2267 0064 BFF34F8F 		dsb														
 2268              	
 2269              	@ 0 "" 2
 2270              	.LVL251:
 2271              		.thumb
 2272              	.L198:
 2273              	.LBE154:
 2274              	.LBE153:
1649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2275              		.loc 1 1649 0 discriminator 3
 2276 0068 FEE7     		b	.L198
 2277              	.L213:
 2278 006a 0025     		movs	r5, #0
 2279              	.LVL252:
 2280              	.L197:
1659:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2281              		.loc 1 1659 0
 2282 006c FFF7FEFF 		bl	vPortEnterCritical
 2283              	.LVL253:
 2284              	.LBB155:
1661:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2285              		.loc 1 1661 0
 2286 0070 A36B     		ldr	r3, [r4, #56]
 2287              	.LVL254:
1665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2288              		.loc 1 1665 0
 2289 0072 C3B1     		cbz	r3, .L199
1670:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2290              		.loc 1 1670 0
 2291 0074 E568     		ldr	r5, [r4, #12]
 2292              	.LVL255:
1672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_PEEK( pxQueue );
 2293              		.loc 1 1672 0
 2294 0076 2046     		mov	r0, r4
 2295 0078 3146     		mov	r1, r6
ARM GAS  /tmp/ccj2W1aG.s 			page 92


 2296 007a FFF7FEFF 		bl	prvCopyDataFromQueue
 2297              	.LVL256:
1676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2298              		.loc 1 1676 0
 2299 007e E560     		str	r5, [r4, #12]
1680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2300              		.loc 1 1680 0
 2301 0080 636A     		ldr	r3, [r4, #36]
 2302 0082 63B1     		cbz	r3, .L200
1682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2303              		.loc 1 1682 0
 2304 0084 04F12400 		add	r0, r4, #36
 2305 0088 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2306              	.LVL257:
 2307 008c 38B1     		cbz	r0, .L200
1685:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2308              		.loc 1 1685 0
 2309 008e 4FF08052 		mov	r2, #268435456
 2310 0092 304B     		ldr	r3, .L215
 2311 0094 1A60     		str	r2, [r3]
 2312              	@ 1685 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2313 0096 BFF34F8F 		dsb
 2314              	@ 0 "" 2
 2315              	@ 1685 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2316 009a BFF36F8F 		isb
 2317              	@ 0 "" 2
 2318              		.thumb
 2319              	.L200:
1697:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 2320              		.loc 1 1697 0
 2321 009e FFF7FEFF 		bl	vPortExitCritical
 2322              	.LVL258:
1698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2323              		.loc 1 1698 0
 2324 00a2 0120     		movs	r0, #1
 2325 00a4 53E0     		b	.L201
 2326              	.LVL259:
 2327              	.L199:
1702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2328              		.loc 1 1702 0
 2329 00a6 019B     		ldr	r3, [sp, #4]
 2330              	.LVL260:
 2331 00a8 1BB9     		cbnz	r3, .L202
1706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
 2332              		.loc 1 1706 0
 2333 00aa FFF7FEFF 		bl	vPortExitCritical
 2334              	.LVL261:
1708:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2335              		.loc 1 1708 0
 2336 00ae 0020     		movs	r0, #0
 2337 00b0 4DE0     		b	.L201
 2338              	.L202:
1710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2339              		.loc 1 1710 0
 2340 00b2 1DB9     		cbnz	r5, .L203
1715:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 2341              		.loc 1 1715 0
ARM GAS  /tmp/ccj2W1aG.s 			page 93


 2342 00b4 02A8     		add	r0, sp, #8
 2343 00b6 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2344              	.LVL262:
1716:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2345              		.loc 1 1716 0
 2346 00ba 0125     		movs	r5, #1
 2347              	.LVL263:
 2348              	.L203:
 2349              	.LBE155:
1725:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2350              		.loc 1 1725 0
 2351 00bc FFF7FEFF 		bl	vPortExitCritical
 2352              	.LVL264:
1730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 2353              		.loc 1 1730 0
 2354 00c0 FFF7FEFF 		bl	vTaskSuspendAll
 2355              	.LVL265:
1731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2356              		.loc 1 1731 0
 2357 00c4 FFF7FEFF 		bl	vPortEnterCritical
 2358              	.LVL266:
 2359 00c8 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2360 00cc 5BB2     		sxtb	r3, r3
 2361 00ce B3F1FF3F 		cmp	r3, #-1
 2362 00d2 02D1     		bne	.L204
1731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2363              		.loc 1 1731 0 is_stmt 0 discriminator 1
 2364 00d4 0023     		movs	r3, #0
 2365 00d6 84F84430 		strb	r3, [r4, #68]
 2366              	.L204:
1731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2367              		.loc 1 1731 0 discriminator 3
 2368 00da 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2369 00de 5BB2     		sxtb	r3, r3
 2370 00e0 B3F1FF3F 		cmp	r3, #-1
 2371 00e4 02D1     		bne	.L205
1731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2372              		.loc 1 1731 0 discriminator 4
 2373 00e6 0023     		movs	r3, #0
 2374 00e8 84F84530 		strb	r3, [r4, #69]
 2375              	.L205:
1731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2376              		.loc 1 1731 0 discriminator 6
 2377 00ec FFF7FEFF 		bl	vPortExitCritical
 2378              	.LVL267:
1734:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2379              		.loc 1 1734 0 is_stmt 1 discriminator 6
 2380 00f0 02A8     		add	r0, sp, #8
 2381 00f2 01A9     		add	r1, sp, #4
 2382              	.LVL268:
 2383 00f4 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2384              	.LVL269:
 2385 00f8 F0B9     		cbnz	r0, .L206
1738:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2386              		.loc 1 1738 0
 2387 00fa 2046     		mov	r0, r4
 2388 00fc FFF7FEFF 		bl	prvIsQueueEmpty
ARM GAS  /tmp/ccj2W1aG.s 			page 94


 2389              	.LVL270:
 2390 0100 A0B1     		cbz	r0, .L207
1741:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 2391              		.loc 1 1741 0
 2392 0102 04F12400 		add	r0, r4, #36
 2393 0106 0199     		ldr	r1, [sp, #4]
 2394 0108 FFF7FEFF 		bl	vTaskPlaceOnEventList
 2395              	.LVL271:
1742:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2396              		.loc 1 1742 0
 2397 010c 2046     		mov	r0, r4
 2398 010e FFF7FEFF 		bl	prvUnlockQueue
 2399              	.LVL272:
1743:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2400              		.loc 1 1743 0
 2401 0112 FFF7FEFF 		bl	xTaskResumeAll
 2402              	.LVL273:
 2403 0116 0028     		cmp	r0, #0
 2404 0118 A8D1     		bne	.L197
1745:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2405              		.loc 1 1745 0
 2406 011a 4FF08052 		mov	r2, #268435456
 2407 011e 0D4B     		ldr	r3, .L215
 2408 0120 1A60     		str	r2, [r3]
 2409              	@ 1745 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2410 0122 BFF34F8F 		dsb
 2411              	@ 0 "" 2
 2412              	@ 1745 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2413 0126 BFF36F8F 		isb
 2414              	@ 0 "" 2
 2415              		.thumb
 2416 012a 9FE7     		b	.L197
 2417              	.L207:
1756:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 2418              		.loc 1 1756 0
 2419 012c 2046     		mov	r0, r4
 2420 012e FFF7FEFF 		bl	prvUnlockQueue
 2421              	.LVL274:
1757:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2422              		.loc 1 1757 0
 2423 0132 FFF7FEFF 		bl	xTaskResumeAll
 2424              	.LVL275:
 2425 0136 99E7     		b	.L197
 2426              	.L206:
1764:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 2427              		.loc 1 1764 0
 2428 0138 2046     		mov	r0, r4
 2429 013a FFF7FEFF 		bl	prvUnlockQueue
 2430              	.LVL276:
1765:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2431              		.loc 1 1765 0
 2432 013e FFF7FEFF 		bl	xTaskResumeAll
 2433              	.LVL277:
1767:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2434              		.loc 1 1767 0
 2435 0142 2046     		mov	r0, r4
 2436 0144 FFF7FEFF 		bl	prvIsQueueEmpty
ARM GAS  /tmp/ccj2W1aG.s 			page 95


 2437              	.LVL278:
 2438 0148 0028     		cmp	r0, #0
 2439 014a 8FD0     		beq	.L197
1770:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2440              		.loc 1 1770 0
 2441 014c 0020     		movs	r0, #0
 2442              	.LVL279:
 2443              	.L201:
1778:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2444              		.loc 1 1778 0
 2445 014e 04B0     		add	sp, sp, #16
 2446              	.LCFI27:
 2447              		.cfi_def_cfa_offset 16
 2448              		@ sp needed
 2449 0150 70BD     		pop	{r4, r5, r6, pc}
 2450              	.LVL280:
 2451              	.L216:
 2452 0152 00BF     		.align	2
 2453              	.L215:
 2454 0154 04ED00E0 		.word	-536810236
 2455              		.cfi_endproc
 2456              	.LFE15:
 2458              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 2459              		.align	2
 2460              		.global	xQueueReceiveFromISR
 2461              		.thumb
 2462              		.thumb_func
 2464              	xQueueReceiveFromISR:
 2465              	.LFB16:
1782:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 2466              		.loc 1 1782 0
 2467              		.cfi_startproc
 2468              		@ args = 0, pretend = 0, frame = 0
 2469              		@ frame_needed = 0, uses_anonymous_args = 0
 2470              	.LVL281:
 2471 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2472              	.LCFI28:
 2473              		.cfi_def_cfa_offset 32
 2474              		.cfi_offset 3, -32
 2475              		.cfi_offset 4, -28
 2476              		.cfi_offset 5, -24
 2477              		.cfi_offset 6, -20
 2478              		.cfi_offset 7, -16
 2479              		.cfi_offset 8, -12
 2480              		.cfi_offset 9, -8
 2481              		.cfi_offset 14, -4
 2482              	.LVL282:
1787:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2483              		.loc 1 1787 0
 2484 0004 40B9     		cbnz	r0, .L218
 2485              	.LBB156:
 2486              	.LBB157:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2487              		.loc 2 195 0
 2488              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2489 0006 4FF05003 			mov r3, #80												
 2490 000a 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccj2W1aG.s 			page 96


 2491 000e BFF36F8F 		isb														
 2492 0012 BFF34F8F 		dsb														
 2493              	
 2494              	@ 0 "" 2
 2495              	.LVL283:
 2496              		.thumb
 2497              	.L219:
 2498              	.LBE157:
 2499              	.LBE156:
1787:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2500              		.loc 1 1787 0 discriminator 1
 2501 0016 FEE7     		b	.L219
 2502              	.L218:
 2503 0018 0446     		mov	r4, r0
1788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2504              		.loc 1 1788 0
 2505 001a 19B9     		cbnz	r1, .L225
1788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2506              		.loc 1 1788 0 is_stmt 0 discriminator 2
 2507 001c 036C     		ldr	r3, [r0, #64]
 2508 001e 1BB9     		cbnz	r3, .L226
1788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2509              		.loc 1 1788 0
 2510 0020 0123     		movs	r3, #1
 2511 0022 02E0     		b	.L220
 2512              	.L225:
 2513 0024 0123     		movs	r3, #1
 2514 0026 00E0     		b	.L220
 2515              	.L226:
 2516 0028 0023     		movs	r3, #0
 2517              	.L220:
1788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2518              		.loc 1 1788 0 discriminator 6
 2519 002a 43B9     		cbnz	r3, .L221
 2520              	.LBB158:
 2521              	.LBB159:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2522              		.loc 2 195 0 is_stmt 1
 2523              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2524 002c 4FF05003 			mov r3, #80												
 2525 0030 83F31188 		msr basepri, r3											
 2526 0034 BFF36F8F 		isb														
 2527 0038 BFF34F8F 		dsb														
 2528              	
 2529              	@ 0 "" 2
 2530              	.LVL284:
 2531              		.thumb
 2532              	.L222:
 2533              	.LBE159:
 2534              	.LBE158:
1788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2535              		.loc 1 1788 0 discriminator 2
 2536 003c FEE7     		b	.L222
 2537              	.L221:
 2538 003e 1746     		mov	r7, r2
 2539 0040 8946     		mov	r9, r1
1804:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccj2W1aG.s 			page 97


 2540              		.loc 1 1804 0
 2541 0042 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2542              	.LVL285:
 2543              	.LBB160:
 2544              	.LBB161:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2545              		.loc 2 211 0
 2546              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2547 0046 EFF31186 			mrs r6, basepri											
 2548 004a 4FF05003 		mov r3, #80												
 2549 004e 83F31188 		msr basepri, r3											
 2550 0052 BFF36F8F 		isb														
 2551 0056 BFF34F8F 		dsb														
 2552              	
 2553              	@ 0 "" 2
 2554              	.LVL286:
 2555              		.thumb
 2556              	.LBE161:
 2557              	.LBE160:
 2558              	.LBB162:
1808:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2559              		.loc 1 1808 0
 2560 005a D4F83880 		ldr	r8, [r4, #56]
 2561              	.LVL287:
1811:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2562              		.loc 1 1811 0
 2563 005e B8F1000F 		cmp	r8, #0
 2564 0062 1ED0     		beq	.L227
 2565              	.LBB163:
1813:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2566              		.loc 1 1813 0
 2567 0064 94F84450 		ldrb	r5, [r4, #68]	@ zero_extendqisi2
 2568 0068 EDB2     		uxtb	r5, r5
 2569              	.LVL288:
1817:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2570              		.loc 1 1817 0
 2571 006a 2046     		mov	r0, r4
 2572 006c 4946     		mov	r1, r9
 2573 006e FFF7FEFF 		bl	prvCopyDataFromQueue
 2574              	.LVL289:
1818:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2575              		.loc 1 1818 0
 2576 0072 08F1FF33 		add	r3, r8, #-1
 2577 0076 A363     		str	r3, [r4, #56]
1824:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2578              		.loc 1 1824 0
 2579 0078 6BB2     		sxtb	r3, r5
 2580 007a B3F1FF3F 		cmp	r3, #-1
 2581 007e 0AD1     		bne	.L224
1826:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2582              		.loc 1 1826 0
 2583 0080 2369     		ldr	r3, [r4, #16]
 2584 0082 83B1     		cbz	r3, .L228
1828:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2585              		.loc 1 1828 0
 2586 0084 04F11000 		add	r0, r4, #16
 2587 0088 FFF7FEFF 		bl	xTaskRemoveFromEventList
ARM GAS  /tmp/ccj2W1aG.s 			page 98


 2588              	.LVL290:
 2589 008c 68B1     		cbz	r0, .L229
1832:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 2590              		.loc 1 1832 0
 2591 008e 77B1     		cbz	r7, .L230
1834:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 2592              		.loc 1 1834 0
 2593 0090 0120     		movs	r0, #1
 2594 0092 3860     		str	r0, [r7]
 2595 0094 0CE0     		b	.L223
 2596              	.L224:
1855:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2597              		.loc 1 1855 0
 2598 0096 6B1C     		adds	r3, r5, #1
 2599 0098 DBB2     		uxtb	r3, r3
 2600 009a 84F84430 		strb	r3, [r4, #68]
1858:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 2601              		.loc 1 1858 0
 2602 009e 0120     		movs	r0, #1
 2603 00a0 06E0     		b	.L223
 2604              	.LVL291:
 2605              	.L227:
 2606              	.LBE163:
1862:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2607              		.loc 1 1862 0
 2608 00a2 0020     		movs	r0, #0
 2609 00a4 04E0     		b	.L223
 2610              	.LVL292:
 2611              	.L228:
 2612              	.LBB164:
1858:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 2613              		.loc 1 1858 0
 2614 00a6 0120     		movs	r0, #1
 2615 00a8 02E0     		b	.L223
 2616              	.L229:
 2617 00aa 0120     		movs	r0, #1
 2618 00ac 00E0     		b	.L223
 2619              	.L230:
 2620 00ae 0120     		movs	r0, #1
 2621              	.LVL293:
 2622              	.L223:
 2623              	.LBE164:
 2624              	.LBE162:
 2625              	.LBB165:
 2626              	.LBB166:
 2627              		.loc 2 229 0
 2628              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2629 00b0 86F31188 			msr basepri, r6	
 2630              	@ 0 "" 2
 2631              		.thumb
 2632              	.LBE166:
 2633              	.LBE165:
1869:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2634              		.loc 1 1869 0
 2635 00b4 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2636              		.cfi_endproc
 2637              	.LFE16:
ARM GAS  /tmp/ccj2W1aG.s 			page 99


 2639              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2640              		.align	2
 2641              		.global	xQueuePeekFromISR
 2642              		.thumb
 2643              		.thumb_func
 2645              	xQueuePeekFromISR:
 2646              	.LFB17:
1873:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 2647              		.loc 1 1873 0
 2648              		.cfi_startproc
 2649              		@ args = 0, pretend = 0, frame = 0
 2650              		@ frame_needed = 0, uses_anonymous_args = 0
 2651              	.LVL294:
 2652 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2653              	.LCFI29:
 2654              		.cfi_def_cfa_offset 24
 2655              		.cfi_offset 3, -24
 2656              		.cfi_offset 4, -20
 2657              		.cfi_offset 5, -16
 2658              		.cfi_offset 6, -12
 2659              		.cfi_offset 7, -8
 2660              		.cfi_offset 14, -4
 2661              	.LVL295:
1879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2662              		.loc 1 1879 0
 2663 0002 40B9     		cbnz	r0, .L233
 2664              	.LBB167:
 2665              	.LBB168:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2666              		.loc 2 195 0
 2667              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2668 0004 4FF05003 			mov r3, #80												
 2669 0008 83F31188 		msr basepri, r3											
 2670 000c BFF36F8F 		isb														
 2671 0010 BFF34F8F 		dsb														
 2672              	
 2673              	@ 0 "" 2
 2674              	.LVL296:
 2675              		.thumb
 2676              	.L234:
 2677              	.LBE168:
 2678              	.LBE167:
1879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2679              		.loc 1 1879 0 discriminator 1
 2680 0014 FEE7     		b	.L234
 2681              	.L233:
 2682 0016 0446     		mov	r4, r0
1880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2683              		.loc 1 1880 0
 2684 0018 19B9     		cbnz	r1, .L241
1880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2685              		.loc 1 1880 0 is_stmt 0 discriminator 2
 2686 001a 036C     		ldr	r3, [r0, #64]
 2687 001c 1BB9     		cbnz	r3, .L242
1880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2688              		.loc 1 1880 0
 2689 001e 0123     		movs	r3, #1
ARM GAS  /tmp/ccj2W1aG.s 			page 100


 2690 0020 02E0     		b	.L235
 2691              	.L241:
 2692 0022 0123     		movs	r3, #1
 2693 0024 00E0     		b	.L235
 2694              	.L242:
 2695 0026 0023     		movs	r3, #0
 2696              	.L235:
1880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2697              		.loc 1 1880 0 discriminator 6
 2698 0028 43B9     		cbnz	r3, .L236
 2699              	.LBB169:
 2700              	.LBB170:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2701              		.loc 2 195 0 is_stmt 1
 2702              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2703 002a 4FF05003 			mov r3, #80												
 2704 002e 83F31188 		msr basepri, r3											
 2705 0032 BFF36F8F 		isb														
 2706 0036 BFF34F8F 		dsb														
 2707              	
 2708              	@ 0 "" 2
 2709              	.LVL297:
 2710              		.thumb
 2711              	.L237:
 2712              	.LBE170:
 2713              	.LBE169:
1880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2714              		.loc 1 1880 0 discriminator 2
 2715 003a FEE7     		b	.L237
 2716              	.L236:
1881:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2717              		.loc 1 1881 0
 2718 003c 236C     		ldr	r3, [r4, #64]
 2719 003e 43B9     		cbnz	r3, .L238
 2720              	.LBB171:
 2721              	.LBB172:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2722              		.loc 2 195 0
 2723              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2724 0040 4FF05003 			mov r3, #80												
 2725 0044 83F31188 		msr basepri, r3											
 2726 0048 BFF36F8F 		isb														
 2727 004c BFF34F8F 		dsb														
 2728              	
 2729              	@ 0 "" 2
 2730              	.LVL298:
 2731              		.thumb
 2732              	.L239:
 2733              	.LBE172:
 2734              	.LBE171:
1881:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2735              		.loc 1 1881 0 discriminator 3
 2736 0050 FEE7     		b	.L239
 2737              	.L238:
 2738 0052 0D46     		mov	r5, r1
1897:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2739              		.loc 1 1897 0
ARM GAS  /tmp/ccj2W1aG.s 			page 101


 2740 0054 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2741              	.LVL299:
 2742              	.LBB173:
 2743              	.LBB174:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2744              		.loc 2 211 0
 2745              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2746 0058 EFF31186 			mrs r6, basepri											
 2747 005c 4FF05003 		mov r3, #80												
 2748 0060 83F31188 		msr basepri, r3											
 2749 0064 BFF36F8F 		isb														
 2750 0068 BFF34F8F 		dsb														
 2751              	
 2752              	@ 0 "" 2
 2753              	.LVL300:
 2754              		.thumb
 2755              	.LBE174:
 2756              	.LBE173:
1902:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2757              		.loc 1 1902 0
 2758 006c A36B     		ldr	r3, [r4, #56]
 2759 006e 3BB1     		cbz	r3, .L243
1908:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2760              		.loc 1 1908 0
 2761 0070 E768     		ldr	r7, [r4, #12]
 2762              	.LVL301:
1909:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 2763              		.loc 1 1909 0
 2764 0072 2046     		mov	r0, r4
 2765 0074 2946     		mov	r1, r5
 2766 0076 FFF7FEFF 		bl	prvCopyDataFromQueue
 2767              	.LVL302:
1910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2768              		.loc 1 1910 0
 2769 007a E760     		str	r7, [r4, #12]
 2770              	.LVL303:
1912:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 2771              		.loc 1 1912 0
 2772 007c 0120     		movs	r0, #1
 2773 007e 00E0     		b	.L240
 2774              	.LVL304:
 2775              	.L243:
1916:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2776              		.loc 1 1916 0
 2777 0080 0020     		movs	r0, #0
 2778              	.L240:
 2779              	.LVL305:
 2780              	.LBB175:
 2781              	.LBB176:
 2782              		.loc 2 229 0
 2783              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2784 0082 86F31188 			msr basepri, r6	
 2785              	@ 0 "" 2
 2786              		.thumb
 2787              	.LBE176:
 2788              	.LBE175:
1923:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccj2W1aG.s 			page 102


 2789              		.loc 1 1923 0
 2790 0086 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2791              		.cfi_endproc
 2792              	.LFE17:
 2794              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2795              		.align	2
 2796              		.global	uxQueueMessagesWaiting
 2797              		.thumb
 2798              		.thumb_func
 2800              	uxQueueMessagesWaiting:
 2801              	.LFB18:
1927:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 2802              		.loc 1 1927 0
 2803              		.cfi_startproc
 2804              		@ args = 0, pretend = 0, frame = 0
 2805              		@ frame_needed = 0, uses_anonymous_args = 0
 2806              	.LVL306:
1930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2807              		.loc 1 1930 0
 2808 0000 40B9     		cbnz	r0, .L246
 2809              	.LBB177:
 2810              	.LBB178:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2811              		.loc 2 195 0
 2812              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2813 0002 4FF05003 			mov r3, #80												
 2814 0006 83F31188 		msr basepri, r3											
 2815 000a BFF36F8F 		isb														
 2816 000e BFF34F8F 		dsb														
 2817              	
 2818              	@ 0 "" 2
 2819              	.LVL307:
 2820              		.thumb
 2821              	.L247:
 2822              	.LBE178:
 2823              	.LBE177:
1930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2824              		.loc 1 1930 0 discriminator 1
 2825 0012 FEE7     		b	.L247
 2826              	.L246:
1927:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 2827              		.loc 1 1927 0
 2828 0014 10B5     		push	{r4, lr}
 2829              	.LCFI30:
 2830              		.cfi_def_cfa_offset 8
 2831              		.cfi_offset 4, -8
 2832              		.cfi_offset 14, -4
 2833 0016 0446     		mov	r4, r0
1932:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 2834              		.loc 1 1932 0
 2835 0018 FFF7FEFF 		bl	vPortEnterCritical
 2836              	.LVL308:
1934:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2837              		.loc 1 1934 0
 2838 001c A46B     		ldr	r4, [r4, #56]
 2839              	.LVL309:
1936:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccj2W1aG.s 			page 103


 2840              		.loc 1 1936 0
 2841 001e FFF7FEFF 		bl	vPortExitCritical
 2842              	.LVL310:
1939:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2843              		.loc 1 1939 0
 2844 0022 2046     		mov	r0, r4
 2845 0024 10BD     		pop	{r4, pc}
 2846              		.cfi_endproc
 2847              	.LFE18:
 2849 0026 00BF     		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2850              		.align	2
 2851              		.global	uxQueueSpacesAvailable
 2852              		.thumb
 2853              		.thumb_func
 2855              	uxQueueSpacesAvailable:
 2856              	.LFB19:
1943:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 2857              		.loc 1 1943 0
 2858              		.cfi_startproc
 2859              		@ args = 0, pretend = 0, frame = 0
 2860              		@ frame_needed = 0, uses_anonymous_args = 0
 2861              	.LVL311:
1947:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2862              		.loc 1 1947 0
 2863 0000 40B9     		cbnz	r0, .L250
 2864              	.LBB179:
 2865              	.LBB180:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2866              		.loc 2 195 0
 2867              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2868 0002 4FF05003 			mov r3, #80												
 2869 0006 83F31188 		msr basepri, r3											
 2870 000a BFF36F8F 		isb														
 2871 000e BFF34F8F 		dsb														
 2872              	
 2873              	@ 0 "" 2
 2874              	.LVL312:
 2875              		.thumb
 2876              	.L251:
 2877              	.LBE180:
 2878              	.LBE179:
1947:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2879              		.loc 1 1947 0 discriminator 1
 2880 0012 FEE7     		b	.L251
 2881              	.L250:
1943:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 2882              		.loc 1 1943 0
 2883 0014 10B5     		push	{r4, lr}
 2884              	.LCFI31:
 2885              		.cfi_def_cfa_offset 8
 2886              		.cfi_offset 4, -8
 2887              		.cfi_offset 14, -4
 2888 0016 0446     		mov	r4, r0
1949:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 2889              		.loc 1 1949 0
 2890 0018 FFF7FEFF 		bl	vPortEnterCritical
 2891              	.LVL313:
ARM GAS  /tmp/ccj2W1aG.s 			page 104


1951:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2892              		.loc 1 1951 0
 2893 001c E36B     		ldr	r3, [r4, #60]
 2894 001e A46B     		ldr	r4, [r4, #56]
 2895              	.LVL314:
 2896 0020 1C1B     		subs	r4, r3, r4
 2897              	.LVL315:
1953:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2898              		.loc 1 1953 0
 2899 0022 FFF7FEFF 		bl	vPortExitCritical
 2900              	.LVL316:
1956:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2901              		.loc 1 1956 0
 2902 0026 2046     		mov	r0, r4
 2903 0028 10BD     		pop	{r4, pc}
 2904              		.cfi_endproc
 2905              	.LFE19:
 2907 002a 00BF     		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2908              		.align	2
 2909              		.global	uxQueueMessagesWaitingFromISR
 2910              		.thumb
 2911              		.thumb_func
 2913              	uxQueueMessagesWaitingFromISR:
 2914              	.LFB20:
1960:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 2915              		.loc 1 1960 0
 2916              		.cfi_startproc
 2917              		@ args = 0, pretend = 0, frame = 0
 2918              		@ frame_needed = 0, uses_anonymous_args = 0
 2919              		@ link register save eliminated.
 2920              	.LVL317:
1964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
 2921              		.loc 1 1964 0
 2922 0000 40B9     		cbnz	r0, .L254
 2923              	.LBB181:
 2924              	.LBB182:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2925              		.loc 2 195 0
 2926              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2927 0002 4FF05003 			mov r3, #80												
 2928 0006 83F31188 		msr basepri, r3											
 2929 000a BFF36F8F 		isb														
 2930 000e BFF34F8F 		dsb														
 2931              	
 2932              	@ 0 "" 2
 2933              	.LVL318:
 2934              		.thumb
 2935              	.L255:
 2936              	.LBE182:
 2937              	.LBE181:
1964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
 2938              		.loc 1 1964 0 discriminator 1
 2939 0012 FEE7     		b	.L255
 2940              	.L254:
1965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2941              		.loc 1 1965 0
 2942 0014 806B     		ldr	r0, [r0, #56]
ARM GAS  /tmp/ccj2W1aG.s 			page 105


 2943              	.LVL319:
1968:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2944              		.loc 1 1968 0
 2945 0016 7047     		bx	lr
 2946              		.cfi_endproc
 2947              	.LFE20:
 2949              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 2950              		.align	2
 2951              		.global	xQueueIsQueueEmptyFromISR
 2952              		.thumb
 2953              		.thumb_func
 2955              	xQueueIsQueueEmptyFromISR:
 2956              	.LFB27:
2309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 2957              		.loc 1 2309 0
 2958              		.cfi_startproc
 2959              		@ args = 0, pretend = 0, frame = 0
 2960              		@ frame_needed = 0, uses_anonymous_args = 0
 2961              		@ link register save eliminated.
 2962              	.LVL320:
2313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2963              		.loc 1 2313 0
 2964 0000 40B9     		cbnz	r0, .L257
 2965              	.LBB183:
 2966              	.LBB184:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2967              		.loc 2 195 0
 2968              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2969 0002 4FF05003 			mov r3, #80												
 2970 0006 83F31188 		msr basepri, r3											
 2971 000a BFF36F8F 		isb														
 2972 000e BFF34F8F 		dsb														
 2973              	
 2974              	@ 0 "" 2
 2975              	.LVL321:
 2976              		.thumb
 2977              	.L258:
 2978              	.LBE184:
 2979              	.LBE183:
2313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2980              		.loc 1 2313 0 discriminator 1
 2981 0012 FEE7     		b	.L258
 2982              	.L257:
2314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 2983              		.loc 1 2314 0
 2984 0014 836B     		ldr	r3, [r0, #56]
 2985 0016 0BB9     		cbnz	r3, .L260
2316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2986              		.loc 1 2316 0
 2987 0018 0120     		movs	r0, #1
 2988              	.LVL322:
 2989 001a 7047     		bx	lr
 2990              	.LVL323:
 2991              	.L260:
2320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2992              		.loc 1 2320 0
 2993 001c 0020     		movs	r0, #0
ARM GAS  /tmp/ccj2W1aG.s 			page 106


 2994              	.LVL324:
2324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2995              		.loc 1 2324 0
 2996 001e 7047     		bx	lr
 2997              		.cfi_endproc
 2998              	.LFE27:
 3000              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 3001              		.align	2
 3002              		.global	xQueueIsQueueFullFromISR
 3003              		.thumb
 3004              		.thumb_func
 3006              	xQueueIsQueueFullFromISR:
 3007              	.LFB29:
2346:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 3008              		.loc 1 2349 0
 3009              		.cfi_startproc
 3010              		@ args = 0, pretend = 0, frame = 0
 3011              		@ frame_needed = 0, uses_anonymous_args = 0
 3012              		@ link register save eliminated.
 3013              	.LVL325:
2350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
2352:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2353:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 3014              		.loc 1 2353 0
 3015 0000 40B9     		cbnz	r0, .L262
 3016              	.LBB185:
 3017              	.LBB186:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3018              		.loc 2 195 0
 3019              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3020 0002 4FF05003 			mov r3, #80												
 3021 0006 83F31188 		msr basepri, r3											
 3022 000a BFF36F8F 		isb														
 3023 000e BFF34F8F 		dsb														
 3024              	
 3025              	@ 0 "" 2
 3026              	.LVL326:
 3027              		.thumb
 3028              	.L263:
 3029              	.LBE186:
 3030              	.LBE185:
 3031              		.loc 1 2353 0 discriminator 1
 3032 0012 FEE7     		b	.L263
 3033              	.L262:
2354:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 3034              		.loc 1 2354 0
 3035 0014 826B     		ldr	r2, [r0, #56]
 3036 0016 C36B     		ldr	r3, [r0, #60]
 3037 0018 9A42     		cmp	r2, r3
 3038 001a 01D1     		bne	.L265
2355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
 3039              		.loc 1 2356 0
ARM GAS  /tmp/ccj2W1aG.s 			page 107


 3040 001c 0120     		movs	r0, #1
 3041              	.LVL327:
 3042 001e 7047     		bx	lr
 3043              	.LVL328:
 3044              	.L265:
2357:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2358:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
2359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2360:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
 3045              		.loc 1 2360 0
 3046 0020 0020     		movs	r0, #0
 3047              	.LVL329:
2361:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2362:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3048              		.loc 1 2364 0
 3049 0022 7047     		bx	lr
 3050              		.cfi_endproc
 3051              	.LFE29:
 3053              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 3054              		.align	2
 3055              		.global	vQueueAddToRegistry
 3056              		.thumb
 3057              		.thumb_func
 3059              	vQueueAddToRegistry:
 3060              	.LFB30:
2365:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2367:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2368:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
2370:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = xQueue;
2373:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt removing something from the queue
2376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2377:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2379:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2380:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2381:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The queue is full - do we want to block or just leave without
2382:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				posting? */
2383:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2384:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2386:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return indicating that we need to block. */
2387:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2388:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2389:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
2390:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2391:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2392:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2393:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2394:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
ARM GAS  /tmp/ccj2W1aG.s 			page 108


2395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2396:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2399:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2401:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2402:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2404:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2405:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2406:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
2407:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2408:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2409:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2410:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2412:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
2413:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2414:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
2415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2416:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2417:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The co-routine waiting has a higher priority so record
2418:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						that a yield might be appropriate. */
2419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2420:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2421:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2422:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2423:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2424:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2426:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2427:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2428:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2431:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2432:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2433:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = errQUEUE_FULL;
2434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2435:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2436:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2437:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2438:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2439:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2440:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2443:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2445:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2446:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2447:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2449:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = xQueue;
2450:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2451:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
ARM GAS  /tmp/ccj2W1aG.s 			page 109


2452:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt adding something to the queue
2453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2454:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2455:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2456:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2457:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2458:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2459:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				leave with nothing? */
2460:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2462:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2463:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					indicating that we need to block. */
2464:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2465:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2466:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
2467:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2468:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2469:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2470:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2471:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
2472:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2473:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2474:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2475:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2476:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2479:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2480:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2483:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2484:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Data is available from the queue. */
2486:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2487:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2488:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2489:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2490:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2491:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2492:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2493:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2494:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2495:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2496:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQ
2497:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2498:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
2499:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2500:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2501:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2503:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2504:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
2505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2506:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
2507:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
ARM GAS  /tmp/ccj2W1aG.s 			page 110


2509:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2510:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2513:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2514:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2515:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2516:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2517:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2520:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2521:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2522:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2523:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdFAIL;
2524:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2525:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2526:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2527:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2529:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2530:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2531:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2532:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2536:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2537:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2538:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = xQueue;
2539:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2540:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2541:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		exit without doing anything. */
2542:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2543:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2544:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2545:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2546:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2547:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			co-routine has not already been woken. */
2548:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2549:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2550:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2551:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2553:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2554:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						return pdTRUE;
2555:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2556:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2557:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2558:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2559:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2560:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2561:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2562:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2563:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2564:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2565:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
ARM GAS  /tmp/ccj2W1aG.s 			page 111


2566:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2567:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2568:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2569:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2570:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2571:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2572:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2573:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2574:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2575:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2576:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xCoRoutinePreviouslyWoken;
2577:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2578:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2581:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2582:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2583:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2584:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2585:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2586:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = xQueue;
2588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2589:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2590:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		not then just leave without doing anything. */
2591:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2592:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2593:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Copy the data from the queue. */
2594:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2595:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2597:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2598:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2599:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2600:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2601:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2602:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2604:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQu
2605:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2607:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2608:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2609:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2612:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2613:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2614:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2618:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2619:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2620:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2621:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2622:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
ARM GAS  /tmp/ccj2W1aG.s 			page 112


2623:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2624:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2625:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2626:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2627:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2628:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
2630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2631:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2632:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2633:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
2634:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2635:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2636:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2637:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2638:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2639:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2641:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2642:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2645:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3061              		.loc 1 2645 0
 3062              		.cfi_startproc
 3063              		@ args = 0, pretend = 0, frame = 0
 3064              		@ frame_needed = 0, uses_anonymous_args = 0
 3065              		@ link register save eliminated.
 3066              	.LVL330:
2646:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2648:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		a free slot. */
2650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3067              		.loc 1 2650 0
 3068 0000 0023     		movs	r3, #0
 3069 0002 0BE0     		b	.L267
 3070              	.LVL331:
 3071              	.L270:
2651:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2652:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 3072              		.loc 1 2652 0
 3073 0004 074A     		ldr	r2, .L271
 3074 0006 52F83320 		ldr	r2, [r2, r3, lsl #3]
 3075 000a 32B9     		cbnz	r2, .L268
2653:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2654:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Store the information on this queue. */
2655:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 3076              		.loc 1 2655 0
 3077 000c 054A     		ldr	r2, .L271
 3078 000e 42F83310 		str	r1, [r2, r3, lsl #3]
2656:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 3079              		.loc 1 2656 0
 3080 0012 02EBC303 		add	r3, r2, r3, lsl #3
 3081              	.LVL332:
 3082 0016 5860     		str	r0, [r3, #4]
2657:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccj2W1aG.s 			page 113


2658:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2659:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 3083              		.loc 1 2659 0
 3084 0018 7047     		bx	lr
 3085              	.LVL333:
 3086              	.L268:
2650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3087              		.loc 1 2650 0 discriminator 2
 3088 001a 0133     		adds	r3, r3, #1
 3089              	.LVL334:
 3090              	.L267:
2650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3091              		.loc 1 2650 0 is_stmt 0 discriminator 1
 3092 001c 072B     		cmp	r3, #7
 3093 001e F1D9     		bls	.L270
 3094 0020 7047     		bx	lr
 3095              	.L272:
 3096 0022 00BF     		.align	2
 3097              	.L271:
 3098 0024 00000000 		.word	xQueueRegistry
 3099              		.cfi_endproc
 3100              	.LFE30:
 3102              		.section	.text.pcQueueGetName,"ax",%progbits
 3103              		.align	2
 3104              		.global	pcQueueGetName
 3105              		.thumb
 3106              		.thumb_func
 3108              	pcQueueGetName:
 3109              	.LFB31:
2660:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2661:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2662:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2663:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2664:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2666:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2667:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2668:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2669:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2670:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2673:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3110              		.loc 1 2674 0 is_stmt 1
 3111              		.cfi_startproc
 3112              		@ args = 0, pretend = 0, frame = 0
 3113              		@ frame_needed = 0, uses_anonymous_args = 0
 3114              		@ link register save eliminated.
 3115              	.LVL335:
2675:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
2677:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2679:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		removing entries from the registry while it is being searched. */
2680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3116              		.loc 1 2680 0
ARM GAS  /tmp/ccj2W1aG.s 			page 114


 3117 0000 0023     		movs	r3, #0
 3118 0002 0AE0     		b	.L274
 3119              	.LVL336:
 3120              	.L277:
2681:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3121              		.loc 1 2682 0
 3122 0004 074A     		ldr	r2, .L278
 3123 0006 02EBC302 		add	r2, r2, r3, lsl #3
 3124 000a 5268     		ldr	r2, [r2, #4]
 3125 000c 8242     		cmp	r2, r0
 3126 000e 03D1     		bne	.L275
2683:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2684:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 3127              		.loc 1 2684 0
 3128 0010 044A     		ldr	r2, .L278
 3129 0012 52F83300 		ldr	r0, [r2, r3, lsl #3]
 3130              	.LVL337:
2685:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 3131              		.loc 1 2685 0
 3132 0016 7047     		bx	lr
 3133              	.LVL338:
 3134              	.L275:
2680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3135              		.loc 1 2680 0 discriminator 2
 3136 0018 0133     		adds	r3, r3, #1
 3137              	.LVL339:
 3138              	.L274:
2680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3139              		.loc 1 2680 0 is_stmt 0 discriminator 1
 3140 001a 072B     		cmp	r3, #7
 3141 001c F2D9     		bls	.L277
2676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3142              		.loc 1 2676 0 is_stmt 1
 3143 001e 0020     		movs	r0, #0
 3144              	.LVL340:
2686:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2687:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2688:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2689:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2690:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2691:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2692:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2693:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pcReturn;
2694:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 3145              		.loc 1 2694 0
 3146 0020 7047     		bx	lr
 3147              	.L279:
 3148 0022 00BF     		.align	2
 3149              	.L278:
 3150 0024 00000000 		.word	xQueueRegistry
 3151              		.cfi_endproc
 3152              	.LFE31:
 3154              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 3155              		.align	2
 3156              		.global	vQueueUnregisterQueue
 3157              		.thumb
ARM GAS  /tmp/ccj2W1aG.s 			page 115


 3158              		.thumb_func
 3160              	vQueueUnregisterQueue:
 3161              	.LFB32:
2695:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2696:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2697:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2701:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3162              		.loc 1 2702 0
 3163              		.cfi_startproc
 3164              		@ args = 0, pretend = 0, frame = 0
 3165              		@ frame_needed = 0, uses_anonymous_args = 0
 3166              		@ link register save eliminated.
 3167              	.LVL341:
2703:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2704:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2705:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		registry. */
2707:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3168              		.loc 1 2707 0
 3169 0000 0023     		movs	r3, #0
 3170 0002 0EE0     		b	.L281
 3171              	.LVL342:
 3172              	.L284:
2708:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2709:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3173              		.loc 1 2709 0
 3174 0004 084A     		ldr	r2, .L285
 3175 0006 02EBC302 		add	r2, r2, r3, lsl #3
 3176 000a 5268     		ldr	r2, [r2, #4]
 3177 000c 8242     		cmp	r2, r0
 3178 000e 07D1     		bne	.L282
2710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2711:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2712:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 3179              		.loc 1 2712 0
 3180 0010 054A     		ldr	r2, .L285
 3181 0012 0021     		movs	r1, #0
 3182 0014 42F83310 		str	r1, [r2, r3, lsl #3]
2713:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2714:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2715:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				appear in the registry twice if it is added, removed, then
2716:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				added again. */
2717:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 3183              		.loc 1 2717 0
 3184 0018 02EBC303 		add	r3, r2, r3, lsl #3
 3185              	.LVL343:
 3186 001c 5960     		str	r1, [r3, #4]
2718:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 3187              		.loc 1 2718 0
 3188 001e 7047     		bx	lr
 3189              	.LVL344:
 3190              	.L282:
2707:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
ARM GAS  /tmp/ccj2W1aG.s 			page 116


 3191              		.loc 1 2707 0 discriminator 2
 3192 0020 0133     		adds	r3, r3, #1
 3193              	.LVL345:
 3194              	.L281:
2707:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3195              		.loc 1 2707 0 is_stmt 0 discriminator 1
 3196 0022 072B     		cmp	r3, #7
 3197 0024 EED9     		bls	.L284
 3198 0026 7047     		bx	lr
 3199              	.L286:
 3200              		.align	2
 3201              	.L285:
 3202 0028 00000000 		.word	xQueueRegistry
 3203              		.cfi_endproc
 3204              	.LFE32:
 3206              		.section	.text.vQueueDelete,"ax",%progbits
 3207              		.align	2
 3208              		.global	vQueueDelete
 3209              		.thumb
 3210              		.thumb_func
 3212              	vQueueDelete:
 3213              	.LFB21:
1972:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 3214              		.loc 1 1972 0 is_stmt 1
 3215              		.cfi_startproc
 3216              		@ args = 0, pretend = 0, frame = 0
 3217              		@ frame_needed = 0, uses_anonymous_args = 0
 3218              	.LVL346:
1975:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 3219              		.loc 1 1975 0
 3220 0000 40B9     		cbnz	r0, .L288
 3221              	.LBB187:
 3222              	.LBB188:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3223              		.loc 2 195 0
 3224              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3225 0002 4FF05003 			mov r3, #80												
 3226 0006 83F31188 		msr basepri, r3											
 3227 000a BFF36F8F 		isb														
 3228 000e BFF34F8F 		dsb														
 3229              	
 3230              	@ 0 "" 2
 3231              	.LVL347:
 3232              		.thumb
 3233              	.L289:
 3234              	.LBE188:
 3235              	.LBE187:
1975:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 3236              		.loc 1 1975 0 discriminator 1
 3237 0012 FEE7     		b	.L289
 3238              	.L288:
1972:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = xQueue;
 3239              		.loc 1 1972 0
 3240 0014 10B5     		push	{r4, lr}
 3241              	.LCFI32:
 3242              		.cfi_def_cfa_offset 8
 3243              		.cfi_offset 4, -8
ARM GAS  /tmp/ccj2W1aG.s 			page 117


 3244              		.cfi_offset 14, -4
 3245 0016 0446     		mov	r4, r0
1980:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3246              		.loc 1 1980 0
 3247 0018 FFF7FEFF 		bl	vQueueUnregisterQueue
 3248              	.LVL348:
1988:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3249              		.loc 1 1988 0
 3250 001c 2046     		mov	r0, r4
 3251 001e FFF7FEFF 		bl	vPortFree
 3252              	.LVL349:
 3253 0022 10BD     		pop	{r4, pc}
 3254              		.cfi_endproc
 3255              	.LFE21:
 3257              		.comm	xQueueRegistry,64,4
 3258              		.text
 3259              	.Letext0:
 3260              		.file 3 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 3261              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 3262              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 3263              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 3264              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 3265              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 3266              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  /tmp/ccj2W1aG.s 			page 118


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
     /tmp/ccj2W1aG.s:19     .text.prvGetDisinheritPriorityAfterTimeout:0000000000000000 $t
     /tmp/ccj2W1aG.s:23     .text.prvGetDisinheritPriorityAfterTimeout:0000000000000000 prvGetDisinheritPriorityAfterTimeout
     /tmp/ccj2W1aG.s:53     .text.prvIsQueueFull:0000000000000000 $t
     /tmp/ccj2W1aG.s:57     .text.prvIsQueueFull:0000000000000000 prvIsQueueFull
     /tmp/ccj2W1aG.s:98     .text.prvIsQueueEmpty:0000000000000000 $t
     /tmp/ccj2W1aG.s:102    .text.prvIsQueueEmpty:0000000000000000 prvIsQueueEmpty
     /tmp/ccj2W1aG.s:141    .text.prvCopyDataToQueue:0000000000000000 $t
     /tmp/ccj2W1aG.s:145    .text.prvCopyDataToQueue:0000000000000000 prvCopyDataToQueue
     /tmp/ccj2W1aG.s:264    .text.prvCopyDataFromQueue:0000000000000000 $t
     /tmp/ccj2W1aG.s:268    .text.prvCopyDataFromQueue:0000000000000000 prvCopyDataFromQueue
     /tmp/ccj2W1aG.s:316    .text.prvUnlockQueue:0000000000000000 $t
     /tmp/ccj2W1aG.s:320    .text.prvUnlockQueue:0000000000000000 prvUnlockQueue
     /tmp/ccj2W1aG.s:423    .text.xQueueGenericReset:0000000000000000 $t
     /tmp/ccj2W1aG.s:428    .text.xQueueGenericReset:0000000000000000 xQueueGenericReset
     /tmp/ccj2W1aG.s:531    .text.xQueueGenericReset:000000000000007c $d
     /tmp/ccj2W1aG.s:536    .text.prvInitialiseNewQueue:0000000000000000 $t
     /tmp/ccj2W1aG.s:540    .text.prvInitialiseNewQueue:0000000000000000 prvInitialiseNewQueue
     /tmp/ccj2W1aG.s:580    .text.xQueueGenericCreate:0000000000000000 $t
     /tmp/ccj2W1aG.s:585    .text.xQueueGenericCreate:0000000000000000 xQueueGenericCreate
     /tmp/ccj2W1aG.s:672    .text.xQueueGenericSend:0000000000000000 $t
     /tmp/ccj2W1aG.s:677    .text.xQueueGenericSend:0000000000000000 xQueueGenericSend
     /tmp/ccj2W1aG.s:1014   .text.xQueueGenericSend:000000000000018c $d
     /tmp/ccj2W1aG.s:1019   .text.prvInitialiseMutex:0000000000000000 $t
     /tmp/ccj2W1aG.s:1023   .text.prvInitialiseMutex:0000000000000000 prvInitialiseMutex
     /tmp/ccj2W1aG.s:1062   .text.xQueueCreateMutex:0000000000000000 $t
     /tmp/ccj2W1aG.s:1067   .text.xQueueCreateMutex:0000000000000000 xQueueCreateMutex
     /tmp/ccj2W1aG.s:1099   .text.xQueueGenericSendFromISR:0000000000000000 $t
     /tmp/ccj2W1aG.s:1104   .text.xQueueGenericSendFromISR:0000000000000000 xQueueGenericSendFromISR
     /tmp/ccj2W1aG.s:1322   .text.xQueueGiveFromISR:0000000000000000 $t
     /tmp/ccj2W1aG.s:1327   .text.xQueueGiveFromISR:0000000000000000 xQueueGiveFromISR
     /tmp/ccj2W1aG.s:1520   .text.xQueueReceive:0000000000000000 $t
     /tmp/ccj2W1aG.s:1525   .text.xQueueReceive:0000000000000000 xQueueReceive
     /tmp/ccj2W1aG.s:1811   .text.xQueueReceive:0000000000000154 $d
     /tmp/ccj2W1aG.s:1816   .text.xQueueSemaphoreTake:0000000000000000 $t
     /tmp/ccj2W1aG.s:1821   .text.xQueueSemaphoreTake:0000000000000000 xQueueSemaphoreTake
     /tmp/ccj2W1aG.s:2157   .text.xQueueSemaphoreTake:000000000000018c $d
     /tmp/ccj2W1aG.s:2162   .text.xQueuePeek:0000000000000000 $t
     /tmp/ccj2W1aG.s:2167   .text.xQueuePeek:0000000000000000 xQueuePeek
     /tmp/ccj2W1aG.s:2454   .text.xQueuePeek:0000000000000154 $d
     /tmp/ccj2W1aG.s:2459   .text.xQueueReceiveFromISR:0000000000000000 $t
     /tmp/ccj2W1aG.s:2464   .text.xQueueReceiveFromISR:0000000000000000 xQueueReceiveFromISR
     /tmp/ccj2W1aG.s:2640   .text.xQueuePeekFromISR:0000000000000000 $t
     /tmp/ccj2W1aG.s:2645   .text.xQueuePeekFromISR:0000000000000000 xQueuePeekFromISR
     /tmp/ccj2W1aG.s:2795   .text.uxQueueMessagesWaiting:0000000000000000 $t
     /tmp/ccj2W1aG.s:2800   .text.uxQueueMessagesWaiting:0000000000000000 uxQueueMessagesWaiting
     /tmp/ccj2W1aG.s:2850   .text.uxQueueSpacesAvailable:0000000000000000 $t
     /tmp/ccj2W1aG.s:2855   .text.uxQueueSpacesAvailable:0000000000000000 uxQueueSpacesAvailable
     /tmp/ccj2W1aG.s:2908   .text.uxQueueMessagesWaitingFromISR:0000000000000000 $t
     /tmp/ccj2W1aG.s:2913   .text.uxQueueMessagesWaitingFromISR:0000000000000000 uxQueueMessagesWaitingFromISR
     /tmp/ccj2W1aG.s:2950   .text.xQueueIsQueueEmptyFromISR:0000000000000000 $t
     /tmp/ccj2W1aG.s:2955   .text.xQueueIsQueueEmptyFromISR:0000000000000000 xQueueIsQueueEmptyFromISR
     /tmp/ccj2W1aG.s:3001   .text.xQueueIsQueueFullFromISR:0000000000000000 $t
     /tmp/ccj2W1aG.s:3006   .text.xQueueIsQueueFullFromISR:0000000000000000 xQueueIsQueueFullFromISR
     /tmp/ccj2W1aG.s:3054   .text.vQueueAddToRegistry:0000000000000000 $t
     /tmp/ccj2W1aG.s:3059   .text.vQueueAddToRegistry:0000000000000000 vQueueAddToRegistry
ARM GAS  /tmp/ccj2W1aG.s 			page 119


     /tmp/ccj2W1aG.s:3098   .text.vQueueAddToRegistry:0000000000000024 $d
                            *COM*:0000000000000040 xQueueRegistry
     /tmp/ccj2W1aG.s:3103   .text.pcQueueGetName:0000000000000000 $t
     /tmp/ccj2W1aG.s:3108   .text.pcQueueGetName:0000000000000000 pcQueueGetName
     /tmp/ccj2W1aG.s:3150   .text.pcQueueGetName:0000000000000024 $d
     /tmp/ccj2W1aG.s:3155   .text.vQueueUnregisterQueue:0000000000000000 $t
     /tmp/ccj2W1aG.s:3160   .text.vQueueUnregisterQueue:0000000000000000 vQueueUnregisterQueue
     /tmp/ccj2W1aG.s:3202   .text.vQueueUnregisterQueue:0000000000000028 $d
     /tmp/ccj2W1aG.s:3207   .text.vQueueDelete:0000000000000000 $t
     /tmp/ccj2W1aG.s:3212   .text.vQueueDelete:0000000000000000 vQueueDelete
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskPriorityDisinherit
memcpy
xTaskRemoveFromEventList
vTaskMissedYield
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
vTaskInternalSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
vPortValidateInterruptPriority
pvTaskIncrementMutexHeldCount
xTaskPriorityInherit
vTaskPriorityDisinheritAfterTimeout
vPortFree
